    1: from datetime import datetime
    1: from datetime import timedelta
       
    1: from .._compat import string_types
    1: from ..datastructures import CallbackDict
    1: from ..http import dump_age
    1: from ..http import dump_csp_header
    1: from ..http import dump_header
    1: from ..http import dump_options_header
    1: from ..http import http_date
    1: from ..http import parse_age
    1: from ..http import parse_csp_header
    1: from ..http import parse_date
    1: from ..http import parse_options_header
    1: from ..http import parse_set_header
    1: from ..utils import cached_property
    1: from ..utils import environ_property
    1: from ..utils import get_content_type
    1: from ..utils import header_property
    1: from ..wsgi import get_content_length
       
       
    2: class CommonRequestDescriptorsMixin(object):
           """A mixin for :class:`BaseRequest` subclasses.  Request objects that
           mix this class in will automatically get descriptors for a couple of
           HTTP headers with automatic type conversion.
       
           .. versionadded:: 0.5
    1:     """
       
    1:     content_type = environ_property(
    1:         "CONTENT_TYPE",
               doc="""The Content-Type entity-header field indicates the media
               type of the entity-body sent to the recipient or, in the case of
               the HEAD method, the media type that would have been sent had
    1:         the request been a GET.""",
           )
       
    1:     @cached_property
           def content_length(self):
               """The Content-Length entity-header field indicates the size of the
               entity-body in bytes or, in the case of the HEAD method, the size of
               the entity-body that would have been sent had the request been a
               GET.
               """
               return get_content_length(self.environ)
       
    1:     content_encoding = environ_property(
    1:         "HTTP_CONTENT_ENCODING",
               doc="""The Content-Encoding entity-header field is used as a
               modifier to the media-type. When present, its value indicates
               what additional content codings have been applied to the
               entity-body, and thus what decoding mechanisms must be applied
               in order to obtain the media-type referenced by the Content-Type
               header field.
       
    1:         .. versionadded:: 0.9""",
           )
    1:     content_md5 = environ_property(
    1:         "HTTP_CONTENT_MD5",
               doc="""The Content-MD5 entity-header field, as defined in
               RFC 1864, is an MD5 digest of the entity-body for the purpose of
               providing an end-to-end message integrity check (MIC) of the
               entity-body. (Note: a MIC is good for detecting accidental
               modification of the entity-body in transit, but is not proof
               against malicious attacks.)
       
    1:         .. versionadded:: 0.9""",
           )
    1:     referrer = environ_property(
    1:         "HTTP_REFERER",
               doc="""The Referer[sic] request-header field allows the client
               to specify, for the server's benefit, the address (URI) of the
               resource from which the Request-URI was obtained (the
    1:         "referrer", although the header field is misspelled).""",
           )
    1:     date = environ_property(
    1:         "HTTP_DATE",
    1:         None,
    1:         parse_date,
               doc="""The Date general-header field represents the date and
               time at which the message was originated, having the same
    1:         semantics as orig-date in RFC 822.""",
           )
    1:     max_forwards = environ_property(
    1:         "HTTP_MAX_FORWARDS",
    1:         None,
    1:         int,
               doc="""The Max-Forwards request-header field provides a
               mechanism with the TRACE and OPTIONS methods to limit the number
               of proxies or gateways that can forward the request to the next
    1:         inbound server.""",
           )
       
    1:     def _parse_content_type(self):
               if not hasattr(self, "_parsed_content_type"):
                   self._parsed_content_type = parse_options_header(
                       self.environ.get("CONTENT_TYPE", "")
                   )
       
    1:     @property
           def mimetype(self):
               """Like :attr:`content_type`, but without parameters (eg, without
               charset, type etc.) and always lowercase.  For example if the content
               type is ``text/HTML; charset=utf-8`` the mimetype would be
               ``'text/html'``.
               """
               self._parse_content_type()
               return self._parsed_content_type[0].lower()
       
    1:     @property
           def mimetype_params(self):
               """The mimetype parameters as dict.  For example if the content
               type is ``text/html; charset=utf-8`` the params would be
               ``{'charset': 'utf-8'}``.
               """
               self._parse_content_type()
               return self._parsed_content_type[1]
       
    1:     @cached_property
           def pragma(self):
               """The Pragma general-header field is used to include
               implementation-specific directives that might apply to any recipient
               along the request/response chain.  All pragma directives specify
               optional behavior from the viewpoint of the protocol; however, some
               systems MAY require that behavior be consistent with the directives.
               """
               return parse_set_header(self.environ.get("HTTP_PRAGMA", ""))
       
       
    2: class CommonResponseDescriptorsMixin(object):
           """A mixin for :class:`BaseResponse` subclasses.  Response objects that
           mix this class in will automatically get descriptors for a couple of
           HTTP headers with automatic type conversion.
    1:     """
       
    1:     @property
           def mimetype(self):
               """The mimetype (content type without charset etc.)"""
               ct = self.headers.get("content-type")
               if ct:
                   return ct.split(";")[0].strip()
       
    1:     @mimetype.setter
           def mimetype(self, value):
               self.headers["Content-Type"] = get_content_type(value, self.charset)
       
    1:     @property
           def mimetype_params(self):
               """The mimetype parameters as dict. For example if the
               content type is ``text/html; charset=utf-8`` the params would be
               ``{'charset': 'utf-8'}``.
       
               .. versionadded:: 0.5
               """
       
               def on_update(d):
                   self.headers["Content-Type"] = dump_options_header(self.mimetype, d)
       
               d = parse_options_header(self.headers.get("content-type", ""))[1]
               return CallbackDict(d, on_update)
       
    1:     location = header_property(
    1:         "Location",
               doc="""The Location response-header field is used to redirect
               the recipient to a location other than the Request-URI for
               completion of the request or identification of a new
    1:         resource.""",
           )
    1:     age = header_property(
    1:         "Age",
    1:         None,
    1:         parse_age,
    1:         dump_age,
               doc="""The Age response-header field conveys the sender's
               estimate of the amount of time since the response (or its
               revalidation) was generated at the origin server.
       
               Age values are non-negative decimal integers, representing time
    1:         in seconds.""",
           )
    1:     content_type = header_property(
    1:         "Content-Type",
               doc="""The Content-Type entity-header field indicates the media
               type of the entity-body sent to the recipient or, in the case of
               the HEAD method, the media type that would have been sent had
    1:         the request been a GET.""",
           )
    1:     content_length = header_property(
    1:         "Content-Length",
    1:         None,
    1:         int,
    1:         str,
               doc="""The Content-Length entity-header field indicates the size
               of the entity-body, in decimal number of OCTETs, sent to the
               recipient or, in the case of the HEAD method, the size of the
               entity-body that would have been sent had the request been a
    1:         GET.""",
           )
    1:     content_location = header_property(
    1:         "Content-Location",
               doc="""The Content-Location entity-header field MAY be used to
               supply the resource location for the entity enclosed in the
               message when that entity is accessible from a location separate
    1:         from the requested resource's URI.""",
           )
    1:     content_encoding = header_property(
    1:         "Content-Encoding",
               doc="""The Content-Encoding entity-header field is used as a
               modifier to the media-type. When present, its value indicates
               what additional content codings have been applied to the
               entity-body, and thus what decoding mechanisms must be applied
               in order to obtain the media-type referenced by the Content-Type
    1:         header field.""",
           )
    1:     content_md5 = header_property(
    1:         "Content-MD5",
               doc="""The Content-MD5 entity-header field, as defined in
               RFC 1864, is an MD5 digest of the entity-body for the purpose of
               providing an end-to-end message integrity check (MIC) of the
               entity-body. (Note: a MIC is good for detecting accidental
               modification of the entity-body in transit, but is not proof
    1:         against malicious attacks.)""",
           )
    1:     content_security_policy = header_property(
    1:         "Content-Security-Policy",
    1:         None,
    1:         parse_csp_header,
    1:         dump_csp_header,
               doc="""The Content-Security-Policy header adds an additional layer of
    1:         security to help detect and mitigate certain types of attacks.""",
           )
    1:     content_security_policy_report_only = header_property(
    1:         "Content-Security-Policy-Report-Only",
    1:         None,
    1:         parse_csp_header,
    1:         dump_csp_header,
               doc="""The Content-Security-Policy-Report-Only header adds a csp policy
               that is not enforced but is reported thereby helping detect
    1:         certain types of attacks.""",
           )
    1:     date = header_property(
    1:         "Date",
    1:         None,
    1:         parse_date,
    1:         http_date,
               doc="""The Date general-header field represents the date and
               time at which the message was originated, having the same
    1:         semantics as orig-date in RFC 822.""",
           )
    1:     expires = header_property(
    1:         "Expires",
    1:         None,
    1:         parse_date,
    1:         http_date,
               doc="""The Expires entity-header field gives the date/time after
               which the response is considered stale. A stale cache entry may
    1:         not normally be returned by a cache.""",
           )
    1:     last_modified = header_property(
    1:         "Last-Modified",
    1:         None,
    1:         parse_date,
    1:         http_date,
               doc="""The Last-Modified entity-header field indicates the date
               and time at which the origin server believes the variant was
    1:         last modified.""",
           )
       
    1:     @property
           def retry_after(self):
               """The Retry-After response-header field can be used with a
               503 (Service Unavailable) response to indicate how long the
               service is expected to be unavailable to the requesting client.
       
               Time in seconds until expiration or date.
               """
               value = self.headers.get("retry-after")
               if value is None:
                   return
               elif value.isdigit():
                   return datetime.utcnow() + timedelta(seconds=int(value))
               return parse_date(value)
       
    1:     @retry_after.setter
           def retry_after(self, value):
               if value is None:
                   if "retry-after" in self.headers:
                       del self.headers["retry-after"]
                   return
               elif isinstance(value, datetime):
                   value = http_date(value)
               else:
                   value = str(value)
               self.headers["Retry-After"] = value
       
    1:     def _set_property(name, doc=None):  # noqa: B902
    3:         def fget(self):
                   def on_update(header_set):
                       if not header_set and name in self.headers:
                           del self.headers[name]
                       elif header_set:
                           self.headers[name] = header_set.to_header()
       
                   return parse_set_header(self.headers.get(name), on_update)
       
    3:         def fset(self, value):
                   if not value:
                       del self.headers[name]
                   elif isinstance(value, string_types):
                       self.headers[name] = value
                   else:
                       self.headers[name] = dump_header(value)
       
    3:         return property(fget, fset, doc=doc)
       
    1:     vary = _set_property(
    1:         "Vary",
               doc="""The Vary field value indicates the set of request-header
               fields that fully determines, while the response is fresh,
               whether a cache is permitted to use the response to reply to a
    1:         subsequent request without revalidation.""",
           )
    1:     content_language = _set_property(
    1:         "Content-Language",
               doc="""The Content-Language entity-header field describes the
               natural language(s) of the intended audience for the enclosed
               entity. Note that this might not be equivalent to all the
    1:         languages used within the entity-body.""",
           )
    1:     allow = _set_property(
    1:         "Allow",
               doc="""The Allow entity-header field lists the set of methods
               supported by the resource identified by the Request-URI. The
               purpose of this field is strictly to inform the recipient of
               valid methods associated with the resource. An Allow header
               field MUST be present in a 405 (Method Not Allowed)
    1:         response.""",
           )
       
    1:     del _set_property
