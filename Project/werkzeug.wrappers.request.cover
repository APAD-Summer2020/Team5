    1: from .accept import AcceptMixin
    1: from .auth import AuthorizationMixin
    1: from .base_request import BaseRequest
    1: from .common_descriptors import CommonRequestDescriptorsMixin
    1: from .cors import CORSRequestMixin
    1: from .etag import ETagRequestMixin
    1: from .user_agent import UserAgentMixin
       
       
    2: class Request(
    1:     BaseRequest,
    1:     AcceptMixin,
    1:     ETagRequestMixin,
    1:     UserAgentMixin,
    1:     AuthorizationMixin,
    1:     CORSRequestMixin,
    1:     CommonRequestDescriptorsMixin,
       ):
           """Full featured request object implementing the following mixins:
       
           -   :class:`AcceptMixin` for accept header parsing
           -   :class:`ETagRequestMixin` for etag and cache control handling
           -   :class:`UserAgentMixin` for user agent introspection
           -   :class:`AuthorizationMixin` for http auth handling
           -   :class:`~werkzeug.wrappers.cors.CORSRequestMixin` for Cross
               Origin Resource Sharing headers
           -   :class:`CommonRequestDescriptorsMixin` for common headers
       
    1:     """
       
       
    2: class StreamOnlyMixin(object):
           """If mixed in before the request object this will change the behavior
           of it to disable handling of form parsing.  This disables the
           :attr:`files`, :attr:`form` attributes and will just provide a
           :attr:`stream` attribute that however is always available.
       
           .. versionadded:: 0.9
    1:     """
       
    1:     disable_data_descriptor = True
    1:     want_form_data_parsed = False
       
       
    2: class PlainRequest(StreamOnlyMixin, Request):
           """A request object without special form parsing capabilities.
       
           .. versionadded:: 0.9
    1:     """
