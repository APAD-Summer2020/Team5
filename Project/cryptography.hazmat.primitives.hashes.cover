       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
       
    1: from __future__ import absolute_import, division, print_function
       
    1: import abc
       
    1: import six
       
    1: from cryptography import utils
    1: from cryptography.exceptions import (
           AlreadyFinalized, UnsupportedAlgorithm, _Reasons
       )
    1: from cryptography.hazmat.backends.interfaces import HashBackend
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class HashAlgorithm(object):
    1:     @abc.abstractproperty
           def name(self):
               """
               A string naming this algorithm (e.g. "sha256", "md5").
               """
       
    1:     @abc.abstractproperty
           def digest_size(self):
               """
               The size of the resulting digest in bytes.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class HashContext(object):
    1:     @abc.abstractproperty
           def algorithm(self):
               """
               A HashAlgorithm that will be used by this context.
               """
       
    1:     @abc.abstractmethod
           def update(self, data):
               """
               Processes the provided bytes through the hash.
               """
       
    1:     @abc.abstractmethod
           def finalize(self):
               """
               Finalizes the hash context and returns the hash digest as bytes.
               """
       
    1:     @abc.abstractmethod
           def copy(self):
               """
               Return a HashContext that is a copy of the current context.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class ExtendableOutputFunction(object):
           """
           An interface for extendable output functions.
    1:     """
       
       
    2: @utils.register_interface(HashContext)
    1: class Hash(object):
    1:     def __init__(self, algorithm, backend, ctx=None):
    1:         if not isinstance(backend, HashBackend):
                   raise UnsupportedAlgorithm(
                       "Backend object does not implement HashBackend.",
                       _Reasons.BACKEND_MISSING_INTERFACE
                   )
       
    1:         if not isinstance(algorithm, HashAlgorithm):
                   raise TypeError("Expected instance of hashes.HashAlgorithm.")
    1:         self._algorithm = algorithm
       
    1:         self._backend = backend
       
    1:         if ctx is None:
    1:             self._ctx = self._backend.create_hash_ctx(self.algorithm)
               else:
                   self._ctx = ctx
       
    1:     algorithm = utils.read_only_property("_algorithm")
       
    1:     def update(self, data):
    1:         if self._ctx is None:
                   raise AlreadyFinalized("Context was already finalized.")
    1:         utils._check_byteslike("data", data)
    1:         self._ctx.update(data)
       
    1:     def copy(self):
               if self._ctx is None:
                   raise AlreadyFinalized("Context was already finalized.")
               return Hash(
                   self.algorithm, backend=self._backend, ctx=self._ctx.copy()
               )
       
    1:     def finalize(self):
    1:         if self._ctx is None:
                   raise AlreadyFinalized("Context was already finalized.")
    1:         digest = self._ctx.finalize()
    1:         self._ctx = None
    1:         return digest
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA1(object):
    1:     name = "sha1"
    1:     digest_size = 20
    1:     block_size = 64
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA512_224(object):  # noqa: N801
    1:     name = "sha512-224"
    1:     digest_size = 28
    1:     block_size = 128
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA512_256(object):  # noqa: N801
    1:     name = "sha512-256"
    1:     digest_size = 32
    1:     block_size = 128
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA224(object):
    1:     name = "sha224"
    1:     digest_size = 28
    1:     block_size = 64
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA256(object):
    1:     name = "sha256"
    1:     digest_size = 32
    1:     block_size = 64
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA384(object):
    1:     name = "sha384"
    1:     digest_size = 48
    1:     block_size = 128
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA512(object):
    1:     name = "sha512"
    1:     digest_size = 64
    1:     block_size = 128
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA3_224(object):  # noqa: N801
    1:     name = "sha3-224"
    1:     digest_size = 28
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA3_256(object):  # noqa: N801
    1:     name = "sha3-256"
    1:     digest_size = 32
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA3_384(object):  # noqa: N801
    1:     name = "sha3-384"
    1:     digest_size = 48
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class SHA3_512(object):  # noqa: N801
    1:     name = "sha3-512"
    1:     digest_size = 64
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: @utils.register_interface(ExtendableOutputFunction)
    1: class SHAKE128(object):
    1:     name = "shake128"
       
    1:     def __init__(self, digest_size):
               if not isinstance(digest_size, six.integer_types):
                   raise TypeError("digest_size must be an integer")
       
               if digest_size < 1:
                   raise ValueError("digest_size must be a positive integer")
       
               self._digest_size = digest_size
       
    1:     digest_size = utils.read_only_property("_digest_size")
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: @utils.register_interface(ExtendableOutputFunction)
    1: class SHAKE256(object):
    1:     name = "shake256"
       
    1:     def __init__(self, digest_size):
               if not isinstance(digest_size, six.integer_types):
                   raise TypeError("digest_size must be an integer")
       
               if digest_size < 1:
                   raise ValueError("digest_size must be a positive integer")
       
               self._digest_size = digest_size
       
    1:     digest_size = utils.read_only_property("_digest_size")
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class MD5(object):
    1:     name = "md5"
    1:     digest_size = 16
    1:     block_size = 64
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class BLAKE2b(object):
    1:     name = "blake2b"
    1:     _max_digest_size = 64
    1:     _min_digest_size = 1
    1:     block_size = 128
       
    1:     def __init__(self, digest_size):
       
               if digest_size != 64:
                   raise ValueError("Digest size must be 64")
       
               self._digest_size = digest_size
       
    1:     digest_size = utils.read_only_property("_digest_size")
       
       
    2: @utils.register_interface(HashAlgorithm)
    1: class BLAKE2s(object):
    1:     name = "blake2s"
    1:     block_size = 64
    1:     _max_digest_size = 32
    1:     _min_digest_size = 1
       
    1:     def __init__(self, digest_size):
       
               if digest_size != 32:
                   raise ValueError("Digest size must be 32")
       
               self._digest_size = digest_size
       
    1:     digest_size = utils.read_only_property("_digest_size")
