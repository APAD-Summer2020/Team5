       #
       # This file is part of pyasn1 software.
       #
       # Copyright (c) 2005-2019, Ilya Etingof <etingof@gmail.com>
       # License: http://snmplabs.com/pyasn1/license.html
       #
    1: from pyasn1 import error
       
    1: __all__ = ['TagMap']
       
       
    2: class TagMap(object):
           """Map *TagSet* objects to ASN.1 types
       
           Create an object mapping *TagSet* object to ASN.1 type.
       
           *TagMap* objects are immutable and duck-type read-only Python
           :class:`dict` objects holding *TagSet* objects as keys and ASN.1
           type objects as values.
       
           Parameters
           ----------
           presentTypes: :py:class:`dict`
               Map of :class:`~pyasn1.type.tag.TagSet` to ASN.1 objects considered
               as being unconditionally present in the *TagMap*.
       
           skipTypes: :py:class:`dict`
               A collection of :class:`~pyasn1.type.tag.TagSet` objects considered
               as absent in the *TagMap* even when *defaultType* is present.
       
           defaultType: ASN.1 type object
               An ASN.1 type object callee *TagMap* returns for any *TagSet* key not present
               in *presentTypes* (unless given key is present in *skipTypes*).
    1:     """
    1:     def __init__(self, presentTypes=None, skipTypes=None, defaultType=None):
 2724:         self.__presentTypes = presentTypes or {}
 2724:         self.__skipTypes = skipTypes or {}
 2724:         self.__defaultType = defaultType
       
    1:     def __contains__(self, tagSet):
               return (tagSet in self.__presentTypes or
                       self.__defaultType is not None and tagSet not in self.__skipTypes)
       
    1:     def __getitem__(self, tagSet):
               try:
                   return self.__presentTypes[tagSet]
               except KeyError:
                   if self.__defaultType is None:
                       raise KeyError()
                   elif tagSet in self.__skipTypes:
                       raise error.PyAsn1Error('Key in negative map')
                   else:
                       return self.__defaultType
       
    1:     def __iter__(self):
 1367:         return iter(self.__presentTypes)
       
    1:     def __repr__(self):
               representation = '%s object' % self.__class__.__name__
       
               if self.__presentTypes:
                   representation += ', present %s' % repr(self.__presentTypes)
       
               if self.__skipTypes:
                   representation += ', skip %s' % repr(self.__skipTypes)
       
               if self.__defaultType is not None:
                   representation += ', default %s' % repr(self.__defaultType)
       
               return '<%s>' % representation
       
    1:     @property
           def presentTypes(self):
               """Return *TagSet* to ASN.1 type map present in callee *TagMap*"""
  666:         return self.__presentTypes
       
    1:     @property
           def skipTypes(self):
               """Return *TagSet* collection unconditionally absent in callee *TagMap*"""
 1345:         return self.__skipTypes
       
    1:     @property
           def defaultType(self):
               """Return default ASN.1 type being returned for any missing *TagSet*"""
 1345:         return self.__defaultType
       
           # Backward compatibility
       
    1:     def getPosMap(self):
               return self.presentTypes
       
    1:     def getNegMap(self):
               return self.skipTypes
       
    1:     def getDef(self):
               return self.defaultType
