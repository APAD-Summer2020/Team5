       #-----------------------------------------------------------------
       # ** ATTENTION **
       # This code was automatically generated from the file:
       # _c_ast.cfg
       #
       # Do not modify it directly. Modify the configuration file and
       # run the generator again.
       # ** ** *** ** **
       #
       # pycparser: c_ast.py
       #
       # AST Node classes.
       #
       # Eli Bendersky [https://eli.thegreenplace.net/]
       # License: BSD
       #-----------------------------------------------------------------
       
       
    1: import sys
       
    1: def _repr(obj):
           """
           Get the representation of an object, with dedicated pprint-like format for lists.
           """
           if isinstance(obj, list):
               return '[' + (',\n '.join((_repr(e).replace('\n', '\n ') for e in obj))) + '\n]'
           else:
               return repr(obj) 
       
    2: class Node(object):
    1:     __slots__ = ()
           """ Abstract base class for AST nodes.
           """
    1:     def __repr__(self):
               """ Generates a python representation of the current node
               """
               result = self.__class__.__name__ + '('
               
               indent = ''
               separator = ''
               for name in self.__slots__[:-2]:
                   result += separator
                   result += indent
                   result += name + '=' + (_repr(getattr(self, name)).replace('\n', '\n  ' + (' ' * (len(name) + len(self.__class__.__name__)))))
                   
                   separator = ','
                   indent = '\n ' + (' ' * len(self.__class__.__name__))
               
               result += indent + ')'
               
               return result
       
    1:     def children(self):
               """ A sequence of all children that are Nodes
               """
               pass
       
    1:     def show(self, buf=sys.stdout, offset=0, attrnames=False, nodenames=False, showcoord=False, _my_node_name=None):
               """ Pretty print the Node and all its attributes and
                   children (recursively) to a buffer.
       
                   buf:
                       Open IO buffer into which the Node is printed.
       
                   offset:
                       Initial offset (amount of leading spaces)
       
                   attrnames:
                       True if you want to see the attribute names in
                       name=value pairs. False to only see the values.
       
                   nodenames:
                       True if you want to see the actual node names
                       within their parents.
       
                   showcoord:
                       Do you want the coordinates of each Node to be
                       displayed.
               """
               lead = ' ' * offset
               if nodenames and _my_node_name is not None:
                   buf.write(lead + self.__class__.__name__+ ' <' + _my_node_name + '>: ')
               else:
                   buf.write(lead + self.__class__.__name__+ ': ')
       
               if self.attr_names:
                   if attrnames:
                       nvlist = [(n, getattr(self,n)) for n in self.attr_names]
                       attrstr = ', '.join('%s=%s' % nv for nv in nvlist)
                   else:
                       vlist = [getattr(self, n) for n in self.attr_names]
                       attrstr = ', '.join('%s' % v for v in vlist)
                   buf.write(attrstr)
       
               if showcoord:
                   buf.write(' (at %s)' % self.coord)
               buf.write('\n')
       
               for (child_name, child) in self.children():
                   child.show(
                       buf,
                       offset=offset + 2,
                       attrnames=attrnames,
                       nodenames=nodenames,
                       showcoord=showcoord,
                       _my_node_name=child_name)
       
       
    2: class NodeVisitor(object):
           """ A base NodeVisitor class for visiting c_ast nodes.
               Subclass it and define your own visit_XXX methods, where
               XXX is the class name you want to visit with these
               methods.
       
               For example:
       
               class ConstantVisitor(NodeVisitor):
                   def __init__(self):
                       self.values = []
       
                   def visit_Constant(self, node):
                       self.values.append(node.value)
       
               Creates a list of values of all the constant nodes
               encountered below the given node. To use it:
       
               cv = ConstantVisitor()
               cv.visit(node)
       
               Notes:
       
               *   generic_visit() will be called for AST nodes for which
                   no visit_XXX method was defined.
               *   The children of nodes for which a visit_XXX was
                   defined will not be visited - if you need this, call
                   generic_visit() on the node.
                   You can use:
                       NodeVisitor.generic_visit(self, node)
               *   Modeled after Python's own AST visiting facilities
                   (the ast module of Python 3.0)
    1:     """
       
    1:     _method_cache = None
       
    1:     def visit(self, node):
               """ Visit a node.
               """
       
               if self._method_cache is None:
                   self._method_cache = {}
       
               visitor = self._method_cache.get(node.__class__.__name__, None)
               if visitor is None:
                   method = 'visit_' + node.__class__.__name__
                   visitor = getattr(self, method, self.generic_visit)
                   self._method_cache[node.__class__.__name__] = visitor
       
               return visitor(node)
       
    1:     def generic_visit(self, node):
               """ Called if no explicit visitor function exists for a
                   node. Implements preorder visiting of the node.
               """
               for c in node:
                   self.visit(c)
       
    2: class ArrayDecl(Node):
    1:     __slots__ = ('type', 'dim', 'dim_quals', 'coord', '__weakref__')
    1:     def __init__(self, type, dim, dim_quals, coord=None):
   17:         self.type = type
   17:         self.dim = dim
   17:         self.dim_quals = dim_quals
   17:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.type is not None: nodelist.append(("type", self.type))
               if self.dim is not None: nodelist.append(("dim", self.dim))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.type is not None:
                   yield self.type
               if self.dim is not None:
                   yield self.dim
       
    1:     attr_names = ('dim_quals', )
       
    2: class ArrayRef(Node):
    1:     __slots__ = ('name', 'subscript', 'coord', '__weakref__')
    1:     def __init__(self, name, subscript, coord=None):
               self.name = name
               self.subscript = subscript
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.name is not None: nodelist.append(("name", self.name))
               if self.subscript is not None: nodelist.append(("subscript", self.subscript))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.name is not None:
                   yield self.name
               if self.subscript is not None:
                   yield self.subscript
       
    1:     attr_names = ()
       
    2: class Assignment(Node):
    1:     __slots__ = ('op', 'lvalue', 'rvalue', 'coord', '__weakref__')
    1:     def __init__(self, op, lvalue, rvalue, coord=None):
               self.op = op
               self.lvalue = lvalue
               self.rvalue = rvalue
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.lvalue is not None: nodelist.append(("lvalue", self.lvalue))
               if self.rvalue is not None: nodelist.append(("rvalue", self.rvalue))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.lvalue is not None:
                   yield self.lvalue
               if self.rvalue is not None:
                   yield self.rvalue
       
    1:     attr_names = ('op', )
       
    2: class BinaryOp(Node):
    1:     __slots__ = ('op', 'left', 'right', 'coord', '__weakref__')
    1:     def __init__(self, op, left, right, coord=None):
               self.op = op
               self.left = left
               self.right = right
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.left is not None: nodelist.append(("left", self.left))
               if self.right is not None: nodelist.append(("right", self.right))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.left is not None:
                   yield self.left
               if self.right is not None:
                   yield self.right
       
    1:     attr_names = ('op', )
       
    2: class Break(Node):
    1:     __slots__ = ('coord', '__weakref__')
    1:     def __init__(self, coord=None):
               self.coord = coord
       
    1:     def children(self):
               return ()
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ()
       
    2: class Case(Node):
    1:     __slots__ = ('expr', 'stmts', 'coord', '__weakref__')
    1:     def __init__(self, expr, stmts, coord=None):
               self.expr = expr
               self.stmts = stmts
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.expr is not None: nodelist.append(("expr", self.expr))
               for i, child in enumerate(self.stmts or []):
                   nodelist.append(("stmts[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.expr is not None:
                   yield self.expr
               for child in (self.stmts or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class Cast(Node):
    1:     __slots__ = ('to_type', 'expr', 'coord', '__weakref__')
    1:     def __init__(self, to_type, expr, coord=None):
               self.to_type = to_type
               self.expr = expr
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.to_type is not None: nodelist.append(("to_type", self.to_type))
               if self.expr is not None: nodelist.append(("expr", self.expr))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.to_type is not None:
                   yield self.to_type
               if self.expr is not None:
                   yield self.expr
       
    1:     attr_names = ()
       
    2: class Compound(Node):
    1:     __slots__ = ('block_items', 'coord', '__weakref__')
    1:     def __init__(self, block_items, coord=None):
               self.block_items = block_items
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.block_items or []):
                   nodelist.append(("block_items[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.block_items or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class CompoundLiteral(Node):
    1:     __slots__ = ('type', 'init', 'coord', '__weakref__')
    1:     def __init__(self, type, init, coord=None):
               self.type = type
               self.init = init
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.type is not None: nodelist.append(("type", self.type))
               if self.init is not None: nodelist.append(("init", self.init))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.type is not None:
                   yield self.type
               if self.init is not None:
                   yield self.init
       
    1:     attr_names = ()
       
    2: class Constant(Node):
    1:     __slots__ = ('type', 'value', 'coord', '__weakref__')
    1:     def __init__(self, type, value, coord=None):
    7:         self.type = type
    7:         self.value = value
    7:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               return tuple(nodelist)
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ('type', 'value', )
       
    2: class Continue(Node):
    1:     __slots__ = ('coord', '__weakref__')
    1:     def __init__(self, coord=None):
               self.coord = coord
       
    1:     def children(self):
               return ()
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ()
       
    2: class Decl(Node):
    1:     __slots__ = ('name', 'quals', 'storage', 'funcspec', 'type', 'init', 'bitsize', 'coord', '__weakref__')
    1:     def __init__(self, name, quals, storage, funcspec, type, init, bitsize, coord=None):
  402:         self.name = name
  402:         self.quals = quals
  402:         self.storage = storage
  402:         self.funcspec = funcspec
  402:         self.type = type
  402:         self.init = init
  402:         self.bitsize = bitsize
  402:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.type is not None: nodelist.append(("type", self.type))
               if self.init is not None: nodelist.append(("init", self.init))
               if self.bitsize is not None: nodelist.append(("bitsize", self.bitsize))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.type is not None:
                   yield self.type
               if self.init is not None:
                   yield self.init
               if self.bitsize is not None:
                   yield self.bitsize
       
    1:     attr_names = ('name', 'quals', 'storage', 'funcspec', )
       
    2: class DeclList(Node):
    1:     __slots__ = ('decls', 'coord', '__weakref__')
    1:     def __init__(self, decls, coord=None):
               self.decls = decls
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.decls or []):
                   nodelist.append(("decls[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.decls or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class Default(Node):
    1:     __slots__ = ('stmts', 'coord', '__weakref__')
    1:     def __init__(self, stmts, coord=None):
               self.stmts = stmts
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.stmts or []):
                   nodelist.append(("stmts[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.stmts or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class DoWhile(Node):
    1:     __slots__ = ('cond', 'stmt', 'coord', '__weakref__')
    1:     def __init__(self, cond, stmt, coord=None):
               self.cond = cond
               self.stmt = stmt
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.cond is not None: nodelist.append(("cond", self.cond))
               if self.stmt is not None: nodelist.append(("stmt", self.stmt))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.cond is not None:
                   yield self.cond
               if self.stmt is not None:
                   yield self.stmt
       
    1:     attr_names = ()
       
    2: class EllipsisParam(Node):
    1:     __slots__ = ('coord', '__weakref__')
    1:     def __init__(self, coord=None):
               self.coord = coord
       
    1:     def children(self):
               return ()
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ()
       
    2: class EmptyStatement(Node):
    1:     __slots__ = ('coord', '__weakref__')
    1:     def __init__(self, coord=None):
               self.coord = coord
       
    1:     def children(self):
               return ()
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ()
       
    2: class Enum(Node):
    1:     __slots__ = ('name', 'values', 'coord', '__weakref__')
    1:     def __init__(self, name, values, coord=None):
               self.name = name
               self.values = values
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.values is not None: nodelist.append(("values", self.values))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.values is not None:
                   yield self.values
       
    1:     attr_names = ('name', )
       
    2: class Enumerator(Node):
    1:     __slots__ = ('name', 'value', 'coord', '__weakref__')
    1:     def __init__(self, name, value, coord=None):
               self.name = name
               self.value = value
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.value is not None: nodelist.append(("value", self.value))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.value is not None:
                   yield self.value
       
    1:     attr_names = ('name', )
       
    2: class EnumeratorList(Node):
    1:     __slots__ = ('enumerators', 'coord', '__weakref__')
    1:     def __init__(self, enumerators, coord=None):
               self.enumerators = enumerators
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.enumerators or []):
                   nodelist.append(("enumerators[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.enumerators or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class ExprList(Node):
    1:     __slots__ = ('exprs', 'coord', '__weakref__')
    1:     def __init__(self, exprs, coord=None):
               self.exprs = exprs
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.exprs or []):
                   nodelist.append(("exprs[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.exprs or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class FileAST(Node):
    1:     __slots__ = ('ext', 'coord', '__weakref__')
    1:     def __init__(self, ext, coord=None):
   19:         self.ext = ext
   19:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.ext or []):
                   nodelist.append(("ext[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.ext or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class For(Node):
    1:     __slots__ = ('init', 'cond', 'next', 'stmt', 'coord', '__weakref__')
    1:     def __init__(self, init, cond, next, stmt, coord=None):
               self.init = init
               self.cond = cond
               self.next = next
               self.stmt = stmt
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.init is not None: nodelist.append(("init", self.init))
               if self.cond is not None: nodelist.append(("cond", self.cond))
               if self.next is not None: nodelist.append(("next", self.next))
               if self.stmt is not None: nodelist.append(("stmt", self.stmt))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.init is not None:
                   yield self.init
               if self.cond is not None:
                   yield self.cond
               if self.next is not None:
                   yield self.next
               if self.stmt is not None:
                   yield self.stmt
       
    1:     attr_names = ()
       
    2: class FuncCall(Node):
    1:     __slots__ = ('name', 'args', 'coord', '__weakref__')
    1:     def __init__(self, name, args, coord=None):
               self.name = name
               self.args = args
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.name is not None: nodelist.append(("name", self.name))
               if self.args is not None: nodelist.append(("args", self.args))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.name is not None:
                   yield self.name
               if self.args is not None:
                   yield self.args
       
    1:     attr_names = ()
       
    2: class FuncDecl(Node):
    1:     __slots__ = ('args', 'type', 'coord', '__weakref__')
    1:     def __init__(self, args, type, coord=None):
  105:         self.args = args
  105:         self.type = type
  105:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.args is not None: nodelist.append(("args", self.args))
               if self.type is not None: nodelist.append(("type", self.type))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.args is not None:
                   yield self.args
               if self.type is not None:
                   yield self.type
       
    1:     attr_names = ()
       
    2: class FuncDef(Node):
    1:     __slots__ = ('decl', 'param_decls', 'body', 'coord', '__weakref__')
    1:     def __init__(self, decl, param_decls, body, coord=None):
               self.decl = decl
               self.param_decls = param_decls
               self.body = body
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.decl is not None: nodelist.append(("decl", self.decl))
               if self.body is not None: nodelist.append(("body", self.body))
               for i, child in enumerate(self.param_decls or []):
                   nodelist.append(("param_decls[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.decl is not None:
                   yield self.decl
               if self.body is not None:
                   yield self.body
               for child in (self.param_decls or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class Goto(Node):
    1:     __slots__ = ('name', 'coord', '__weakref__')
    1:     def __init__(self, name, coord=None):
               self.name = name
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               return tuple(nodelist)
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ('name', )
       
    2: class ID(Node):
    1:     __slots__ = ('name', 'coord', '__weakref__')
    1:     def __init__(self, name, coord=None):
               self.name = name
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               return tuple(nodelist)
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ('name', )
       
    2: class IdentifierType(Node):
    1:     __slots__ = ('names', 'coord', '__weakref__')
    1:     def __init__(self, names, coord=None):
  969:         self.names = names
  969:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               return tuple(nodelist)
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ('names', )
       
    2: class If(Node):
    1:     __slots__ = ('cond', 'iftrue', 'iffalse', 'coord', '__weakref__')
    1:     def __init__(self, cond, iftrue, iffalse, coord=None):
               self.cond = cond
               self.iftrue = iftrue
               self.iffalse = iffalse
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.cond is not None: nodelist.append(("cond", self.cond))
               if self.iftrue is not None: nodelist.append(("iftrue", self.iftrue))
               if self.iffalse is not None: nodelist.append(("iffalse", self.iffalse))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.cond is not None:
                   yield self.cond
               if self.iftrue is not None:
                   yield self.iftrue
               if self.iffalse is not None:
                   yield self.iffalse
       
    1:     attr_names = ()
       
    2: class InitList(Node):
    1:     __slots__ = ('exprs', 'coord', '__weakref__')
    1:     def __init__(self, exprs, coord=None):
               self.exprs = exprs
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.exprs or []):
                   nodelist.append(("exprs[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.exprs or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class Label(Node):
    1:     __slots__ = ('name', 'stmt', 'coord', '__weakref__')
    1:     def __init__(self, name, stmt, coord=None):
               self.name = name
               self.stmt = stmt
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.stmt is not None: nodelist.append(("stmt", self.stmt))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.stmt is not None:
                   yield self.stmt
       
    1:     attr_names = ('name', )
       
    2: class NamedInitializer(Node):
    1:     __slots__ = ('name', 'expr', 'coord', '__weakref__')
    1:     def __init__(self, name, expr, coord=None):
               self.name = name
               self.expr = expr
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.expr is not None: nodelist.append(("expr", self.expr))
               for i, child in enumerate(self.name or []):
                   nodelist.append(("name[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.expr is not None:
                   yield self.expr
               for child in (self.name or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class ParamList(Node):
    1:     __slots__ = ('params', 'coord', '__weakref__')
    1:     def __init__(self, params, coord=None):
  105:         self.params = params
  105:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.params or []):
                   nodelist.append(("params[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.params or []):
                   yield child
       
    1:     attr_names = ()
       
    2: class PtrDecl(Node):
    1:     __slots__ = ('quals', 'type', 'coord', '__weakref__')
    1:     def __init__(self, quals, type, coord=None):
  145:         self.quals = quals
  145:         self.type = type
  145:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.type is not None: nodelist.append(("type", self.type))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.type is not None:
                   yield self.type
       
    1:     attr_names = ('quals', )
       
    2: class Return(Node):
    1:     __slots__ = ('expr', 'coord', '__weakref__')
    1:     def __init__(self, expr, coord=None):
               self.expr = expr
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.expr is not None: nodelist.append(("expr", self.expr))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.expr is not None:
                   yield self.expr
       
    1:     attr_names = ()
       
    2: class Struct(Node):
    1:     __slots__ = ('name', 'decls', 'coord', '__weakref__')
    1:     def __init__(self, name, decls, coord=None):
    1:         self.name = name
    1:         self.decls = decls
    1:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.decls or []):
                   nodelist.append(("decls[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.decls or []):
                   yield child
       
    1:     attr_names = ('name', )
       
    2: class StructRef(Node):
    1:     __slots__ = ('name', 'type', 'field', 'coord', '__weakref__')
    1:     def __init__(self, name, type, field, coord=None):
               self.name = name
               self.type = type
               self.field = field
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.name is not None: nodelist.append(("name", self.name))
               if self.field is not None: nodelist.append(("field", self.field))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.name is not None:
                   yield self.name
               if self.field is not None:
                   yield self.field
       
    1:     attr_names = ('type', )
       
    2: class Switch(Node):
    1:     __slots__ = ('cond', 'stmt', 'coord', '__weakref__')
    1:     def __init__(self, cond, stmt, coord=None):
               self.cond = cond
               self.stmt = stmt
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.cond is not None: nodelist.append(("cond", self.cond))
               if self.stmt is not None: nodelist.append(("stmt", self.stmt))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.cond is not None:
                   yield self.cond
               if self.stmt is not None:
                   yield self.stmt
       
    1:     attr_names = ()
       
    2: class TernaryOp(Node):
    1:     __slots__ = ('cond', 'iftrue', 'iffalse', 'coord', '__weakref__')
    1:     def __init__(self, cond, iftrue, iffalse, coord=None):
               self.cond = cond
               self.iftrue = iftrue
               self.iffalse = iffalse
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.cond is not None: nodelist.append(("cond", self.cond))
               if self.iftrue is not None: nodelist.append(("iftrue", self.iftrue))
               if self.iffalse is not None: nodelist.append(("iffalse", self.iffalse))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.cond is not None:
                   yield self.cond
               if self.iftrue is not None:
                   yield self.iftrue
               if self.iffalse is not None:
                   yield self.iffalse
       
    1:     attr_names = ()
       
    2: class TypeDecl(Node):
    1:     __slots__ = ('declname', 'quals', 'type', 'coord', '__weakref__')
    1:     def __init__(self, declname, quals, type, coord=None):
  504:         self.declname = declname
  504:         self.quals = quals
  504:         self.type = type
  504:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.type is not None: nodelist.append(("type", self.type))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.type is not None:
                   yield self.type
       
    1:     attr_names = ('declname', 'quals', )
       
    2: class Typedef(Node):
    1:     __slots__ = ('name', 'quals', 'storage', 'type', 'coord', '__weakref__')
    1:     def __init__(self, name, quals, storage, type, coord=None):
   97:         self.name = name
   97:         self.quals = quals
   97:         self.storage = storage
   97:         self.type = type
   97:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.type is not None: nodelist.append(("type", self.type))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.type is not None:
                   yield self.type
       
    1:     attr_names = ('name', 'quals', 'storage', )
       
    2: class Typename(Node):
    1:     __slots__ = ('name', 'quals', 'type', 'coord', '__weakref__')
    1:     def __init__(self, name, quals, type, coord=None):
    5:         self.name = name
    5:         self.quals = quals
    5:         self.type = type
    5:         self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.type is not None: nodelist.append(("type", self.type))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.type is not None:
                   yield self.type
       
    1:     attr_names = ('name', 'quals', )
       
    2: class UnaryOp(Node):
    1:     __slots__ = ('op', 'expr', 'coord', '__weakref__')
    1:     def __init__(self, op, expr, coord=None):
               self.op = op
               self.expr = expr
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.expr is not None: nodelist.append(("expr", self.expr))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.expr is not None:
                   yield self.expr
       
    1:     attr_names = ('op', )
       
    2: class Union(Node):
    1:     __slots__ = ('name', 'decls', 'coord', '__weakref__')
    1:     def __init__(self, name, decls, coord=None):
               self.name = name
               self.decls = decls
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               for i, child in enumerate(self.decls or []):
                   nodelist.append(("decls[%d]" % i, child))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               for child in (self.decls or []):
                   yield child
       
    1:     attr_names = ('name', )
       
    2: class While(Node):
    1:     __slots__ = ('cond', 'stmt', 'coord', '__weakref__')
    1:     def __init__(self, cond, stmt, coord=None):
               self.cond = cond
               self.stmt = stmt
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               if self.cond is not None: nodelist.append(("cond", self.cond))
               if self.stmt is not None: nodelist.append(("stmt", self.stmt))
               return tuple(nodelist)
       
    1:     def __iter__(self):
               if self.cond is not None:
                   yield self.cond
               if self.stmt is not None:
                   yield self.stmt
       
    1:     attr_names = ()
       
    2: class Pragma(Node):
    1:     __slots__ = ('string', 'coord', '__weakref__')
    1:     def __init__(self, string, coord=None):
               self.string = string
               self.coord = coord
       
    1:     def children(self):
               nodelist = []
               return tuple(nodelist)
       
    1:     def __iter__(self):
               return
               yield
       
    1:     attr_names = ('string', )
       
