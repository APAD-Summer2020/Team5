       # -*- coding: utf-8 -*-
       """
           flask.signals
           ~~~~~~~~~~~~~
       
           Implements signals based on blinker if available, otherwise
           falls silently back to a noop.
       
           :copyright: 2010 Pallets
           :license: BSD-3-Clause
    1: """
    1: try:
    1:     from blinker import Namespace
       
           signals_available = True
    1: except ImportError:
    1:     signals_available = False
       
    2:     class Namespace(object):
    1:         def signal(self, name, doc=None):
   10:             return _FakeSignal(name, doc)
       
    2:     class _FakeSignal(object):
               """If blinker is unavailable, create a fake class with the same
               interface that allows sending of signals but will fail with an
               error on anything else.  Instead of doing anything on send, it
               will just ignore the arguments and do nothing instead.
    1:         """
       
    1:         def __init__(self, name, doc=None):
   10:             self.name = name
   10:             self.__doc__ = doc
       
    1:         def send(self, *args, **kwargs):
                   pass
       
    1:         def _fail(self, *args, **kwargs):
                   raise RuntimeError(
                       "Signalling support is unavailable because the blinker"
                       " library is not installed."
                   )
       
    1:         connect = connect_via = connected_to = temporarily_connected_to = _fail
    1:         disconnect = _fail
    1:         has_receivers_for = receivers_for = _fail
    1:         del _fail
       
       
       # The namespace for code signals.  If you are not Flask code, do
       # not put signals in here.  Create your own namespace instead.
    1: _signals = Namespace()
       
       
       # Core signals.  For usage examples grep the source code or consult
       # the API documentation in docs/api.rst as well as docs/signals.rst
    1: template_rendered = _signals.signal("template-rendered")
    1: before_render_template = _signals.signal("before-render-template")
    1: request_started = _signals.signal("request-started")
    1: request_finished = _signals.signal("request-finished")
    1: request_tearing_down = _signals.signal("request-tearing-down")
    1: got_request_exception = _signals.signal("got-request-exception")
    1: appcontext_tearing_down = _signals.signal("appcontext-tearing-down")
    1: appcontext_pushed = _signals.signal("appcontext-pushed")
    1: appcontext_popped = _signals.signal("appcontext-popped")
    1: message_flashed = _signals.signal("message-flashed")
