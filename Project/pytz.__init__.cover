       '''
       datetime.tzinfo timezone definitions generated from the
       Olson timezone database:
       
           ftp://elsie.nci.nih.gov/pub/tz*.tar.gz
       
       See the datetime section of the Python Library Reference for information
       on how to use these modules.
    1: '''
       
    1: import sys
    1: import datetime
    1: import os.path
       
    1: from pytz.exceptions import AmbiguousTimeError
    1: from pytz.exceptions import InvalidTimeError
    1: from pytz.exceptions import NonExistentTimeError
    1: from pytz.exceptions import UnknownTimeZoneError
    1: from pytz.lazy import LazyDict, LazyList, LazySet  # noqa
    1: from pytz.tzinfo import unpickler, BaseTzInfo
    1: from pytz.tzfile import build_tzinfo
       
       
       # The IANA (nee Olson) database is updated several times a year.
    1: OLSON_VERSION = '2019c'
    1: VERSION = '2019.3'  # pip compatible version number.
    1: __version__ = VERSION
       
    1: OLSEN_VERSION = OLSON_VERSION  # Old releases had this misspelling
       
       __all__ = [
    1:     'timezone', 'utc', 'country_timezones', 'country_names',
    1:     'AmbiguousTimeError', 'InvalidTimeError',
    1:     'NonExistentTimeError', 'UnknownTimeZoneError',
    1:     'all_timezones', 'all_timezones_set',
    1:     'common_timezones', 'common_timezones_set',
    1:     'BaseTzInfo',
       ]
       
       
    1: if sys.version_info[0] > 2:  # Python 3.x
       
           # Python 3.x doesn't have unicode(), making writing code
           # for Python 2.3 and Python 3.x a pain.
    1:     unicode = str
       
    1:     def ascii(s):
               r"""
               >>> ascii('Hello')
               'Hello'
               >>> ascii('\N{TRADE MARK SIGN}') #doctest: +IGNORE_EXCEPTION_DETAIL
               Traceback (most recent call last):
                   ...
               UnicodeEncodeError: ...
               """
               if type(s) == bytes:
                   s = s.decode('ASCII')
               else:
                   s.encode('ASCII')  # Raise an exception if not ASCII
               return s  # But the string - not a byte string.
       
       else:  # Python 2.x
       
           def ascii(s):
               r"""
               >>> ascii('Hello')
               'Hello'
               >>> ascii(u'Hello')
               'Hello'
               >>> ascii(u'\N{TRADE MARK SIGN}') #doctest: +IGNORE_EXCEPTION_DETAIL
               Traceback (most recent call last):
                   ...
               UnicodeEncodeError: ...
               """
               return s.encode('ASCII')
       
       
    1: def open_resource(name):
           """Open a resource from the zoneinfo subdir for reading.
       
           Uses the pkg_resources module if available and no standard file
           found at the calculated location.
       
           It is possible to specify different location for zoneinfo
           subdir by using the PYTZ_TZDATADIR environment variable.
           """
           name_parts = name.lstrip('/').split('/')
           for part in name_parts:
               if part == os.path.pardir or os.path.sep in part:
                   raise ValueError('Bad path segment: %r' % part)
           zoneinfo_dir = os.environ.get('PYTZ_TZDATADIR', None)
           if zoneinfo_dir is not None:
               filename = os.path.join(zoneinfo_dir, *name_parts)
           else:
               filename = os.path.join(os.path.dirname(__file__),
                                       'zoneinfo', *name_parts)
               if not os.path.exists(filename):
                   # http://bugs.launchpad.net/bugs/383171 - we avoid using this
                   # unless absolutely necessary to help when a broken version of
                   # pkg_resources is installed.
                   try:
                       from pkg_resources import resource_stream
                   except ImportError:
                       resource_stream = None
       
                   if resource_stream is not None:
                       return resource_stream(__name__, 'zoneinfo/' + name)
           return open(filename, 'rb')
       
       
    1: def resource_exists(name):
           """Return true if the given resource exists"""
           try:
               open_resource(name).close()
               return True
           except IOError:
               return False
       
       
    1: _tzinfo_cache = {}
       
       
    1: def timezone(zone):
           r''' Return a datetime.tzinfo implementation for the given timezone
       
           >>> from datetime import datetime, timedelta
           >>> utc = timezone('UTC')
           >>> eastern = timezone('US/Eastern')
           >>> eastern.zone
           'US/Eastern'
           >>> timezone(unicode('US/Eastern')) is eastern
           True
           >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
           >>> loc_dt = utc_dt.astimezone(eastern)
           >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
           >>> loc_dt.strftime(fmt)
           '2002-10-27 01:00:00 EST (-0500)'
           >>> (loc_dt - timedelta(minutes=10)).strftime(fmt)
           '2002-10-27 00:50:00 EST (-0500)'
           >>> eastern.normalize(loc_dt - timedelta(minutes=10)).strftime(fmt)
           '2002-10-27 01:50:00 EDT (-0400)'
           >>> (loc_dt + timedelta(minutes=10)).strftime(fmt)
           '2002-10-27 01:10:00 EST (-0500)'
       
           Raises UnknownTimeZoneError if passed an unknown zone.
       
           >>> try:
           ...     timezone('Asia/Shangri-La')
           ... except UnknownTimeZoneError:
           ...     print('Unknown')
           Unknown
       
           >>> try:
           ...     timezone(unicode('\N{TRADE MARK SIGN}'))
           ... except UnknownTimeZoneError:
           ...     print('Unknown')
           Unknown
       
           '''
           if zone is None:
               raise UnknownTimeZoneError(None)
       
           if zone.upper() == 'UTC':
               return utc
       
           try:
               zone = ascii(zone)
           except UnicodeEncodeError:
               # All valid timezones are ASCII
               raise UnknownTimeZoneError(zone)
       
           zone = _case_insensitive_zone_lookup(_unmunge_zone(zone))
           if zone not in _tzinfo_cache:
               if zone in all_timezones_set:  # noqa
                   fp = open_resource(zone)
                   try:
                       _tzinfo_cache[zone] = build_tzinfo(zone, fp)
                   finally:
                       fp.close()
               else:
                   raise UnknownTimeZoneError(zone)
       
           return _tzinfo_cache[zone]
       
       
    1: def _unmunge_zone(zone):
           """Undo the time zone name munging done by older versions of pytz."""
           return zone.replace('_plus_', '+').replace('_minus_', '-')
       
       
    1: _all_timezones_lower_to_standard = None
       
       
    1: def _case_insensitive_zone_lookup(zone):
           """case-insensitively matching timezone, else return zone unchanged"""
           global _all_timezones_lower_to_standard
           if _all_timezones_lower_to_standard is None:
               _all_timezones_lower_to_standard = dict((tz.lower(), tz) for tz in all_timezones)  # noqa
           return _all_timezones_lower_to_standard.get(zone.lower()) or zone  # noqa
       
       
    1: ZERO = datetime.timedelta(0)
    1: HOUR = datetime.timedelta(hours=1)
       
       
    2: class UTC(BaseTzInfo):
           """UTC
       
           Optimized UTC implementation. It unpickles using the single module global
           instance defined beneath this class declaration.
    1:     """
    1:     zone = "UTC"
       
    1:     _utcoffset = ZERO
    1:     _dst = ZERO
    1:     _tzname = zone
       
    1:     def fromutc(self, dt):
               if dt.tzinfo is None:
                   return self.localize(dt)
               return super(utc.__class__, self).fromutc(dt)
       
    1:     def utcoffset(self, dt):
               return ZERO
       
    1:     def tzname(self, dt):
               return "UTC"
       
    1:     def dst(self, dt):
               return ZERO
       
    1:     def __reduce__(self):
               return _UTC, ()
       
    1:     def localize(self, dt, is_dst=False):
               '''Convert naive time to local time'''
               if dt.tzinfo is not None:
                   raise ValueError('Not naive datetime (tzinfo is already set)')
               return dt.replace(tzinfo=self)
       
    1:     def normalize(self, dt, is_dst=False):
               '''Correct the timezone information on the given datetime'''
               if dt.tzinfo is self:
                   return dt
               if dt.tzinfo is None:
                   raise ValueError('Naive time - no tzinfo set')
               return dt.astimezone(self)
       
    1:     def __repr__(self):
               return "<UTC>"
       
    1:     def __str__(self):
               return "UTC"
       
       
    1: UTC = utc = UTC()  # UTC is a singleton
       
       
    1: def _UTC():
           """Factory function for utc unpickling.
       
           Makes sure that unpickling a utc instance always returns the same
           module global.
       
           These examples belong in the UTC class above, but it is obscured; or in
           the README.txt, but we are not depending on Python 2.4 so integrating
           the README.txt examples with the unit tests is not trivial.
       
           >>> import datetime, pickle
           >>> dt = datetime.datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)
           >>> naive = dt.replace(tzinfo=None)
           >>> p = pickle.dumps(dt, 1)
           >>> naive_p = pickle.dumps(naive, 1)
           >>> len(p) - len(naive_p)
           17
           >>> new = pickle.loads(p)
           >>> new == dt
           True
           >>> new is dt
           False
           >>> new.tzinfo is dt.tzinfo
           True
           >>> utc is UTC is timezone('UTC')
           True
           >>> utc is timezone('GMT')
           False
           """
           return utc
       
       
    1: _UTC.__safe_for_unpickling__ = True
       
       
    1: def _p(*args):
           """Factory function for unpickling pytz tzinfo instances.
       
           Just a wrapper around tzinfo.unpickler to save a few bytes in each pickle
           by shortening the path.
           """
           return unpickler(*args)
       
       
    1: _p.__safe_for_unpickling__ = True
       
       
    2: class _CountryTimezoneDict(LazyDict):
           """Map ISO 3166 country code to a list of timezone names commonly used
           in that country.
       
           iso3166_code is the two letter code used to identify the country.
       
           >>> def print_list(list_of_strings):
           ...     'We use a helper so doctests work under Python 2.3 -> 3.x'
           ...     for s in list_of_strings:
           ...         print(s)
       
           >>> print_list(country_timezones['nz'])
           Pacific/Auckland
           Pacific/Chatham
           >>> print_list(country_timezones['ch'])
           Europe/Zurich
           >>> print_list(country_timezones['CH'])
           Europe/Zurich
           >>> print_list(country_timezones[unicode('ch')])
           Europe/Zurich
           >>> print_list(country_timezones['XXX'])
           Traceback (most recent call last):
           ...
           KeyError: 'XXX'
       
           Previously, this information was exposed as a function rather than a
           dictionary. This is still supported::
       
           >>> print_list(country_timezones('nz'))
           Pacific/Auckland
           Pacific/Chatham
    1:     """
    1:     def __call__(self, iso3166_code):
               """Backwards compatibility."""
               return self[iso3166_code]
       
    1:     def _fill(self):
               data = {}
               zone_tab = open_resource('zone.tab')
               try:
                   for line in zone_tab:
                       line = line.decode('UTF-8')
                       if line.startswith('#'):
                           continue
                       code, coordinates, zone = line.split(None, 4)[:3]
                       if zone not in all_timezones_set:  # noqa
                           continue
                       try:
                           data[code].append(zone)
                       except KeyError:
                           data[code] = [zone]
                   self.data = data
               finally:
                   zone_tab.close()
       
       
    1: country_timezones = _CountryTimezoneDict()
       
       
    2: class _CountryNameDict(LazyDict):
           '''Dictionary proving ISO3166 code -> English name.
       
           >>> print(country_names['au'])
           Australia
    1:     '''
    1:     def _fill(self):
               data = {}
               zone_tab = open_resource('iso3166.tab')
               try:
                   for line in zone_tab.readlines():
                       line = line.decode('UTF-8')
                       if line.startswith('#'):
                           continue
                       code, name = line.split(None, 1)
                       data[code] = name.strip()
                   self.data = data
               finally:
                   zone_tab.close()
       
       
    1: country_names = _CountryNameDict()
       
       
       # Time-zone info based solely on fixed offsets
       
    2: class _FixedOffset(datetime.tzinfo):
       
    1:     zone = None  # to match the standard pytz API
       
    1:     def __init__(self, minutes):
               if abs(minutes) >= 1440:
                   raise ValueError("absolute offset is too large", minutes)
               self._minutes = minutes
               self._offset = datetime.timedelta(minutes=minutes)
       
    1:     def utcoffset(self, dt):
               return self._offset
       
    1:     def __reduce__(self):
               return FixedOffset, (self._minutes, )
       
    1:     def dst(self, dt):
               return ZERO
       
    1:     def tzname(self, dt):
               return None
       
    1:     def __repr__(self):
               return 'pytz.FixedOffset(%d)' % self._minutes
       
    1:     def localize(self, dt, is_dst=False):
               '''Convert naive time to local time'''
               if dt.tzinfo is not None:
                   raise ValueError('Not naive datetime (tzinfo is already set)')
               return dt.replace(tzinfo=self)
       
    1:     def normalize(self, dt, is_dst=False):
               '''Correct the timezone information on the given datetime'''
               if dt.tzinfo is self:
                   return dt
               if dt.tzinfo is None:
                   raise ValueError('Naive time - no tzinfo set')
               return dt.astimezone(self)
       
       
    1: def FixedOffset(offset, _tzinfos={}):
           """return a fixed-offset timezone based off a number of minutes.
       
               >>> one = FixedOffset(-330)
               >>> one
               pytz.FixedOffset(-330)
               >>> str(one.utcoffset(datetime.datetime.now()))
               '-1 day, 18:30:00'
               >>> str(one.dst(datetime.datetime.now()))
               '0:00:00'
       
               >>> two = FixedOffset(1380)
               >>> two
               pytz.FixedOffset(1380)
               >>> str(two.utcoffset(datetime.datetime.now()))
               '23:00:00'
               >>> str(two.dst(datetime.datetime.now()))
               '0:00:00'
       
           The datetime.timedelta must be between the range of -1 and 1 day,
           non-inclusive.
       
               >>> FixedOffset(1440)
               Traceback (most recent call last):
               ...
               ValueError: ('absolute offset is too large', 1440)
       
               >>> FixedOffset(-1440)
               Traceback (most recent call last):
               ...
               ValueError: ('absolute offset is too large', -1440)
       
           An offset of 0 is special-cased to return UTC.
       
               >>> FixedOffset(0) is UTC
               True
       
           There should always be only one instance of a FixedOffset per timedelta.
           This should be true for multiple creation calls.
       
               >>> FixedOffset(-330) is one
               True
               >>> FixedOffset(1380) is two
               True
       
           It should also be true for pickling.
       
               >>> import pickle
               >>> pickle.loads(pickle.dumps(one)) is one
               True
               >>> pickle.loads(pickle.dumps(two)) is two
               True
           """
           if offset == 0:
               return UTC
       
           info = _tzinfos.get(offset)
           if info is None:
               # We haven't seen this one before. we need to save it.
       
               # Use setdefault to avoid a race condition and make sure we have
               # only one
               info = _tzinfos.setdefault(offset, _FixedOffset(offset))
       
           return info
       
       
    1: FixedOffset.__safe_for_unpickling__ = True
       
       
    1: def _test():
           import doctest
           sys.path.insert(0, os.pardir)
           import pytz
           return doctest.testmod(pytz)
       
       
    1: if __name__ == '__main__':
           _test()
       all_timezones = \
    1: ['Africa/Abidjan',
    1:  'Africa/Accra',
    1:  'Africa/Addis_Ababa',
    1:  'Africa/Algiers',
    1:  'Africa/Asmara',
    1:  'Africa/Asmera',
    1:  'Africa/Bamako',
    1:  'Africa/Bangui',
    1:  'Africa/Banjul',
    1:  'Africa/Bissau',
    1:  'Africa/Blantyre',
    1:  'Africa/Brazzaville',
    1:  'Africa/Bujumbura',
    1:  'Africa/Cairo',
    1:  'Africa/Casablanca',
    1:  'Africa/Ceuta',
    1:  'Africa/Conakry',
    1:  'Africa/Dakar',
    1:  'Africa/Dar_es_Salaam',
    1:  'Africa/Djibouti',
    1:  'Africa/Douala',
    1:  'Africa/El_Aaiun',
    1:  'Africa/Freetown',
    1:  'Africa/Gaborone',
    1:  'Africa/Harare',
    1:  'Africa/Johannesburg',
    1:  'Africa/Juba',
    1:  'Africa/Kampala',
    1:  'Africa/Khartoum',
    1:  'Africa/Kigali',
    1:  'Africa/Kinshasa',
    1:  'Africa/Lagos',
    1:  'Africa/Libreville',
    1:  'Africa/Lome',
    1:  'Africa/Luanda',
    1:  'Africa/Lubumbashi',
    1:  'Africa/Lusaka',
    1:  'Africa/Malabo',
    1:  'Africa/Maputo',
    1:  'Africa/Maseru',
    1:  'Africa/Mbabane',
    1:  'Africa/Mogadishu',
    1:  'Africa/Monrovia',
    1:  'Africa/Nairobi',
    1:  'Africa/Ndjamena',
    1:  'Africa/Niamey',
    1:  'Africa/Nouakchott',
    1:  'Africa/Ouagadougou',
    1:  'Africa/Porto-Novo',
    1:  'Africa/Sao_Tome',
    1:  'Africa/Timbuktu',
    1:  'Africa/Tripoli',
    1:  'Africa/Tunis',
    1:  'Africa/Windhoek',
    1:  'America/Adak',
    1:  'America/Anchorage',
    1:  'America/Anguilla',
    1:  'America/Antigua',
    1:  'America/Araguaina',
    1:  'America/Argentina/Buenos_Aires',
    1:  'America/Argentina/Catamarca',
    1:  'America/Argentina/ComodRivadavia',
    1:  'America/Argentina/Cordoba',
    1:  'America/Argentina/Jujuy',
    1:  'America/Argentina/La_Rioja',
    1:  'America/Argentina/Mendoza',
    1:  'America/Argentina/Rio_Gallegos',
    1:  'America/Argentina/Salta',
    1:  'America/Argentina/San_Juan',
    1:  'America/Argentina/San_Luis',
    1:  'America/Argentina/Tucuman',
    1:  'America/Argentina/Ushuaia',
    1:  'America/Aruba',
    1:  'America/Asuncion',
    1:  'America/Atikokan',
    1:  'America/Atka',
    1:  'America/Bahia',
    1:  'America/Bahia_Banderas',
    1:  'America/Barbados',
    1:  'America/Belem',
    1:  'America/Belize',
    1:  'America/Blanc-Sablon',
    1:  'America/Boa_Vista',
    1:  'America/Bogota',
    1:  'America/Boise',
    1:  'America/Buenos_Aires',
    1:  'America/Cambridge_Bay',
    1:  'America/Campo_Grande',
    1:  'America/Cancun',
    1:  'America/Caracas',
    1:  'America/Catamarca',
    1:  'America/Cayenne',
    1:  'America/Cayman',
    1:  'America/Chicago',
    1:  'America/Chihuahua',
    1:  'America/Coral_Harbour',
    1:  'America/Cordoba',
    1:  'America/Costa_Rica',
    1:  'America/Creston',
    1:  'America/Cuiaba',
    1:  'America/Curacao',
    1:  'America/Danmarkshavn',
    1:  'America/Dawson',
    1:  'America/Dawson_Creek',
    1:  'America/Denver',
    1:  'America/Detroit',
    1:  'America/Dominica',
    1:  'America/Edmonton',
    1:  'America/Eirunepe',
    1:  'America/El_Salvador',
    1:  'America/Ensenada',
    1:  'America/Fort_Nelson',
    1:  'America/Fort_Wayne',
    1:  'America/Fortaleza',
    1:  'America/Glace_Bay',
    1:  'America/Godthab',
    1:  'America/Goose_Bay',
    1:  'America/Grand_Turk',
    1:  'America/Grenada',
    1:  'America/Guadeloupe',
    1:  'America/Guatemala',
    1:  'America/Guayaquil',
    1:  'America/Guyana',
    1:  'America/Halifax',
    1:  'America/Havana',
    1:  'America/Hermosillo',
    1:  'America/Indiana/Indianapolis',
    1:  'America/Indiana/Knox',
    1:  'America/Indiana/Marengo',
    1:  'America/Indiana/Petersburg',
    1:  'America/Indiana/Tell_City',
    1:  'America/Indiana/Vevay',
    1:  'America/Indiana/Vincennes',
    1:  'America/Indiana/Winamac',
    1:  'America/Indianapolis',
    1:  'America/Inuvik',
    1:  'America/Iqaluit',
    1:  'America/Jamaica',
    1:  'America/Jujuy',
    1:  'America/Juneau',
    1:  'America/Kentucky/Louisville',
    1:  'America/Kentucky/Monticello',
    1:  'America/Knox_IN',
    1:  'America/Kralendijk',
    1:  'America/La_Paz',
    1:  'America/Lima',
    1:  'America/Los_Angeles',
    1:  'America/Louisville',
    1:  'America/Lower_Princes',
    1:  'America/Maceio',
    1:  'America/Managua',
    1:  'America/Manaus',
    1:  'America/Marigot',
    1:  'America/Martinique',
    1:  'America/Matamoros',
    1:  'America/Mazatlan',
    1:  'America/Mendoza',
    1:  'America/Menominee',
    1:  'America/Merida',
    1:  'America/Metlakatla',
    1:  'America/Mexico_City',
    1:  'America/Miquelon',
    1:  'America/Moncton',
    1:  'America/Monterrey',
    1:  'America/Montevideo',
    1:  'America/Montreal',
    1:  'America/Montserrat',
    1:  'America/Nassau',
    1:  'America/New_York',
    1:  'America/Nipigon',
    1:  'America/Nome',
    1:  'America/Noronha',
    1:  'America/North_Dakota/Beulah',
    1:  'America/North_Dakota/Center',
    1:  'America/North_Dakota/New_Salem',
    1:  'America/Ojinaga',
    1:  'America/Panama',
    1:  'America/Pangnirtung',
    1:  'America/Paramaribo',
    1:  'America/Phoenix',
    1:  'America/Port-au-Prince',
    1:  'America/Port_of_Spain',
    1:  'America/Porto_Acre',
    1:  'America/Porto_Velho',
    1:  'America/Puerto_Rico',
    1:  'America/Punta_Arenas',
    1:  'America/Rainy_River',
    1:  'America/Rankin_Inlet',
    1:  'America/Recife',
    1:  'America/Regina',
    1:  'America/Resolute',
    1:  'America/Rio_Branco',
    1:  'America/Rosario',
    1:  'America/Santa_Isabel',
    1:  'America/Santarem',
    1:  'America/Santiago',
    1:  'America/Santo_Domingo',
    1:  'America/Sao_Paulo',
    1:  'America/Scoresbysund',
    1:  'America/Shiprock',
    1:  'America/Sitka',
    1:  'America/St_Barthelemy',
    1:  'America/St_Johns',
    1:  'America/St_Kitts',
    1:  'America/St_Lucia',
    1:  'America/St_Thomas',
    1:  'America/St_Vincent',
    1:  'America/Swift_Current',
    1:  'America/Tegucigalpa',
    1:  'America/Thule',
    1:  'America/Thunder_Bay',
    1:  'America/Tijuana',
    1:  'America/Toronto',
    1:  'America/Tortola',
    1:  'America/Vancouver',
    1:  'America/Virgin',
    1:  'America/Whitehorse',
    1:  'America/Winnipeg',
    1:  'America/Yakutat',
    1:  'America/Yellowknife',
    1:  'Antarctica/Casey',
    1:  'Antarctica/Davis',
    1:  'Antarctica/DumontDUrville',
    1:  'Antarctica/Macquarie',
    1:  'Antarctica/Mawson',
    1:  'Antarctica/McMurdo',
    1:  'Antarctica/Palmer',
    1:  'Antarctica/Rothera',
    1:  'Antarctica/South_Pole',
    1:  'Antarctica/Syowa',
    1:  'Antarctica/Troll',
    1:  'Antarctica/Vostok',
    1:  'Arctic/Longyearbyen',
    1:  'Asia/Aden',
    1:  'Asia/Almaty',
    1:  'Asia/Amman',
    1:  'Asia/Anadyr',
    1:  'Asia/Aqtau',
    1:  'Asia/Aqtobe',
    1:  'Asia/Ashgabat',
    1:  'Asia/Ashkhabad',
    1:  'Asia/Atyrau',
    1:  'Asia/Baghdad',
    1:  'Asia/Bahrain',
    1:  'Asia/Baku',
    1:  'Asia/Bangkok',
    1:  'Asia/Barnaul',
    1:  'Asia/Beirut',
    1:  'Asia/Bishkek',
    1:  'Asia/Brunei',
    1:  'Asia/Calcutta',
    1:  'Asia/Chita',
    1:  'Asia/Choibalsan',
    1:  'Asia/Chongqing',
    1:  'Asia/Chungking',
    1:  'Asia/Colombo',
    1:  'Asia/Dacca',
    1:  'Asia/Damascus',
    1:  'Asia/Dhaka',
    1:  'Asia/Dili',
    1:  'Asia/Dubai',
    1:  'Asia/Dushanbe',
    1:  'Asia/Famagusta',
    1:  'Asia/Gaza',
    1:  'Asia/Harbin',
    1:  'Asia/Hebron',
    1:  'Asia/Ho_Chi_Minh',
    1:  'Asia/Hong_Kong',
    1:  'Asia/Hovd',
    1:  'Asia/Irkutsk',
    1:  'Asia/Istanbul',
    1:  'Asia/Jakarta',
    1:  'Asia/Jayapura',
    1:  'Asia/Jerusalem',
    1:  'Asia/Kabul',
    1:  'Asia/Kamchatka',
    1:  'Asia/Karachi',
    1:  'Asia/Kashgar',
    1:  'Asia/Kathmandu',
    1:  'Asia/Katmandu',
    1:  'Asia/Khandyga',
    1:  'Asia/Kolkata',
    1:  'Asia/Krasnoyarsk',
    1:  'Asia/Kuala_Lumpur',
    1:  'Asia/Kuching',
    1:  'Asia/Kuwait',
    1:  'Asia/Macao',
    1:  'Asia/Macau',
    1:  'Asia/Magadan',
    1:  'Asia/Makassar',
    1:  'Asia/Manila',
    1:  'Asia/Muscat',
    1:  'Asia/Nicosia',
    1:  'Asia/Novokuznetsk',
    1:  'Asia/Novosibirsk',
    1:  'Asia/Omsk',
    1:  'Asia/Oral',
    1:  'Asia/Phnom_Penh',
    1:  'Asia/Pontianak',
    1:  'Asia/Pyongyang',
    1:  'Asia/Qatar',
    1:  'Asia/Qostanay',
    1:  'Asia/Qyzylorda',
    1:  'Asia/Rangoon',
    1:  'Asia/Riyadh',
    1:  'Asia/Saigon',
    1:  'Asia/Sakhalin',
    1:  'Asia/Samarkand',
    1:  'Asia/Seoul',
    1:  'Asia/Shanghai',
    1:  'Asia/Singapore',
    1:  'Asia/Srednekolymsk',
    1:  'Asia/Taipei',
    1:  'Asia/Tashkent',
    1:  'Asia/Tbilisi',
    1:  'Asia/Tehran',
    1:  'Asia/Tel_Aviv',
    1:  'Asia/Thimbu',
    1:  'Asia/Thimphu',
    1:  'Asia/Tokyo',
    1:  'Asia/Tomsk',
    1:  'Asia/Ujung_Pandang',
    1:  'Asia/Ulaanbaatar',
    1:  'Asia/Ulan_Bator',
    1:  'Asia/Urumqi',
    1:  'Asia/Ust-Nera',
    1:  'Asia/Vientiane',
    1:  'Asia/Vladivostok',
    1:  'Asia/Yakutsk',
    1:  'Asia/Yangon',
    1:  'Asia/Yekaterinburg',
    1:  'Asia/Yerevan',
    1:  'Atlantic/Azores',
    1:  'Atlantic/Bermuda',
    1:  'Atlantic/Canary',
    1:  'Atlantic/Cape_Verde',
    1:  'Atlantic/Faeroe',
    1:  'Atlantic/Faroe',
    1:  'Atlantic/Jan_Mayen',
    1:  'Atlantic/Madeira',
    1:  'Atlantic/Reykjavik',
    1:  'Atlantic/South_Georgia',
    1:  'Atlantic/St_Helena',
    1:  'Atlantic/Stanley',
    1:  'Australia/ACT',
    1:  'Australia/Adelaide',
    1:  'Australia/Brisbane',
    1:  'Australia/Broken_Hill',
    1:  'Australia/Canberra',
    1:  'Australia/Currie',
    1:  'Australia/Darwin',
    1:  'Australia/Eucla',
    1:  'Australia/Hobart',
    1:  'Australia/LHI',
    1:  'Australia/Lindeman',
    1:  'Australia/Lord_Howe',
    1:  'Australia/Melbourne',
    1:  'Australia/NSW',
    1:  'Australia/North',
    1:  'Australia/Perth',
    1:  'Australia/Queensland',
    1:  'Australia/South',
    1:  'Australia/Sydney',
    1:  'Australia/Tasmania',
    1:  'Australia/Victoria',
    1:  'Australia/West',
    1:  'Australia/Yancowinna',
    1:  'Brazil/Acre',
    1:  'Brazil/DeNoronha',
    1:  'Brazil/East',
    1:  'Brazil/West',
    1:  'CET',
    1:  'CST6CDT',
    1:  'Canada/Atlantic',
    1:  'Canada/Central',
    1:  'Canada/Eastern',
    1:  'Canada/Mountain',
    1:  'Canada/Newfoundland',
    1:  'Canada/Pacific',
    1:  'Canada/Saskatchewan',
    1:  'Canada/Yukon',
    1:  'Chile/Continental',
    1:  'Chile/EasterIsland',
    1:  'Cuba',
    1:  'EET',
    1:  'EST',
    1:  'EST5EDT',
    1:  'Egypt',
    1:  'Eire',
    1:  'Etc/GMT',
    1:  'Etc/GMT+0',
    1:  'Etc/GMT+1',
    1:  'Etc/GMT+10',
    1:  'Etc/GMT+11',
    1:  'Etc/GMT+12',
    1:  'Etc/GMT+2',
    1:  'Etc/GMT+3',
    1:  'Etc/GMT+4',
    1:  'Etc/GMT+5',
    1:  'Etc/GMT+6',
    1:  'Etc/GMT+7',
    1:  'Etc/GMT+8',
    1:  'Etc/GMT+9',
    1:  'Etc/GMT-0',
    1:  'Etc/GMT-1',
    1:  'Etc/GMT-10',
    1:  'Etc/GMT-11',
    1:  'Etc/GMT-12',
    1:  'Etc/GMT-13',
    1:  'Etc/GMT-14',
    1:  'Etc/GMT-2',
    1:  'Etc/GMT-3',
    1:  'Etc/GMT-4',
    1:  'Etc/GMT-5',
    1:  'Etc/GMT-6',
    1:  'Etc/GMT-7',
    1:  'Etc/GMT-8',
    1:  'Etc/GMT-9',
    1:  'Etc/GMT0',
    1:  'Etc/Greenwich',
    1:  'Etc/UCT',
    1:  'Etc/UTC',
    1:  'Etc/Universal',
    1:  'Etc/Zulu',
    1:  'Europe/Amsterdam',
    1:  'Europe/Andorra',
    1:  'Europe/Astrakhan',
    1:  'Europe/Athens',
    1:  'Europe/Belfast',
    1:  'Europe/Belgrade',
    1:  'Europe/Berlin',
    1:  'Europe/Bratislava',
    1:  'Europe/Brussels',
    1:  'Europe/Bucharest',
    1:  'Europe/Budapest',
    1:  'Europe/Busingen',
    1:  'Europe/Chisinau',
    1:  'Europe/Copenhagen',
    1:  'Europe/Dublin',
    1:  'Europe/Gibraltar',
    1:  'Europe/Guernsey',
    1:  'Europe/Helsinki',
    1:  'Europe/Isle_of_Man',
    1:  'Europe/Istanbul',
    1:  'Europe/Jersey',
    1:  'Europe/Kaliningrad',
    1:  'Europe/Kiev',
    1:  'Europe/Kirov',
    1:  'Europe/Lisbon',
    1:  'Europe/Ljubljana',
    1:  'Europe/London',
    1:  'Europe/Luxembourg',
    1:  'Europe/Madrid',
    1:  'Europe/Malta',
    1:  'Europe/Mariehamn',
    1:  'Europe/Minsk',
    1:  'Europe/Monaco',
    1:  'Europe/Moscow',
    1:  'Europe/Nicosia',
    1:  'Europe/Oslo',
    1:  'Europe/Paris',
    1:  'Europe/Podgorica',
    1:  'Europe/Prague',
    1:  'Europe/Riga',
    1:  'Europe/Rome',
    1:  'Europe/Samara',
    1:  'Europe/San_Marino',
    1:  'Europe/Sarajevo',
    1:  'Europe/Saratov',
    1:  'Europe/Simferopol',
    1:  'Europe/Skopje',
    1:  'Europe/Sofia',
    1:  'Europe/Stockholm',
    1:  'Europe/Tallinn',
    1:  'Europe/Tirane',
    1:  'Europe/Tiraspol',
    1:  'Europe/Ulyanovsk',
    1:  'Europe/Uzhgorod',
    1:  'Europe/Vaduz',
    1:  'Europe/Vatican',
    1:  'Europe/Vienna',
    1:  'Europe/Vilnius',
    1:  'Europe/Volgograd',
    1:  'Europe/Warsaw',
    1:  'Europe/Zagreb',
    1:  'Europe/Zaporozhye',
    1:  'Europe/Zurich',
    1:  'GB',
    1:  'GB-Eire',
    1:  'GMT',
    1:  'GMT+0',
    1:  'GMT-0',
    1:  'GMT0',
    1:  'Greenwich',
    1:  'HST',
    1:  'Hongkong',
    1:  'Iceland',
    1:  'Indian/Antananarivo',
    1:  'Indian/Chagos',
    1:  'Indian/Christmas',
    1:  'Indian/Cocos',
    1:  'Indian/Comoro',
    1:  'Indian/Kerguelen',
    1:  'Indian/Mahe',
    1:  'Indian/Maldives',
    1:  'Indian/Mauritius',
    1:  'Indian/Mayotte',
    1:  'Indian/Reunion',
    1:  'Iran',
    1:  'Israel',
    1:  'Jamaica',
    1:  'Japan',
    1:  'Kwajalein',
    1:  'Libya',
    1:  'MET',
    1:  'MST',
    1:  'MST7MDT',
    1:  'Mexico/BajaNorte',
    1:  'Mexico/BajaSur',
    1:  'Mexico/General',
    1:  'NZ',
    1:  'NZ-CHAT',
    1:  'Navajo',
    1:  'PRC',
    1:  'PST8PDT',
    1:  'Pacific/Apia',
    1:  'Pacific/Auckland',
    1:  'Pacific/Bougainville',
    1:  'Pacific/Chatham',
    1:  'Pacific/Chuuk',
    1:  'Pacific/Easter',
    1:  'Pacific/Efate',
    1:  'Pacific/Enderbury',
    1:  'Pacific/Fakaofo',
    1:  'Pacific/Fiji',
    1:  'Pacific/Funafuti',
    1:  'Pacific/Galapagos',
    1:  'Pacific/Gambier',
    1:  'Pacific/Guadalcanal',
    1:  'Pacific/Guam',
    1:  'Pacific/Honolulu',
    1:  'Pacific/Johnston',
    1:  'Pacific/Kiritimati',
    1:  'Pacific/Kosrae',
    1:  'Pacific/Kwajalein',
    1:  'Pacific/Majuro',
    1:  'Pacific/Marquesas',
    1:  'Pacific/Midway',
    1:  'Pacific/Nauru',
    1:  'Pacific/Niue',
    1:  'Pacific/Norfolk',
    1:  'Pacific/Noumea',
    1:  'Pacific/Pago_Pago',
    1:  'Pacific/Palau',
    1:  'Pacific/Pitcairn',
    1:  'Pacific/Pohnpei',
    1:  'Pacific/Ponape',
    1:  'Pacific/Port_Moresby',
    1:  'Pacific/Rarotonga',
    1:  'Pacific/Saipan',
    1:  'Pacific/Samoa',
    1:  'Pacific/Tahiti',
    1:  'Pacific/Tarawa',
    1:  'Pacific/Tongatapu',
    1:  'Pacific/Truk',
    1:  'Pacific/Wake',
    1:  'Pacific/Wallis',
    1:  'Pacific/Yap',
    1:  'Poland',
    1:  'Portugal',
    1:  'ROC',
    1:  'ROK',
    1:  'Singapore',
    1:  'Turkey',
    1:  'UCT',
    1:  'US/Alaska',
    1:  'US/Aleutian',
    1:  'US/Arizona',
    1:  'US/Central',
    1:  'US/East-Indiana',
    1:  'US/Eastern',
    1:  'US/Hawaii',
    1:  'US/Indiana-Starke',
    1:  'US/Michigan',
    1:  'US/Mountain',
    1:  'US/Pacific',
    1:  'US/Samoa',
    1:  'UTC',
    1:  'Universal',
    1:  'W-SU',
    1:  'WET',
    1:  'Zulu']
    1: all_timezones = LazyList(
    1:         tz for tz in all_timezones if resource_exists(tz))
               
    1: all_timezones_set = LazySet(all_timezones)
       common_timezones = \
    1: ['Africa/Abidjan',
    1:  'Africa/Accra',
    1:  'Africa/Addis_Ababa',
    1:  'Africa/Algiers',
    1:  'Africa/Asmara',
    1:  'Africa/Bamako',
    1:  'Africa/Bangui',
    1:  'Africa/Banjul',
    1:  'Africa/Bissau',
    1:  'Africa/Blantyre',
    1:  'Africa/Brazzaville',
    1:  'Africa/Bujumbura',
    1:  'Africa/Cairo',
    1:  'Africa/Casablanca',
    1:  'Africa/Ceuta',
    1:  'Africa/Conakry',
    1:  'Africa/Dakar',
    1:  'Africa/Dar_es_Salaam',
    1:  'Africa/Djibouti',
    1:  'Africa/Douala',
    1:  'Africa/El_Aaiun',
    1:  'Africa/Freetown',
    1:  'Africa/Gaborone',
    1:  'Africa/Harare',
    1:  'Africa/Johannesburg',
    1:  'Africa/Juba',
    1:  'Africa/Kampala',
    1:  'Africa/Khartoum',
    1:  'Africa/Kigali',
    1:  'Africa/Kinshasa',
    1:  'Africa/Lagos',
    1:  'Africa/Libreville',
    1:  'Africa/Lome',
    1:  'Africa/Luanda',
    1:  'Africa/Lubumbashi',
    1:  'Africa/Lusaka',
    1:  'Africa/Malabo',
    1:  'Africa/Maputo',
    1:  'Africa/Maseru',
    1:  'Africa/Mbabane',
    1:  'Africa/Mogadishu',
    1:  'Africa/Monrovia',
    1:  'Africa/Nairobi',
    1:  'Africa/Ndjamena',
    1:  'Africa/Niamey',
    1:  'Africa/Nouakchott',
    1:  'Africa/Ouagadougou',
    1:  'Africa/Porto-Novo',
    1:  'Africa/Sao_Tome',
    1:  'Africa/Tripoli',
    1:  'Africa/Tunis',
    1:  'Africa/Windhoek',
    1:  'America/Adak',
    1:  'America/Anchorage',
    1:  'America/Anguilla',
    1:  'America/Antigua',
    1:  'America/Araguaina',
    1:  'America/Argentina/Buenos_Aires',
    1:  'America/Argentina/Catamarca',
    1:  'America/Argentina/Cordoba',
    1:  'America/Argentina/Jujuy',
    1:  'America/Argentina/La_Rioja',
    1:  'America/Argentina/Mendoza',
    1:  'America/Argentina/Rio_Gallegos',
    1:  'America/Argentina/Salta',
    1:  'America/Argentina/San_Juan',
    1:  'America/Argentina/San_Luis',
    1:  'America/Argentina/Tucuman',
    1:  'America/Argentina/Ushuaia',
    1:  'America/Aruba',
    1:  'America/Asuncion',
    1:  'America/Atikokan',
    1:  'America/Bahia',
    1:  'America/Bahia_Banderas',
    1:  'America/Barbados',
    1:  'America/Belem',
    1:  'America/Belize',
    1:  'America/Blanc-Sablon',
    1:  'America/Boa_Vista',
    1:  'America/Bogota',
    1:  'America/Boise',
    1:  'America/Cambridge_Bay',
    1:  'America/Campo_Grande',
    1:  'America/Cancun',
    1:  'America/Caracas',
    1:  'America/Cayenne',
    1:  'America/Cayman',
    1:  'America/Chicago',
    1:  'America/Chihuahua',
    1:  'America/Costa_Rica',
    1:  'America/Creston',
    1:  'America/Cuiaba',
    1:  'America/Curacao',
    1:  'America/Danmarkshavn',
    1:  'America/Dawson',
    1:  'America/Dawson_Creek',
    1:  'America/Denver',
    1:  'America/Detroit',
    1:  'America/Dominica',
    1:  'America/Edmonton',
    1:  'America/Eirunepe',
    1:  'America/El_Salvador',
    1:  'America/Fort_Nelson',
    1:  'America/Fortaleza',
    1:  'America/Glace_Bay',
    1:  'America/Godthab',
    1:  'America/Goose_Bay',
    1:  'America/Grand_Turk',
    1:  'America/Grenada',
    1:  'America/Guadeloupe',
    1:  'America/Guatemala',
    1:  'America/Guayaquil',
    1:  'America/Guyana',
    1:  'America/Halifax',
    1:  'America/Havana',
    1:  'America/Hermosillo',
    1:  'America/Indiana/Indianapolis',
    1:  'America/Indiana/Knox',
    1:  'America/Indiana/Marengo',
    1:  'America/Indiana/Petersburg',
    1:  'America/Indiana/Tell_City',
    1:  'America/Indiana/Vevay',
    1:  'America/Indiana/Vincennes',
    1:  'America/Indiana/Winamac',
    1:  'America/Inuvik',
    1:  'America/Iqaluit',
    1:  'America/Jamaica',
    1:  'America/Juneau',
    1:  'America/Kentucky/Louisville',
    1:  'America/Kentucky/Monticello',
    1:  'America/Kralendijk',
    1:  'America/La_Paz',
    1:  'America/Lima',
    1:  'America/Los_Angeles',
    1:  'America/Lower_Princes',
    1:  'America/Maceio',
    1:  'America/Managua',
    1:  'America/Manaus',
    1:  'America/Marigot',
    1:  'America/Martinique',
    1:  'America/Matamoros',
    1:  'America/Mazatlan',
    1:  'America/Menominee',
    1:  'America/Merida',
    1:  'America/Metlakatla',
    1:  'America/Mexico_City',
    1:  'America/Miquelon',
    1:  'America/Moncton',
    1:  'America/Monterrey',
    1:  'America/Montevideo',
    1:  'America/Montserrat',
    1:  'America/Nassau',
    1:  'America/New_York',
    1:  'America/Nipigon',
    1:  'America/Nome',
    1:  'America/Noronha',
    1:  'America/North_Dakota/Beulah',
    1:  'America/North_Dakota/Center',
    1:  'America/North_Dakota/New_Salem',
    1:  'America/Ojinaga',
    1:  'America/Panama',
    1:  'America/Pangnirtung',
    1:  'America/Paramaribo',
    1:  'America/Phoenix',
    1:  'America/Port-au-Prince',
    1:  'America/Port_of_Spain',
    1:  'America/Porto_Velho',
    1:  'America/Puerto_Rico',
    1:  'America/Punta_Arenas',
    1:  'America/Rainy_River',
    1:  'America/Rankin_Inlet',
    1:  'America/Recife',
    1:  'America/Regina',
    1:  'America/Resolute',
    1:  'America/Rio_Branco',
    1:  'America/Santarem',
    1:  'America/Santiago',
    1:  'America/Santo_Domingo',
    1:  'America/Sao_Paulo',
    1:  'America/Scoresbysund',
    1:  'America/Sitka',
    1:  'America/St_Barthelemy',
    1:  'America/St_Johns',
    1:  'America/St_Kitts',
    1:  'America/St_Lucia',
    1:  'America/St_Thomas',
    1:  'America/St_Vincent',
    1:  'America/Swift_Current',
    1:  'America/Tegucigalpa',
    1:  'America/Thule',
    1:  'America/Thunder_Bay',
    1:  'America/Tijuana',
    1:  'America/Toronto',
    1:  'America/Tortola',
    1:  'America/Vancouver',
    1:  'America/Whitehorse',
    1:  'America/Winnipeg',
    1:  'America/Yakutat',
    1:  'America/Yellowknife',
    1:  'Antarctica/Casey',
    1:  'Antarctica/Davis',
    1:  'Antarctica/DumontDUrville',
    1:  'Antarctica/Macquarie',
    1:  'Antarctica/Mawson',
    1:  'Antarctica/McMurdo',
    1:  'Antarctica/Palmer',
    1:  'Antarctica/Rothera',
    1:  'Antarctica/Syowa',
    1:  'Antarctica/Troll',
    1:  'Antarctica/Vostok',
    1:  'Arctic/Longyearbyen',
    1:  'Asia/Aden',
    1:  'Asia/Almaty',
    1:  'Asia/Amman',
    1:  'Asia/Anadyr',
    1:  'Asia/Aqtau',
    1:  'Asia/Aqtobe',
    1:  'Asia/Ashgabat',
    1:  'Asia/Atyrau',
    1:  'Asia/Baghdad',
    1:  'Asia/Bahrain',
    1:  'Asia/Baku',
    1:  'Asia/Bangkok',
    1:  'Asia/Barnaul',
    1:  'Asia/Beirut',
    1:  'Asia/Bishkek',
    1:  'Asia/Brunei',
    1:  'Asia/Chita',
    1:  'Asia/Choibalsan',
    1:  'Asia/Colombo',
    1:  'Asia/Damascus',
    1:  'Asia/Dhaka',
    1:  'Asia/Dili',
    1:  'Asia/Dubai',
    1:  'Asia/Dushanbe',
    1:  'Asia/Famagusta',
    1:  'Asia/Gaza',
    1:  'Asia/Hebron',
    1:  'Asia/Ho_Chi_Minh',
    1:  'Asia/Hong_Kong',
    1:  'Asia/Hovd',
    1:  'Asia/Irkutsk',
    1:  'Asia/Jakarta',
    1:  'Asia/Jayapura',
    1:  'Asia/Jerusalem',
    1:  'Asia/Kabul',
    1:  'Asia/Kamchatka',
    1:  'Asia/Karachi',
    1:  'Asia/Kathmandu',
    1:  'Asia/Khandyga',
    1:  'Asia/Kolkata',
    1:  'Asia/Krasnoyarsk',
    1:  'Asia/Kuala_Lumpur',
    1:  'Asia/Kuching',
    1:  'Asia/Kuwait',
    1:  'Asia/Macau',
    1:  'Asia/Magadan',
    1:  'Asia/Makassar',
    1:  'Asia/Manila',
    1:  'Asia/Muscat',
    1:  'Asia/Nicosia',
    1:  'Asia/Novokuznetsk',
    1:  'Asia/Novosibirsk',
    1:  'Asia/Omsk',
    1:  'Asia/Oral',
    1:  'Asia/Phnom_Penh',
    1:  'Asia/Pontianak',
    1:  'Asia/Pyongyang',
    1:  'Asia/Qatar',
    1:  'Asia/Qostanay',
    1:  'Asia/Qyzylorda',
    1:  'Asia/Riyadh',
    1:  'Asia/Sakhalin',
    1:  'Asia/Samarkand',
    1:  'Asia/Seoul',
    1:  'Asia/Shanghai',
    1:  'Asia/Singapore',
    1:  'Asia/Srednekolymsk',
    1:  'Asia/Taipei',
    1:  'Asia/Tashkent',
    1:  'Asia/Tbilisi',
    1:  'Asia/Tehran',
    1:  'Asia/Thimphu',
    1:  'Asia/Tokyo',
    1:  'Asia/Tomsk',
    1:  'Asia/Ulaanbaatar',
    1:  'Asia/Urumqi',
    1:  'Asia/Ust-Nera',
    1:  'Asia/Vientiane',
    1:  'Asia/Vladivostok',
    1:  'Asia/Yakutsk',
    1:  'Asia/Yangon',
    1:  'Asia/Yekaterinburg',
    1:  'Asia/Yerevan',
    1:  'Atlantic/Azores',
    1:  'Atlantic/Bermuda',
    1:  'Atlantic/Canary',
    1:  'Atlantic/Cape_Verde',
    1:  'Atlantic/Faroe',
    1:  'Atlantic/Madeira',
    1:  'Atlantic/Reykjavik',
    1:  'Atlantic/South_Georgia',
    1:  'Atlantic/St_Helena',
    1:  'Atlantic/Stanley',
    1:  'Australia/Adelaide',
    1:  'Australia/Brisbane',
    1:  'Australia/Broken_Hill',
    1:  'Australia/Currie',
    1:  'Australia/Darwin',
    1:  'Australia/Eucla',
    1:  'Australia/Hobart',
    1:  'Australia/Lindeman',
    1:  'Australia/Lord_Howe',
    1:  'Australia/Melbourne',
    1:  'Australia/Perth',
    1:  'Australia/Sydney',
    1:  'Canada/Atlantic',
    1:  'Canada/Central',
    1:  'Canada/Eastern',
    1:  'Canada/Mountain',
    1:  'Canada/Newfoundland',
    1:  'Canada/Pacific',
    1:  'Europe/Amsterdam',
    1:  'Europe/Andorra',
    1:  'Europe/Astrakhan',
    1:  'Europe/Athens',
    1:  'Europe/Belgrade',
    1:  'Europe/Berlin',
    1:  'Europe/Bratislava',
    1:  'Europe/Brussels',
    1:  'Europe/Bucharest',
    1:  'Europe/Budapest',
    1:  'Europe/Busingen',
    1:  'Europe/Chisinau',
    1:  'Europe/Copenhagen',
    1:  'Europe/Dublin',
    1:  'Europe/Gibraltar',
    1:  'Europe/Guernsey',
    1:  'Europe/Helsinki',
    1:  'Europe/Isle_of_Man',
    1:  'Europe/Istanbul',
    1:  'Europe/Jersey',
    1:  'Europe/Kaliningrad',
    1:  'Europe/Kiev',
    1:  'Europe/Kirov',
    1:  'Europe/Lisbon',
    1:  'Europe/Ljubljana',
    1:  'Europe/London',
    1:  'Europe/Luxembourg',
    1:  'Europe/Madrid',
    1:  'Europe/Malta',
    1:  'Europe/Mariehamn',
    1:  'Europe/Minsk',
    1:  'Europe/Monaco',
    1:  'Europe/Moscow',
    1:  'Europe/Oslo',
    1:  'Europe/Paris',
    1:  'Europe/Podgorica',
    1:  'Europe/Prague',
    1:  'Europe/Riga',
    1:  'Europe/Rome',
    1:  'Europe/Samara',
    1:  'Europe/San_Marino',
    1:  'Europe/Sarajevo',
    1:  'Europe/Saratov',
    1:  'Europe/Simferopol',
    1:  'Europe/Skopje',
    1:  'Europe/Sofia',
    1:  'Europe/Stockholm',
    1:  'Europe/Tallinn',
    1:  'Europe/Tirane',
    1:  'Europe/Ulyanovsk',
    1:  'Europe/Uzhgorod',
    1:  'Europe/Vaduz',
    1:  'Europe/Vatican',
    1:  'Europe/Vienna',
    1:  'Europe/Vilnius',
    1:  'Europe/Volgograd',
    1:  'Europe/Warsaw',
    1:  'Europe/Zagreb',
    1:  'Europe/Zaporozhye',
    1:  'Europe/Zurich',
    1:  'GMT',
    1:  'Indian/Antananarivo',
    1:  'Indian/Chagos',
    1:  'Indian/Christmas',
    1:  'Indian/Cocos',
    1:  'Indian/Comoro',
    1:  'Indian/Kerguelen',
    1:  'Indian/Mahe',
    1:  'Indian/Maldives',
    1:  'Indian/Mauritius',
    1:  'Indian/Mayotte',
    1:  'Indian/Reunion',
    1:  'Pacific/Apia',
    1:  'Pacific/Auckland',
    1:  'Pacific/Bougainville',
    1:  'Pacific/Chatham',
    1:  'Pacific/Chuuk',
    1:  'Pacific/Easter',
    1:  'Pacific/Efate',
    1:  'Pacific/Enderbury',
    1:  'Pacific/Fakaofo',
    1:  'Pacific/Fiji',
    1:  'Pacific/Funafuti',
    1:  'Pacific/Galapagos',
    1:  'Pacific/Gambier',
    1:  'Pacific/Guadalcanal',
    1:  'Pacific/Guam',
    1:  'Pacific/Honolulu',
    1:  'Pacific/Kiritimati',
    1:  'Pacific/Kosrae',
    1:  'Pacific/Kwajalein',
    1:  'Pacific/Majuro',
    1:  'Pacific/Marquesas',
    1:  'Pacific/Midway',
    1:  'Pacific/Nauru',
    1:  'Pacific/Niue',
    1:  'Pacific/Norfolk',
    1:  'Pacific/Noumea',
    1:  'Pacific/Pago_Pago',
    1:  'Pacific/Palau',
    1:  'Pacific/Pitcairn',
    1:  'Pacific/Pohnpei',
    1:  'Pacific/Port_Moresby',
    1:  'Pacific/Rarotonga',
    1:  'Pacific/Saipan',
    1:  'Pacific/Tahiti',
    1:  'Pacific/Tarawa',
    1:  'Pacific/Tongatapu',
    1:  'Pacific/Wake',
    1:  'Pacific/Wallis',
    1:  'US/Alaska',
    1:  'US/Arizona',
    1:  'US/Central',
    1:  'US/Eastern',
    1:  'US/Hawaii',
    1:  'US/Mountain',
    1:  'US/Pacific',
    1:  'UTC']
    1: common_timezones = LazyList(
    1:             tz for tz in common_timezones if tz in all_timezones)
               
    1: common_timezones_set = LazySet(common_timezones)
