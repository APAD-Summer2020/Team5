       #-----------------------------------------------------------------
       # plyparser.py
       #
       # PLYParser class and other utilites for simplifying programming
       # parsers with PLY
       #
       # Eli Bendersky [https://eli.thegreenplace.net/]
       # License: BSD
       #-----------------------------------------------------------------
       
    1: import warnings
       
    2: class Coord(object):
           """ Coordinates of a syntactic element. Consists of:
                   - File name
                   - Line number
                   - (optional) column number, for the Lexer
    1:     """
    1:     __slots__ = ('file', 'line', 'column', '__weakref__')
    1:     def __init__(self, file, line, column=None):
 1124:         self.file = file
 1124:         self.line = line
 1124:         self.column = column
       
    1:     def __str__(self):
               str = "%s:%s" % (self.file, self.line)
               if self.column: str += ":%s" % self.column
               return str
       
       
    2: class ParseError(Exception): pass
       
       
    2: class PLYParser(object):
    1:     def _create_opt_rule(self, rulename):
               """ Given a rule name, creates an optional ply.yacc rule
                   for it. The name of the optional rule is
                   <rulename>_opt
               """
   14:         optname = rulename + '_opt'
       
   14:         def optrule(self, p):
  521:             p[0] = p[1]
       
   14:         optrule.__doc__ = '%s : empty\n| %s' % (optname, rulename)
   14:         optrule.__name__ = 'p_%s' % optname
   14:         setattr(self.__class__, optrule.__name__, optrule)
       
    1:     def _coord(self, lineno, column=None):
 1124:         return Coord(
 1124:                 file=self.clex.filename,
 1124:                 line=lineno,
 1124:                 column=column)
       
    1:     def _token_coord(self, p, token_idx):
               """ Returns the coordinates for the YaccProduction objet 'p' indexed
                   with 'token_idx'. The coordinate includes the 'lineno' and
                   'column'. Both follow the lex semantic, starting from 1.
               """
 1124:         last_cr = p.lexer.lexer.lexdata.rfind('\n', 0, p.lexpos(token_idx))
 1124:         if last_cr < 0:
    6:             last_cr = -1
 1124:         column = (p.lexpos(token_idx) - (last_cr))
 1124:         return self._coord(p.lineno(token_idx), column)
       
    1:     def _parse_error(self, msg, coord):
               raise ParseError("%s: %s" % (coord, msg))
       
       
    1: def parameterized(*params):
           """ Decorator to create parameterized rules.
       
           Parameterized rule methods must be named starting with 'p_' and contain
           'xxx', and their docstrings may contain 'xxx' and 'yyy'. These will be
           replaced by the given parameter tuples. For example, ``p_xxx_rule()`` with
           docstring 'xxx_rule  : yyy' when decorated with
           ``@parameterized(('id', 'ID'))`` produces ``p_id_rule()`` with the docstring
           'id_rule  : ID'. Using multiple tuples produces multiple rules.
           """
    8:     def decorate(rule_func):
    8:         rule_func._params = params
    8:         return rule_func
    8:     return decorate
       
       
    1: def template(cls):
           """ Class decorator to generate rules from parameterized rule templates.
       
           See `parameterized` for more information on parameterized rules.
           """
    1:     issued_nodoc_warning = False
  190:     for attr_name in dir(cls):
  189:         if attr_name.startswith('p_'):
  141:             method = getattr(cls, attr_name)
  141:             if hasattr(method, '_params'):
                       # Remove the template method
    8:                 delattr(cls, attr_name)
                       # Create parameterized rules from this method; only run this if
                       # the method has a docstring. This is to address an issue when
                       # pycparser's users are installed in -OO mode which strips
                       # docstrings away.
                       # See: https://github.com/eliben/pycparser/pull/198/ and
                       #      https://github.com/eliben/pycparser/issues/197
                       # for discussion.
    8:                 if method.__doc__ is not None:
    8:                     _create_param_rules(cls, method)
                       elif not issued_nodoc_warning:
                           warnings.warn(
                               'parsing methods must have __doc__ for pycparser to work properly',
                               RuntimeWarning,
                               stacklevel=2)
                           issued_nodoc_warning = True
    1:     return cls
       
       
    1: def _create_param_rules(cls, func):
           """ Create ply.yacc rules based on a parameterized rule function
       
           Generates new methods (one per each pair of parameters) based on the
           template rule function `func`, and attaches them to `cls`. The rule
           function's parameters must be accessible via its `_params` attribute.
           """
   31:     for xxx, yyy in func._params:
               # Use the template method's body for each new method
   23:         def param_rule(self, p):
 1119:             func(self, p)
       
               # Substitute in the params for the grammar rule and function name
   23:         param_rule.__doc__ = func.__doc__.replace('xxx', xxx).replace('yyy', yyy)
   23:         param_rule.__name__ = func.__name__.replace('xxx', xxx)
       
               # Attach the new method to the class
   23:         setattr(cls, param_rule.__name__, param_rule)
