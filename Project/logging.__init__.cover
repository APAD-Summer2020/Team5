       # Copyright 2001-2017 by Vinay Sajip. All Rights Reserved.
       #
       # Permission to use, copy, modify, and distribute this software and its
       # documentation for any purpose and without fee is hereby granted,
       # provided that the above copyright notice appear in all copies and that
       # both that copyright notice and this permission notice appear in
       # supporting documentation, and that the name of Vinay Sajip
       # not be used in advertising or publicity pertaining to distribution
       # of the software without specific, written prior permission.
       # VINAY SAJIP DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
       # ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
       # VINAY SAJIP BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
       # ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
       # IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
       # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
       
       """
       Logging package for Python. Based on PEP 282 and comments thereto in
       comp.lang.python.
       
       Copyright (C) 2001-2017 Vinay Sajip. All Rights Reserved.
       
       To use, simply 'import logging' and log away!
    1: """
       
    1: import sys, os, time, io, traceback, warnings, weakref, collections.abc
       
    1: from string import Template
       
    1: __all__ = ['BASIC_FORMAT', 'BufferingFormatter', 'CRITICAL', 'DEBUG', 'ERROR',
    1:            'FATAL', 'FileHandler', 'Filter', 'Formatter', 'Handler', 'INFO',
    1:            'LogRecord', 'Logger', 'LoggerAdapter', 'NOTSET', 'NullHandler',
    1:            'StreamHandler', 'WARN', 'WARNING', 'addLevelName', 'basicConfig',
    1:            'captureWarnings', 'critical', 'debug', 'disable', 'error',
    1:            'exception', 'fatal', 'getLevelName', 'getLogger', 'getLoggerClass',
    1:            'info', 'log', 'makeLogRecord', 'setLoggerClass', 'shutdown',
    1:            'warn', 'warning', 'getLogRecordFactory', 'setLogRecordFactory',
    1:            'lastResort', 'raiseExceptions']
       
    1: import threading
       
    1: __author__  = "Vinay Sajip <vinay_sajip@red-dove.com>"
    1: __status__  = "production"
       # The following module attributes are no longer updated.
    1: __version__ = "0.5.1.2"
    1: __date__    = "07 February 2010"
       
       #---------------------------------------------------------------------------
       #   Miscellaneous module data
       #---------------------------------------------------------------------------
       
       #
       #_startTime is used as the base when calculating the relative time of events
       #
    1: _startTime = time.time()
       
       #
       #raiseExceptions is used to see if exceptions during handling should be
       #propagated
       #
    1: raiseExceptions = True
       
       #
       # If you don't want threading information in the log, set this to zero
       #
    1: logThreads = True
       
       #
       # If you don't want multiprocessing information in the log, set this to zero
       #
    1: logMultiprocessing = True
       
       #
       # If you don't want process information in the log, set this to zero
       #
    1: logProcesses = True
       
       #---------------------------------------------------------------------------
       #   Level related stuff
       #---------------------------------------------------------------------------
       #
       # Default levels and level names, these can be replaced with any positive set
       # of values having corresponding names. There is a pseudo-level, NOTSET, which
       # is only really there as a lower limit for user-defined levels. Handlers and
       # loggers are initialized with NOTSET so that they will log all messages, even
       # at user-defined levels.
       #
       
    1: CRITICAL = 50
    1: FATAL = CRITICAL
    1: ERROR = 40
    1: WARNING = 30
    1: WARN = WARNING
    1: INFO = 20
    1: DEBUG = 10
    1: NOTSET = 0
       
       _levelToName = {
    1:     CRITICAL: 'CRITICAL',
    1:     ERROR: 'ERROR',
    1:     WARNING: 'WARNING',
    1:     INFO: 'INFO',
    1:     DEBUG: 'DEBUG',
    1:     NOTSET: 'NOTSET',
       }
       _nameToLevel = {
    1:     'CRITICAL': CRITICAL,
    1:     'FATAL': FATAL,
    1:     'ERROR': ERROR,
    1:     'WARN': WARNING,
    1:     'WARNING': WARNING,
    1:     'INFO': INFO,
    1:     'DEBUG': DEBUG,
    1:     'NOTSET': NOTSET,
       }
       
    1: def getLevelName(level):
           """
           Return the textual representation of logging level 'level'.
       
           If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,
           INFO, DEBUG) then you get the corresponding string. If you have
           associated levels with names using addLevelName then the name you have
           associated with 'level' is returned.
       
           If a numeric value corresponding to one of the defined levels is passed
           in, the corresponding string representation is returned.
       
           Otherwise, the string "Level %s" % level is returned.
           """
           # See Issues #22386, #27937 and #29220 for why it's this way
    5:     result = _levelToName.get(level)
    5:     if result is not None:
    5:         return result
           result = _nameToLevel.get(level)
           if result is not None:
               return result
           return "Level %s" % level
       
    1: def addLevelName(level, levelName):
           """
           Associate 'levelName' with 'level'.
       
           This is used when converting levels to text during message formatting.
           """
           _acquireLock()
           try:    #unlikely to cause an exception, but you never know...
               _levelToName[level] = levelName
               _nameToLevel[levelName] = level
           finally:
               _releaseLock()
       
    1: if hasattr(sys, '_getframe'):
    6:     currentframe = lambda: sys._getframe(3)
       else: #pragma: no cover
           def currentframe():
               """Return the frame object for the caller's stack frame."""
               try:
                   raise Exception
               except Exception:
                   return sys.exc_info()[2].tb_frame.f_back
       
       #
       # _srcfile is used when walking the stack to check when we've got the first
       # caller stack frame, by skipping frames whose filename is that of this
       # module's source. It therefore should contain the filename of this module's
       # source file.
       #
       # Ordinarily we would use __file__ for this, but frozen modules don't always
       # have __file__ set, for some reason (see Issue #21736). Thus, we get the
       # filename from a handy code object from a function defined in this module.
       # (There's no particular reason for picking addLevelName.)
       #
       
    1: _srcfile = os.path.normcase(addLevelName.__code__.co_filename)
       
       # _srcfile is only used in conjunction with sys._getframe().
       # To provide compatibility with older versions of Python, set _srcfile
       # to None if _getframe() is not available; this value will prevent
       # findCaller() from being called. You can also do this if you want to avoid
       # the overhead of fetching caller information, even when _getframe() is
       # available.
       #if not hasattr(sys, '_getframe'):
       #    _srcfile = None
       
       
    1: def _checkLevel(level):
   48:     if isinstance(level, int):
   48:         rv = level
           elif str(level) == level:
               if level not in _nameToLevel:
                   raise ValueError("Unknown level: %r" % level)
               rv = _nameToLevel[level]
           else:
               raise TypeError("Level not an integer or a valid string: %r" % level)
   48:     return rv
       
       #---------------------------------------------------------------------------
       #   Thread-related stuff
       #---------------------------------------------------------------------------
       
       #
       #_lock is used to serialize access to shared data structures in this module.
       #This needs to be an RLock because fileConfig() creates and configures
       #Handlers, and so might arbitrary user threads. Since Handler code updates the
       #shared dictionary _handlers, it needs to acquire the lock. But if configuring,
       #the lock would already have been acquired - so we need an RLock.
       #The same argument applies to Loggers and Manager.loggerDict.
       #
    1: _lock = threading.RLock()
       
    1: def _acquireLock():
           """
           Acquire the module-level lock for serializing access to shared data.
       
           This should be released with _releaseLock().
           """
   62:     if _lock:
   62:         _lock.acquire()
       
    1: def _releaseLock():
           """
           Release the module-level lock acquired by calling _acquireLock().
           """
   62:     if _lock:
   62:         _lock.release()
       
       
       # Prevent a held logging lock from blocking a child from logging.
       
    1: if not hasattr(os, 'register_at_fork'):  # Windows and friends.
           def _register_at_fork_reinit_lock(instance):
               pass  # no-op when os.register_at_fork does not exist.
       else:
           # A collection of instances with a createLock method (logging.Handler)
           # to be called in the child after forking.  The weakref avoids us keeping
           # discarded Handler instances alive.  A set is used to avoid accumulating
           # duplicate registrations as createLock() is responsible for registering
           # a new Handler instance with this set in the first place.
    1:     _at_fork_reinit_lock_weakset = weakref.WeakSet()
       
    1:     def _register_at_fork_reinit_lock(instance):
    4:         _acquireLock()
    4:         try:
    4:             _at_fork_reinit_lock_weakset.add(instance)
               finally:
    4:             _releaseLock()
       
    1:     def _after_at_fork_child_reinit_locks():
               # _acquireLock() was called in the parent before forking.
               for handler in _at_fork_reinit_lock_weakset:
                   try:
                       handler.createLock()
                   except Exception as err:
                       # Similar to what PyErr_WriteUnraisable does.
                       print("Ignoring exception from logging atfork", instance,
                             "._reinit_lock() method:", err, file=sys.stderr)
               _releaseLock()  # Acquired by os.register_at_fork(before=.
       
       
    1:     os.register_at_fork(before=_acquireLock,
    1:                         after_in_child=_after_at_fork_child_reinit_locks,
    1:                         after_in_parent=_releaseLock)
       
       
       #---------------------------------------------------------------------------
       #   The logging record
       #---------------------------------------------------------------------------
       
    2: class LogRecord(object):
           """
           A LogRecord instance represents an event being logged.
       
           LogRecord instances are created every time something is logged. They
           contain all the information pertinent to the event being logged. The
           main information passed in is in msg and args, which are combined
           using str(msg) % args to create the message field of the record. The
           record also includes information such as when the record was created,
           the source line where the logging call was made, and any exception
           information to be logged.
    1:     """
           def __init__(self, name, level, pathname, lineno,
    1:                  msg, args, exc_info, func=None, sinfo=None, **kwargs):
               """
               Initialize a logging record with interesting information.
               """
    5:         ct = time.time()
    5:         self.name = name
    5:         self.msg = msg
               #
               # The following statement allows passing of a dictionary as a sole
               # argument, so that you can do something like
               #  logging.debug("a %(a)d b %(b)s", {'a':1, 'b':2})
               # Suggested by Stefan Behnel.
               # Note that without the test for args[0], we get a problem because
               # during formatting, we test to see if the arg is present using
               # 'if self.args:'. If the event being logged is e.g. 'Value is %d'
               # and if the passed arg fails 'if self.args:' then no formatting
               # is done. For example, logger.warning('Value is %d', 0) would log
               # 'Value is %d' instead of 'Value is 0'.
               # For the use case of passing a dictionary, this should not be a
               # problem.
               # Issue #21172: a request was made to relax the isinstance check
               # to hasattr(args[0], '__getitem__'). However, the docs on string
               # formatting still seem to suggest a mapping object is required.
               # Thus, while not removing the isinstance check, it does now look
               # for collections.abc.Mapping rather than, as before, dict.
    5:         if (args and len(args) == 1 and isinstance(args[0], collections.abc.Mapping)
                   and args[0]):
                   args = args[0]
    5:         self.args = args
    5:         self.levelname = getLevelName(level)
    5:         self.levelno = level
    5:         self.pathname = pathname
    5:         try:
    5:             self.filename = os.path.basename(pathname)
    5:             self.module = os.path.splitext(self.filename)[0]
               except (TypeError, ValueError, AttributeError):
                   self.filename = pathname
                   self.module = "Unknown module"
    5:         self.exc_info = exc_info
    5:         self.exc_text = None      # used to cache the traceback text
    5:         self.stack_info = sinfo
    5:         self.lineno = lineno
    5:         self.funcName = func
    5:         self.created = ct
    5:         self.msecs = (ct - int(ct)) * 1000
    5:         self.relativeCreated = (self.created - _startTime) * 1000
    5:         if logThreads:
    5:             self.thread = threading.get_ident()
    5:             self.threadName = threading.current_thread().name
               else: # pragma: no cover
                   self.thread = None
                   self.threadName = None
    5:         if not logMultiprocessing: # pragma: no cover
                   self.processName = None
               else:
    5:             self.processName = 'MainProcess'
    5:             mp = sys.modules.get('multiprocessing')
    5:             if mp is not None:
                       # Errors may occur if multiprocessing has not finished loading
                       # yet - e.g. if a custom import hook causes third-party code
                       # to run when multiprocessing calls import. See issue 8200
                       # for an example
                       try:
                           self.processName = mp.current_process().name
                       except Exception: #pragma: no cover
                           pass
    5:         if logProcesses and hasattr(os, 'getpid'):
    5:             self.process = os.getpid()
               else:
                   self.process = None
       
    1:     def __str__(self):
               return '<LogRecord: %s, %s, %s, %s, "%s">'%(self.name, self.levelno,
                   self.pathname, self.lineno, self.msg)
       
    1:     __repr__ = __str__
       
    1:     def getMessage(self):
               """
               Return the message for this LogRecord.
       
               Return the message for this LogRecord after merging any user-supplied
               arguments with the message.
               """
    5:         msg = str(self.msg)
    5:         if self.args:
    1:             msg = msg % self.args
    5:         return msg
       
       #
       #   Determine which class to use when instantiating log records.
       #
    1: _logRecordFactory = LogRecord
       
    1: def setLogRecordFactory(factory):
           """
           Set the factory to be used when instantiating a log record.
       
           :param factory: A callable which will be called to instantiate
           a log record.
           """
           global _logRecordFactory
           _logRecordFactory = factory
       
    1: def getLogRecordFactory():
           """
           Return the factory to be used when instantiating a log record.
           """
       
           return _logRecordFactory
       
    1: def makeLogRecord(dict):
           """
           Make a LogRecord whose attributes are defined by the specified dictionary,
           This function is useful for converting a logging event received over
           a socket connection (which is sent as a dictionary) into a LogRecord
           instance.
           """
           rv = _logRecordFactory(None, None, "", 0, "", (), None, None)
           rv.__dict__.update(dict)
           return rv
       
       #---------------------------------------------------------------------------
       #   Formatter classes and functions
       #---------------------------------------------------------------------------
       
    2: class PercentStyle(object):
       
    1:     default_format = '%(message)s'
    1:     asctime_format = '%(asctime)s'
    1:     asctime_search = '%(asctime)'
       
    1:     def __init__(self, fmt):
    3:         self._fmt = fmt or self.default_format
       
    1:     def usesTime(self):
    5:         return self._fmt.find(self.asctime_search) >= 0
       
    1:     def format(self, record):
    5:         return self._fmt % record.__dict__
       
    2: class StrFormatStyle(PercentStyle):
    1:     default_format = '{message}'
    1:     asctime_format = '{asctime}'
    1:     asctime_search = '{asctime'
       
    1:     def format(self, record):
               return self._fmt.format(**record.__dict__)
       
       
    2: class StringTemplateStyle(PercentStyle):
    1:     default_format = '${message}'
    1:     asctime_format = '${asctime}'
    1:     asctime_search = '${asctime}'
       
    1:     def __init__(self, fmt):
               self._fmt = fmt or self.default_format
               self._tpl = Template(self._fmt)
       
    1:     def usesTime(self):
               fmt = self._fmt
               return fmt.find('$asctime') >= 0 or fmt.find(self.asctime_format) >= 0
       
    1:     def format(self, record):
               return self._tpl.substitute(**record.__dict__)
       
    1: BASIC_FORMAT = "%(levelname)s:%(name)s:%(message)s"
       
       _STYLES = {
    1:     '%': (PercentStyle, BASIC_FORMAT),
    1:     '{': (StrFormatStyle, '{levelname}:{name}:{message}'),
    1:     '$': (StringTemplateStyle, '${levelname}:${name}:${message}'),
       }
       
    2: class Formatter(object):
           """
           Formatter instances are used to convert a LogRecord to text.
       
           Formatters need to know how a LogRecord is constructed. They are
           responsible for converting a LogRecord to (usually) a string which can
           be interpreted by either a human or an external system. The base Formatter
           allows a formatting string to be specified. If none is supplied, the
           the style-dependent default value, "%(message)s", "{message}", or
           "${message}", is used.
       
           The Formatter can be initialized with a format string which makes use of
           knowledge of the LogRecord attributes - e.g. the default value mentioned
           above makes use of the fact that the user's message and arguments are pre-
           formatted into a LogRecord's message attribute. Currently, the useful
           attributes in a LogRecord are described by:
       
           %(name)s            Name of the logger (logging channel)
           %(levelno)s         Numeric logging level for the message (DEBUG, INFO,
                               WARNING, ERROR, CRITICAL)
           %(levelname)s       Text logging level for the message ("DEBUG", "INFO",
                               "WARNING", "ERROR", "CRITICAL")
           %(pathname)s        Full pathname of the source file where the logging
                               call was issued (if available)
           %(filename)s        Filename portion of pathname
           %(module)s          Module (name portion of filename)
           %(lineno)d          Source line number where the logging call was issued
                               (if available)
           %(funcName)s        Function name
           %(created)f         Time when the LogRecord was created (time.time()
                               return value)
           %(asctime)s         Textual time when the LogRecord was created
           %(msecs)d           Millisecond portion of the creation time
           %(relativeCreated)d Time in milliseconds when the LogRecord was created,
                               relative to the time the logging module was loaded
                               (typically at application startup time)
           %(thread)d          Thread ID (if available)
           %(threadName)s      Thread name (if available)
           %(process)d         Process ID (if available)
           %(message)s         The result of record.getMessage(), computed just as
                               the record is emitted
    1:     """
       
    1:     converter = time.localtime
       
    1:     def __init__(self, fmt=None, datefmt=None, style='%'):
               """
               Initialize the formatter with specified format strings.
       
               Initialize the formatter either with the specified format string, or a
               default as described above. Allow for specialized date formatting with
               the optional datefmt argument. If datefmt is omitted, you get an
               ISO8601-like (or RFC 3339-like) format.
       
               Use a style parameter of '%', '{' or '$' to specify that you want to
               use one of %-formatting, :meth:`str.format` (``{}``) formatting or
               :class:`string.Template` formatting in your format string.
       
               .. versionchanged:: 3.2
                  Added the ``style`` parameter.
               """
    3:         if style not in _STYLES:
                   raise ValueError('Style must be one of: %s' % ','.join(
                                    _STYLES.keys()))
    3:         self._style = _STYLES[style][0](fmt)
    3:         self._fmt = self._style._fmt
    3:         self.datefmt = datefmt
       
    1:     default_time_format = '%Y-%m-%d %H:%M:%S'
    1:     default_msec_format = '%s,%03d'
       
    1:     def formatTime(self, record, datefmt=None):
               """
               Return the creation time of the specified LogRecord as formatted text.
       
               This method should be called from format() by a formatter which
               wants to make use of a formatted time. This method can be overridden
               in formatters to provide for any specific requirement, but the
               basic behaviour is as follows: if datefmt (a string) is specified,
               it is used with time.strftime() to format the creation time of the
               record. Otherwise, an ISO8601-like (or RFC 3339-like) format is used.
               The resulting string is returned. This function uses a user-configurable
               function to convert the creation time to a tuple. By default,
               time.localtime() is used; to change this for a particular formatter
               instance, set the 'converter' attribute to a function with the same
               signature as time.localtime() or time.gmtime(). To change it for all
               formatters, for example if you want all logging times to be shown in GMT,
               set the 'converter' attribute in the Formatter class.
               """
               ct = self.converter(record.created)
               if datefmt:
                   s = time.strftime(datefmt, ct)
               else:
                   t = time.strftime(self.default_time_format, ct)
                   s = self.default_msec_format % (t, record.msecs)
               return s
       
    1:     def formatException(self, ei):
               """
               Format and return the specified exception information as a string.
       
               This default implementation just uses
               traceback.print_exception()
               """
               sio = io.StringIO()
               tb = ei[2]
               # See issues #9427, #1553375. Commented out for now.
               #if getattr(self, 'fullstack', False):
               #    traceback.print_stack(tb.tb_frame.f_back, file=sio)
               traceback.print_exception(ei[0], ei[1], tb, None, sio)
               s = sio.getvalue()
               sio.close()
               if s[-1:] == "\n":
                   s = s[:-1]
               return s
       
    1:     def usesTime(self):
               """
               Check if the format uses the creation time of the record.
               """
    5:         return self._style.usesTime()
       
    1:     def formatMessage(self, record):
    5:         return self._style.format(record)
       
    1:     def formatStack(self, stack_info):
               """
               This method is provided as an extension point for specialized
               formatting of stack information.
       
               The input data is a string as returned from a call to
               :func:`traceback.print_stack`, but with the last trailing newline
               removed.
       
               The base implementation just returns the value passed in.
               """
               return stack_info
       
    1:     def format(self, record):
               """
               Format the specified record as text.
       
               The record's attribute dictionary is used as the operand to a
               string formatting operation which yields the returned string.
               Before formatting the dictionary, a couple of preparatory steps
               are carried out. The message attribute of the record is computed
               using LogRecord.getMessage(). If the formatting string uses the
               time (as determined by a call to usesTime(), formatTime() is
               called to format the event time. If there is exception information,
               it is formatted using formatException() and appended to the message.
               """
    5:         record.message = record.getMessage()
    5:         if self.usesTime():
                   record.asctime = self.formatTime(record, self.datefmt)
    5:         s = self.formatMessage(record)
    5:         if record.exc_info:
                   # Cache the traceback text to avoid converting it multiple times
                   # (it's constant anyway)
                   if not record.exc_text:
                       record.exc_text = self.formatException(record.exc_info)
    5:         if record.exc_text:
                   if s[-1:] != "\n":
                       s = s + "\n"
                   s = s + record.exc_text
    5:         if record.stack_info:
                   if s[-1:] != "\n":
                       s = s + "\n"
                   s = s + self.formatStack(record.stack_info)
    5:         return s
       
       #
       #   The default formatter to use when no other is specified
       #
    1: _defaultFormatter = Formatter()
       
    2: class BufferingFormatter(object):
           """
           A formatter suitable for formatting a number of records.
    1:     """
    1:     def __init__(self, linefmt=None):
               """
               Optionally specify a formatter which will be used to format each
               individual record.
               """
               if linefmt:
                   self.linefmt = linefmt
               else:
                   self.linefmt = _defaultFormatter
       
    1:     def formatHeader(self, records):
               """
               Return the header string for the specified records.
               """
               return ""
       
    1:     def formatFooter(self, records):
               """
               Return the footer string for the specified records.
               """
               return ""
       
    1:     def format(self, records):
               """
               Format the specified records and return the result as a string.
               """
               rv = ""
               if len(records) > 0:
                   rv = rv + self.formatHeader(records)
                   for record in records:
                       rv = rv + self.linefmt.format(record)
                   rv = rv + self.formatFooter(records)
               return rv
       
       #---------------------------------------------------------------------------
       #   Filter classes and functions
       #---------------------------------------------------------------------------
       
    2: class Filter(object):
           """
           Filter instances are used to perform arbitrary filtering of LogRecords.
       
           Loggers and Handlers can optionally use Filter instances to filter
           records as desired. The base filter class only allows events which are
           below a certain point in the logger hierarchy. For example, a filter
           initialized with "A.B" will allow events logged by loggers "A.B",
           "A.B.C", "A.B.C.D", "A.B.D" etc. but not "A.BB", "B.A.B" etc. If
           initialized with the empty string, all events are passed.
    1:     """
    1:     def __init__(self, name=''):
               """
               Initialize a filter.
       
               Initialize with the name of the logger which, together with its
               children, will have its events allowed through the filter. If no
               name is specified, allow every event.
               """
               self.name = name
               self.nlen = len(name)
       
    1:     def filter(self, record):
               """
               Determine if the specified record is to be logged.
       
               Is the specified record to be logged? Returns 0 for no, nonzero for
               yes. If deemed appropriate, the record may be modified in-place.
               """
               if self.nlen == 0:
                   return True
               elif self.name == record.name:
                   return True
               elif record.name.find(self.name, 0, self.nlen) != 0:
                   return False
               return (record.name[self.nlen] == ".")
       
    2: class Filterer(object):
           """
           A base class for loggers and handlers which allows them to share
           common code.
    1:     """
    1:     def __init__(self):
               """
               Initialize the list of filters to be an empty list.
               """
   45:         self.filters = []
       
    1:     def addFilter(self, filter):
               """
               Add the specified filter to this handler.
               """
               if not (filter in self.filters):
                   self.filters.append(filter)
       
    1:     def removeFilter(self, filter):
               """
               Remove the specified filter from this handler.
               """
               if filter in self.filters:
                   self.filters.remove(filter)
       
    1:     def filter(self, record):
               """
               Determine if a record is loggable by consulting all the filters.
       
               The default is to allow the record to be logged; any filter can veto
               this and the record is then dropped. Returns a zero value if a record
               is to be dropped, else non-zero.
       
               .. versionchanged:: 3.2
       
                  Allow filters to be just callables.
               """
   10:         rv = True
   10:         for f in self.filters:
                   if hasattr(f, 'filter'):
                       result = f.filter(record)
                   else:
                       result = f(record) # assume callable - will raise if not
                   if not result:
                       rv = False
                       break
   10:         return rv
       
       #---------------------------------------------------------------------------
       #   Handler classes and functions
       #---------------------------------------------------------------------------
       
    1: _handlers = weakref.WeakValueDictionary()  #map of handler names to handlers
    1: _handlerList = [] # added to allow handlers to be removed in reverse of order initialized
       
    1: def _removeHandlerRef(wr):
           """
           Remove a handler reference from the internal cleanup list.
           """
           # This function can be called during module teardown, when globals are
           # set to None. It can also be called from another thread. So we need to
           # pre-emptively grab the necessary globals and check if they're None,
           # to prevent race conditions and failures during interpreter shutdown.
           acquire, release, handlers = _acquireLock, _releaseLock, _handlerList
           if acquire and release and handlers:
               acquire()
               try:
                   if wr in handlers:
                       handlers.remove(wr)
               finally:
                   release()
       
    1: def _addHandlerRef(handler):
           """
           Add a handler to the internal cleanup list using a weak reference.
           """
    9:     _acquireLock()
    9:     try:
    9:         _handlerList.append(weakref.ref(handler, _removeHandlerRef))
           finally:
    9:         _releaseLock()
       
    2: class Handler(Filterer):
           """
           Handler instances dispatch logging events to specific destinations.
       
           The base handler class. Acts as a placeholder which defines the Handler
           interface. Handlers can optionally use Formatter instances to format
           records as desired. By default, no formatter is specified; in this case,
           the 'raw' message as determined by record.message is logged.
    1:     """
    1:     def __init__(self, level=NOTSET):
               """
               Initializes the instance - basically setting the formatter to None
               and the filter list to empty.
               """
    9:         Filterer.__init__(self)
    9:         self._name = None
    9:         self.level = _checkLevel(level)
    9:         self.formatter = None
               # Add the handler to the global _handlerList (for cleanup on shutdown)
    9:         _addHandlerRef(self)
    9:         self.createLock()
       
    1:     def get_name(self):
               return self._name
       
    1:     def set_name(self, name):
               _acquireLock()
               try:
                   if self._name in _handlers:
                       del _handlers[self._name]
                   self._name = name
                   if name:
                       _handlers[name] = self
               finally:
                   _releaseLock()
       
    1:     name = property(get_name, set_name)
       
    1:     def createLock(self):
               """
               Acquire a thread lock for serializing access to the underlying I/O.
               """
    4:         self.lock = threading.RLock()
    4:         _register_at_fork_reinit_lock(self)
       
    1:     def acquire(self):
               """
               Acquire the I/O thread lock.
               """
   10:         if self.lock:
   10:             self.lock.acquire()
       
    1:     def release(self):
               """
               Release the I/O thread lock.
               """
   10:         if self.lock:
   10:             self.lock.release()
       
    1:     def setLevel(self, level):
               """
               Set the logging level of this handler.  level must be an int or a str.
               """
    1:         self.level = _checkLevel(level)
       
    1:     def format(self, record):
               """
               Format the specified record.
       
               If a formatter is set, use it. Otherwise, use the default formatter
               for the module.
               """
    5:         if self.formatter:
                   fmt = self.formatter
               else:
    5:             fmt = _defaultFormatter
    5:         return fmt.format(record)
       
    1:     def emit(self, record):
               """
               Do whatever it takes to actually log the specified logging record.
       
               This version is intended to be implemented by subclasses and so
               raises a NotImplementedError.
               """
               raise NotImplementedError('emit must be implemented '
                                         'by Handler subclasses')
       
    1:     def handle(self, record):
               """
               Conditionally emit the specified logging record.
       
               Emission depends on filters which may have been added to the handler.
               Wrap the actual emission of the record with acquisition/release of
               the I/O thread lock. Returns whether the filter passed the record for
               emission.
               """
    5:         rv = self.filter(record)
    5:         if rv:
    5:             self.acquire()
    5:             try:
    5:                 self.emit(record)
                   finally:
    5:                 self.release()
    5:         return rv
       
    1:     def setFormatter(self, fmt):
               """
               Set the formatter for this handler.
               """
    2:         self.formatter = fmt
       
    1:     def flush(self):
               """
               Ensure all logging output has been flushed.
       
               This version does nothing and is intended to be implemented by
               subclasses.
               """
               pass
       
    1:     def close(self):
               """
               Tidy up any resources used by the handler.
       
               This version removes the handler from an internal map of handlers,
               _handlers, which is used for handler lookup by name. Subclasses
               should ensure that this gets called from overridden close()
               methods.
               """
               #get the module data lock, as we're updating a shared structure.
               _acquireLock()
               try:    #unlikely to raise an exception, but you never know...
                   if self._name and self._name in _handlers:
                       del _handlers[self._name]
               finally:
                   _releaseLock()
       
    1:     def handleError(self, record):
               """
               Handle errors which occur during an emit() call.
       
               This method should be called from handlers when an exception is
               encountered during an emit() call. If raiseExceptions is false,
               exceptions get silently ignored. This is what is mostly wanted
               for a logging system - most users will not care about errors in
               the logging system, they are more interested in application errors.
               You could, however, replace this with a custom handler if you wish.
               The record which was being processed is passed in to this method.
               """
               if raiseExceptions and sys.stderr:  # see issue 13807
                   t, v, tb = sys.exc_info()
                   try:
                       sys.stderr.write('--- Logging error ---\n')
                       traceback.print_exception(t, v, tb, None, sys.stderr)
                       sys.stderr.write('Call stack:\n')
                       # Walk the stack frame up until we're out of logging,
                       # so as to print the calling context.
                       frame = tb.tb_frame
                       while (frame and os.path.dirname(frame.f_code.co_filename) ==
                              __path__[0]):
                           frame = frame.f_back
                       if frame:
                           traceback.print_stack(frame, file=sys.stderr)
                       else:
                           # couldn't find the right stack frame, for some reason
                           sys.stderr.write('Logged from file %s, line %s\n' % (
                                            record.filename, record.lineno))
                       # Issue 18671: output logging message and arguments
                       try:
                           sys.stderr.write('Message: %r\n'
                                            'Arguments: %s\n' % (record.msg,
                                                                 record.args))
                       except RecursionError:  # See issue 36272
                           raise
                       except Exception:
                           sys.stderr.write('Unable to print the message and arguments'
                                            ' - possible formatting error.\nUse the'
                                            ' traceback above to help find the error.\n'
                                           )
                   except OSError: #pragma: no cover
                       pass    # see issue 5971
                   finally:
                       del t, v, tb
       
    1:     def __repr__(self):
               level = getLevelName(self.level)
               return '<%s (%s)>' % (self.__class__.__name__, level)
       
    2: class StreamHandler(Handler):
           """
           A handler class which writes logging records, appropriately formatted,
           to a stream. Note that this class does not close the stream, as
           sys.stdout or sys.stderr may be used.
    1:     """
       
    1:     terminator = '\n'
       
    1:     def __init__(self, stream=None):
               """
               Initialize the handler.
       
               If stream is not specified, sys.stderr is used.
               """
    3:         Handler.__init__(self)
    3:         if stream is None:
    2:             stream = sys.stderr
    3:         self.stream = stream
       
    1:     def flush(self):
               """
               Flushes the stream.
               """
    5:         self.acquire()
    5:         try:
    5:             if self.stream and hasattr(self.stream, "flush"):
    5:                 self.stream.flush()
               finally:
    5:             self.release()
       
    1:     def emit(self, record):
               """
               Emit a record.
       
               If a formatter is specified, it is used to format the record.
               The record is then written to the stream with a trailing newline.  If
               exception information is present, it is formatted using
               traceback.print_exception and appended to the stream.  If the stream
               has an 'encoding' attribute, it is used to determine how to do the
               output to the stream.
               """
    5:         try:
    5:             msg = self.format(record)
    5:             stream = self.stream
                   # issue 35046: merged two stream.writes into one.
    5:             stream.write(msg + self.terminator)
    5:             self.flush()
               except RecursionError:  # See issue 36272
                   raise
               except Exception:
                   self.handleError(record)
       
    1:     def setStream(self, stream):
               """
               Sets the StreamHandler's stream to the specified value,
               if it is different.
       
               Returns the old stream, if the stream was changed, or None
               if it wasn't.
               """
               if stream is self.stream:
                   result = None
               else:
                   result = self.stream
                   self.acquire()
                   try:
                       self.flush()
                       self.stream = stream
                   finally:
                       self.release()
               return result
       
    1:     def __repr__(self):
               level = getLevelName(self.level)
               name = getattr(self.stream, 'name', '')
               #  bpo-36015: name can be an int
               name = str(name)
               if name:
                   name += ' '
               return '<%s %s(%s)>' % (self.__class__.__name__, name, level)
       
       
    2: class FileHandler(StreamHandler):
           """
           A handler class which writes formatted logging records to disk files.
    1:     """
    1:     def __init__(self, filename, mode='a', encoding=None, delay=False):
               """
               Open the specified file and use it as the stream for logging.
               """
               # Issue #27493: add support for Path objects to be passed in
               filename = os.fspath(filename)
               #keep the absolute path, otherwise derived classes which use this
               #may come a cropper when the current directory changes
               self.baseFilename = os.path.abspath(filename)
               self.mode = mode
               self.encoding = encoding
               self.delay = delay
               if delay:
                   #We don't open the stream, but we still need to call the
                   #Handler constructor to set level, formatter, lock etc.
                   Handler.__init__(self)
                   self.stream = None
               else:
                   StreamHandler.__init__(self, self._open())
       
    1:     def close(self):
               """
               Closes the stream.
               """
               self.acquire()
               try:
                   try:
                       if self.stream:
                           try:
                               self.flush()
                           finally:
                               stream = self.stream
                               self.stream = None
                               if hasattr(stream, "close"):
                                   stream.close()
                   finally:
                       # Issue #19523: call unconditionally to
                       # prevent a handler leak when delay is set
                       StreamHandler.close(self)
               finally:
                   self.release()
       
    1:     def _open(self):
               """
               Open the current base file with the (original) mode and encoding.
               Return the resulting stream.
               """
               return open(self.baseFilename, self.mode, encoding=self.encoding)
       
    1:     def emit(self, record):
               """
               Emit a record.
       
               If the stream was not opened because 'delay' was specified in the
               constructor, open it before calling the superclass's emit.
               """
               if self.stream is None:
                   self.stream = self._open()
               StreamHandler.emit(self, record)
       
    1:     def __repr__(self):
               level = getLevelName(self.level)
               return '<%s %s (%s)>' % (self.__class__.__name__, self.baseFilename, level)
       
       
    2: class _StderrHandler(StreamHandler):
           """
           This class is like a StreamHandler using sys.stderr, but always uses
           whatever sys.stderr is currently set to rather than the value of
           sys.stderr at handler construction time.
    1:     """
    1:     def __init__(self, level=NOTSET):
               """
               Initialize the handler.
               """
    1:         Handler.__init__(self, level)
       
    1:     @property
           def stream(self):
               return sys.stderr
       
       
    1: _defaultLastResort = _StderrHandler(WARNING)
    1: lastResort = _defaultLastResort
       
       #---------------------------------------------------------------------------
       #   Manager classes and functions
       #---------------------------------------------------------------------------
       
    2: class PlaceHolder(object):
           """
           PlaceHolder instances are used in the Manager logger hierarchy to take
           the place of nodes for which no loggers have been defined. This class is
           intended for internal use only and not as part of the public API.
    1:     """
    1:     def __init__(self, alogger):
               """
               Initialize with the specified logger being a child of this placeholder.
               """
   18:         self.loggerMap = { alogger : None }
       
    1:     def append(self, alogger):
               """
               Add the specified logger as a child of this placeholder.
               """
   26:         if alogger not in self.loggerMap:
   26:             self.loggerMap[alogger] = None
       
       #
       #   Determine which class to use when instantiating loggers.
       #
       
    1: def setLoggerClass(klass):
           """
           Set the class to be used when instantiating a logger. The class should
           define __init__() such that only a name argument is required, and the
           __init__() should call Logger.__init__()
           """
           if klass != Logger:
               if not issubclass(klass, Logger):
                   raise TypeError("logger not derived from logging.Logger: "
                                   + klass.__name__)
           global _loggerClass
           _loggerClass = klass
       
    1: def getLoggerClass():
           """
           Return the class to be used when instantiating a logger.
           """
           return _loggerClass
       
    2: class Manager(object):
           """
           There is [under normal circumstances] just one Manager instance, which
           holds the hierarchy of loggers.
    1:     """
    1:     def __init__(self, rootnode):
               """
               Initialize the manager with the root node of the logger hierarchy.
               """
    1:         self.root = rootnode
    1:         self.disable = 0
    1:         self.emittedNoHandlerWarning = False
    1:         self.loggerDict = {}
    1:         self.loggerClass = None
    1:         self.logRecordFactory = None
       
    1:     def getLogger(self, name):
               """
               Get a logger with the specified name (channel name), creating it
               if it doesn't yet exist. This name is a dot-separated hierarchical
               name, such as "a", "a.b", "a.b.c" or similar.
       
               If a PlaceHolder existed for the specified name [i.e. the logger
               didn't exist but a child of it did], replace it with the created
               logger and fix up the parent/child references which pointed to the
               placeholder to now point to the logger.
               """
   35:         rv = None
   35:         if not isinstance(name, str):
                   raise TypeError('A logger name must be a string')
   35:         _acquireLock()
   35:         try:
   35:             if name in self.loggerDict:
    4:                 rv = self.loggerDict[name]
    4:                 if isinstance(rv, PlaceHolder):
    4:                     ph = rv
    4:                     rv = (self.loggerClass or _loggerClass)(name)
    4:                     rv.manager = self
    4:                     self.loggerDict[name] = rv
    4:                     self._fixupChildren(ph, rv)
    4:                     self._fixupParents(rv)
                   else:
   31:                 rv = (self.loggerClass or _loggerClass)(name)
   31:                 rv.manager = self
   31:                 self.loggerDict[name] = rv
   31:                 self._fixupParents(rv)
               finally:
   35:             _releaseLock()
   35:         return rv
       
    1:     def setLoggerClass(self, klass):
               """
               Set the class to be used when instantiating a logger with this Manager.
               """
               if klass != Logger:
                   if not issubclass(klass, Logger):
                       raise TypeError("logger not derived from logging.Logger: "
                                       + klass.__name__)
               self.loggerClass = klass
       
    1:     def setLogRecordFactory(self, factory):
               """
               Set the factory to be used when instantiating a log record with this
               Manager.
               """
               self.logRecordFactory = factory
       
    1:     def _fixupParents(self, alogger):
               """
               Ensure that there are either loggers or placeholders all the way
               from the specified logger to the root of the logger hierarchy.
               """
   35:         name = alogger.name
   35:         i = name.rfind(".")
   35:         rv = None
   88:         while (i > 0) and not rv:
   53:             substr = name[:i]
   53:             if substr not in self.loggerDict:
   18:                 self.loggerDict[substr] = PlaceHolder(alogger)
                   else:
   35:                 obj = self.loggerDict[substr]
   35:                 if isinstance(obj, Logger):
    9:                     rv = obj
                       else:
   26:                     assert isinstance(obj, PlaceHolder)
   26:                     obj.append(alogger)
   53:             i = name.rfind(".", 0, i - 1)
   35:         if not rv:
   26:             rv = self.root
   35:         alogger.parent = rv
       
    1:     def _fixupChildren(self, ph, alogger):
               """
               Ensure that children of the placeholder ph are connected to the
               specified logger.
               """
    4:         name = alogger.name
    4:         namelen = len(name)
   16:         for c in ph.loggerMap.keys():
                   #The if means ... if not c.parent.name.startswith(nm)
   12:             if c.parent.name[:namelen] != name:
    8:                 alogger.parent = c.parent
    8:                 c.parent = alogger
       
    1:     def _clear_cache(self):
               """
               Clear the cache for all loggers in loggerDict
               Called when level changes are made
               """
       
    2:         _acquireLock()
   64:         for logger in self.loggerDict.values():
   62:             if isinstance(logger, Logger):
   45:                 logger._cache.clear()
    2:         self.root._cache.clear()
    2:         _releaseLock()
       
       #---------------------------------------------------------------------------
       #   Logger classes and functions
       #---------------------------------------------------------------------------
       
    2: class Logger(Filterer):
           """
           Instances of the Logger class represent a single logging channel. A
           "logging channel" indicates an area of an application. Exactly how an
           "area" is defined is up to the application developer. Since an
           application can have any number of areas, logging channels are identified
           by a unique string. Application areas can be nested (e.g. an area
           of "input processing" might include sub-areas "read CSV files", "read
           XLS files" and "read Gnumeric files"). To cater for this natural nesting,
           channel names are organized into a namespace hierarchy where levels are
           separated by periods, much like the Java or Python package namespace. So
           in the instance given above, channel names might be "input" for the upper
           level, and "input.csv", "input.xls" and "input.gnu" for the sub-levels.
           There is no arbitrary limit to the depth of nesting.
    1:     """
    1:     def __init__(self, name, level=NOTSET):
               """
               Initialize the logger with a name and an optional level.
               """
   36:         Filterer.__init__(self)
   36:         self.name = name
   36:         self.level = _checkLevel(level)
   36:         self.parent = None
   36:         self.propagate = True
   36:         self.handlers = []
   36:         self.disabled = False
   36:         self._cache = {}
       
    1:     def setLevel(self, level):
               """
               Set the logging level of this logger.  level must be an int or a str.
               """
    2:         self.level = _checkLevel(level)
    2:         self.manager._clear_cache()
       
    1:     def debug(self, msg, *args, **kwargs):
               """
               Log 'msg % args' with severity 'DEBUG'.
       
               To pass exception information, use the keyword argument exc_info with
               a true value, e.g.
       
               logger.debug("Houston, we have a %s", "thorny problem", exc_info=1)
               """
    3:         if self.isEnabledFor(DEBUG):
                   self._log(DEBUG, msg, args, **kwargs)
       
    1:     def info(self, msg, *args, **kwargs):
               """
               Log 'msg % args' with severity 'INFO'.
       
               To pass exception information, use the keyword argument exc_info with
               a true value, e.g.
       
               logger.info("Houston, we have a %s", "interesting problem", exc_info=1)
               """
    6:         if self.isEnabledFor(INFO):
    5:             self._log(INFO, msg, args, **kwargs)
       
    1:     def warning(self, msg, *args, **kwargs):
               """
               Log 'msg % args' with severity 'WARNING'.
       
               To pass exception information, use the keyword argument exc_info with
               a true value, e.g.
       
               logger.warning("Houston, we have a %s", "bit of a problem", exc_info=1)
               """
               if self.isEnabledFor(WARNING):
                   self._log(WARNING, msg, args, **kwargs)
       
    1:     def warn(self, msg, *args, **kwargs):
               warnings.warn("The 'warn' method is deprecated, "
                   "use 'warning' instead", DeprecationWarning, 2)
               self.warning(msg, *args, **kwargs)
       
    1:     def error(self, msg, *args, **kwargs):
               """
               Log 'msg % args' with severity 'ERROR'.
       
               To pass exception information, use the keyword argument exc_info with
               a true value, e.g.
       
               logger.error("Houston, we have a %s", "major problem", exc_info=1)
               """
               if self.isEnabledFor(ERROR):
                   self._log(ERROR, msg, args, **kwargs)
       
    1:     def exception(self, msg, *args, exc_info=True, **kwargs):
               """
               Convenience method for logging an ERROR with exception information.
               """
               self.error(msg, *args, exc_info=exc_info, **kwargs)
       
    1:     def critical(self, msg, *args, **kwargs):
               """
               Log 'msg % args' with severity 'CRITICAL'.
       
               To pass exception information, use the keyword argument exc_info with
               a true value, e.g.
       
               logger.critical("Houston, we have a %s", "major disaster", exc_info=1)
               """
               if self.isEnabledFor(CRITICAL):
                   self._log(CRITICAL, msg, args, **kwargs)
       
    1:     fatal = critical
       
    1:     def log(self, level, msg, *args, **kwargs):
               """
               Log 'msg % args' with the integer severity 'level'.
       
               To pass exception information, use the keyword argument exc_info with
               a true value, e.g.
       
               logger.log(level, "We have a %s", "mysterious problem", exc_info=1)
               """
               if not isinstance(level, int):
                   if raiseExceptions:
                       raise TypeError("level must be an integer")
                   else:
                       return
               if self.isEnabledFor(level):
                   self._log(level, msg, args, **kwargs)
       
    1:     def findCaller(self, stack_info=False):
               """
               Find the stack frame of the caller so that we can note the source
               file name, line number and function name.
               """
    5:         f = currentframe()
               #On some versions of IronPython, currentframe() returns None if
               #IronPython isn't run with -X:Frames.
    5:         if f is not None:
    5:             f = f.f_back
    5:         rv = "(unknown file)", 0, "(unknown function)", None
    5:         while hasattr(f, "f_code"):
    5:             co = f.f_code
    5:             filename = os.path.normcase(co.co_filename)
    5:             if filename == _srcfile:
                       f = f.f_back
                       continue
    5:             sinfo = None
    5:             if stack_info:
                       sio = io.StringIO()
                       sio.write('Stack (most recent call last):\n')
                       traceback.print_stack(f, file=sio)
                       sinfo = sio.getvalue()
                       if sinfo[-1] == '\n':
                           sinfo = sinfo[:-1]
                       sio.close()
    5:             rv = (co.co_filename, f.f_lineno, co.co_name, sinfo)
    5:             break
    5:         return rv
       
           def makeRecord(self, name, level, fn, lno, msg, args, exc_info,
    1:                    func=None, extra=None, sinfo=None):
               """
               A factory method which can be overridden in subclasses to create
               specialized LogRecords.
               """
    5:         rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,
    5:                              sinfo)
    5:         if extra is not None:
                   for key in extra:
                       if (key in ["message", "asctime"]) or (key in rv.__dict__):
                           raise KeyError("Attempt to overwrite %r in LogRecord" % key)
                       rv.__dict__[key] = extra[key]
    5:         return rv
       
    1:     def _log(self, level, msg, args, exc_info=None, extra=None, stack_info=False):
               """
               Low-level logging routine which creates a LogRecord and then calls
               all the handlers of this logger to handle the record.
               """
    5:         sinfo = None
    5:         if _srcfile:
                   #IronPython doesn't track Python frames, so findCaller raises an
                   #exception on some versions of IronPython. We trap it here so that
                   #IronPython can use logging.
    5:             try:
    5:                 fn, lno, func, sinfo = self.findCaller(stack_info)
                   except ValueError: # pragma: no cover
                       fn, lno, func = "(unknown file)", 0, "(unknown function)"
               else: # pragma: no cover
                   fn, lno, func = "(unknown file)", 0, "(unknown function)"
    5:         if exc_info:
                   if isinstance(exc_info, BaseException):
                       exc_info = (type(exc_info), exc_info, exc_info.__traceback__)
                   elif not isinstance(exc_info, tuple):
                       exc_info = sys.exc_info()
    5:         record = self.makeRecord(self.name, level, fn, lno, msg, args,
    5:                                  exc_info, func, extra, sinfo)
    5:         self.handle(record)
       
    1:     def handle(self, record):
               """
               Call the handlers for the specified record.
       
               This method is used for unpickled records received from a socket, as
               well as those created locally. Logger-level filtering is applied.
               """
    5:         if (not self.disabled) and self.filter(record):
    5:             self.callHandlers(record)
       
    1:     def addHandler(self, hdlr):
               """
               Add the specified handler to this logger.
               """
    7:         _acquireLock()
    7:         try:
    7:             if not (hdlr in self.handlers):
    7:                 self.handlers.append(hdlr)
               finally:
    7:             _releaseLock()
       
    1:     def removeHandler(self, hdlr):
               """
               Remove the specified handler from this logger.
               """
               _acquireLock()
               try:
                   if hdlr in self.handlers:
                       self.handlers.remove(hdlr)
               finally:
                   _releaseLock()
       
    1:     def hasHandlers(self):
               """
               See if this logger has any handlers configured.
       
               Loop through all handlers for this logger and its parents in the
               logger hierarchy. Return True if a handler was found, else False.
               Stop searching up the hierarchy whenever a logger with the "propagate"
               attribute set to zero is found - that will be the last logger which
               is checked for the existence of handlers.
               """
               c = self
               rv = False
               while c:
                   if c.handlers:
                       rv = True
                       break
                   if not c.propagate:
                       break
                   else:
                       c = c.parent
               return rv
       
    1:     def callHandlers(self, record):
               """
               Pass a record to all relevant handlers.
       
               Loop through all handlers for this logger and its parents in the
               logger hierarchy. If no handler was found, output a one-off error
               message to sys.stderr. Stop searching up the hierarchy whenever a
               logger with the "propagate" attribute set to zero is found - that
               will be the last logger whose handlers are called.
               """
    5:         c = self
    5:         found = 0
   15:         while c:
   15:             for hdlr in c.handlers:
    5:                 found = found + 1
    5:                 if record.levelno >= hdlr.level:
    5:                     hdlr.handle(record)
   10:             if not c.propagate:
                       c = None    #break out
                   else:
   10:                 c = c.parent
    5:         if (found == 0):
                   if lastResort:
                       if record.levelno >= lastResort.level:
                           lastResort.handle(record)
                   elif raiseExceptions and not self.manager.emittedNoHandlerWarning:
                       sys.stderr.write("No handlers could be found for logger"
                                        " \"%s\"\n" % self.name)
                       self.manager.emittedNoHandlerWarning = True
       
    1:     def getEffectiveLevel(self):
               """
               Get the effective level for this logger.
       
               Loop through this logger and its parents in the logger hierarchy,
               looking for a non-zero logging level. Return the first one found.
               """
    6:         logger = self
   17:         while logger:
   17:             if logger.level:
    6:                 return logger.level
   11:             logger = logger.parent
               return NOTSET
       
    1:     def isEnabledFor(self, level):
               """
               Is this logger enabled for level 'level'?
               """
    9:         try:
    9:             return self._cache[level]
    5:         except KeyError:
    5:             _acquireLock()
    5:             if self.manager.disable >= level:
                       is_enabled = self._cache[level] = False
                   else:
    5:                 is_enabled = self._cache[level] = level >= self.getEffectiveLevel()
    5:             _releaseLock()
       
    5:             return is_enabled
       
    1:     def getChild(self, suffix):
               """
               Get a logger which is a descendant to this one.
       
               This is a convenience method, such that
       
               logging.getLogger('abc').getChild('def.ghi')
       
               is the same as
       
               logging.getLogger('abc.def.ghi')
       
               It's useful, for example, when the parent logger is named using
               __name__ rather than a literal string.
               """
               if self.root is not self:
                   suffix = '.'.join((self.name, suffix))
               return self.manager.getLogger(suffix)
       
    1:     def __repr__(self):
               level = getLevelName(self.getEffectiveLevel())
               return '<%s %s (%s)>' % (self.__class__.__name__, self.name, level)
       
    1:     def __reduce__(self):
               # In general, only the root logger will not be accessible via its name.
               # However, the root logger's class has its own __reduce__ method.
               if getLogger(self.name) is not self:
                   import pickle
                   raise pickle.PicklingError('logger cannot be pickled')
               return getLogger, (self.name,)
       
       
    2: class RootLogger(Logger):
           """
           A root logger is not that different to any other logger, except that
           it must have a logging level and there is only one instance of it in
           the hierarchy.
    1:     """
    1:     def __init__(self, level):
               """
               Initialize the logger with the name "root".
               """
    1:         Logger.__init__(self, "root", level)
       
    1:     def __reduce__(self):
               return getLogger, ()
       
    1: _loggerClass = Logger
       
    2: class LoggerAdapter(object):
           """
           An adapter for loggers which makes it easier to specify contextual
           information in logging output.
    1:     """
       
    1:     def __init__(self, logger, extra):
               """
               Initialize the adapter with a logger and a dict-like object which
               provides contextual information. This constructor signature allows
               easy stacking of LoggerAdapters, if so desired.
       
               You can effectively pass keyword arguments as shown in the
               following example:
       
               adapter = LoggerAdapter(someLogger, dict(p1=v1, p2="v2"))
               """
               self.logger = logger
               self.extra = extra
       
    1:     def process(self, msg, kwargs):
               """
               Process the logging message and keyword arguments passed in to
               a logging call to insert contextual information. You can either
               manipulate the message itself, the keyword args or both. Return
               the message and kwargs modified (or not) to suit your needs.
       
               Normally, you'll only need to override this one method in a
               LoggerAdapter subclass for your specific needs.
               """
               kwargs["extra"] = self.extra
               return msg, kwargs
       
           #
           # Boilerplate convenience methods
           #
    1:     def debug(self, msg, *args, **kwargs):
               """
               Delegate a debug call to the underlying logger.
               """
               self.log(DEBUG, msg, *args, **kwargs)
       
    1:     def info(self, msg, *args, **kwargs):
               """
               Delegate an info call to the underlying logger.
               """
               self.log(INFO, msg, *args, **kwargs)
       
    1:     def warning(self, msg, *args, **kwargs):
               """
               Delegate a warning call to the underlying logger.
               """
               self.log(WARNING, msg, *args, **kwargs)
       
    1:     def warn(self, msg, *args, **kwargs):
               warnings.warn("The 'warn' method is deprecated, "
                   "use 'warning' instead", DeprecationWarning, 2)
               self.warning(msg, *args, **kwargs)
       
    1:     def error(self, msg, *args, **kwargs):
               """
               Delegate an error call to the underlying logger.
               """
               self.log(ERROR, msg, *args, **kwargs)
       
    1:     def exception(self, msg, *args, exc_info=True, **kwargs):
               """
               Delegate an exception call to the underlying logger.
               """
               self.log(ERROR, msg, *args, exc_info=exc_info, **kwargs)
       
    1:     def critical(self, msg, *args, **kwargs):
               """
               Delegate a critical call to the underlying logger.
               """
               self.log(CRITICAL, msg, *args, **kwargs)
       
    1:     def log(self, level, msg, *args, **kwargs):
               """
               Delegate a log call to the underlying logger, after adding
               contextual information from this adapter instance.
               """
               if self.isEnabledFor(level):
                   msg, kwargs = self.process(msg, kwargs)
                   self.logger.log(level, msg, *args, **kwargs)
       
    1:     def isEnabledFor(self, level):
               """
               Is this logger enabled for level 'level'?
               """
               return self.logger.isEnabledFor(level)
       
    1:     def setLevel(self, level):
               """
               Set the specified level on the underlying logger.
               """
               self.logger.setLevel(level)
       
    1:     def getEffectiveLevel(self):
               """
               Get the effective level for the underlying logger.
               """
               return self.logger.getEffectiveLevel()
       
    1:     def hasHandlers(self):
               """
               See if the underlying logger has any handlers.
               """
               return self.logger.hasHandlers()
       
    1:     def _log(self, level, msg, args, exc_info=None, extra=None, stack_info=False):
               """
               Low-level log implementation, proxied to allow nested logger adapters.
               """
               return self.logger._log(
                   level,
                   msg,
                   args,
                   exc_info=exc_info,
                   extra=extra,
                   stack_info=stack_info,
               )
       
    1:     @property
           def manager(self):
               return self.logger.manager
       
    1:     @manager.setter
           def manager(self, value):
               self.logger.manager = value
       
    1:     @property
           def name(self):
               return self.logger.name
       
    1:     def __repr__(self):
               logger = self.logger
               level = getLevelName(logger.getEffectiveLevel())
               return '<%s %s (%s)>' % (self.__class__.__name__, logger.name, level)
       
    1: root = RootLogger(WARNING)
    1: Logger.root = root
    1: Logger.manager = Manager(Logger.root)
       
       #---------------------------------------------------------------------------
       # Configuration classes and functions
       #---------------------------------------------------------------------------
       
    1: def basicConfig(**kwargs):
           """
           Do basic configuration for the logging system.
       
           This function does nothing if the root logger already has handlers
           configured. It is a convenience method intended for use by simple scripts
           to do one-shot configuration of the logging package.
       
           The default behaviour is to create a StreamHandler which writes to
           sys.stderr, set a formatter using the BASIC_FORMAT format string, and
           add the handler to the root logger.
       
           A number of optional keyword arguments may be specified, which can alter
           the default behaviour.
       
           filename  Specifies that a FileHandler be created, using the specified
                     filename, rather than a StreamHandler.
           filemode  Specifies the mode to open the file, if filename is specified
                     (if filemode is unspecified, it defaults to 'a').
           format    Use the specified format string for the handler.
           datefmt   Use the specified date/time format.
           style     If a format string is specified, use this to specify the
                     type of format string (possible values '%', '{', '$', for
                     %-formatting, :meth:`str.format` and :class:`string.Template`
                     - defaults to '%').
           level     Set the root logger level to the specified level.
           stream    Use the specified stream to initialize the StreamHandler. Note
                     that this argument is incompatible with 'filename' - if both
                     are present, 'stream' is ignored.
           handlers  If specified, this should be an iterable of already created
                     handlers, which will be added to the root handler. Any handler
                     in the list which does not have a formatter assigned will be
                     assigned the formatter created in this function.
       
           Note that you could specify a stream created using open(filename, mode)
           rather than passing the filename and mode in. However, it should be
           remembered that StreamHandler does not close its stream (since it may be
           using sys.stdout or sys.stderr), whereas FileHandler closes its stream
           when the handler is closed.
       
           .. versionchanged:: 3.2
              Added the ``style`` parameter.
       
           .. versionchanged:: 3.3
              Added the ``handlers`` parameter. A ``ValueError`` is now thrown for
              incompatible arguments (e.g. ``handlers`` specified together with
              ``filename``/``filemode``, or ``filename``/``filemode`` specified
              together with ``stream``, or ``handlers`` specified together with
              ``stream``.
           """
           # Add thread safety in case someone mistakenly calls
           # basicConfig() from multiple threads
           _acquireLock()
           try:
               if len(root.handlers) == 0:
                   handlers = kwargs.pop("handlers", None)
                   if handlers is None:
                       if "stream" in kwargs and "filename" in kwargs:
                           raise ValueError("'stream' and 'filename' should not be "
                                            "specified together")
                   else:
                       if "stream" in kwargs or "filename" in kwargs:
                           raise ValueError("'stream' or 'filename' should not be "
                                            "specified together with 'handlers'")
                   if handlers is None:
                       filename = kwargs.pop("filename", None)
                       mode = kwargs.pop("filemode", 'a')
                       if filename:
                           h = FileHandler(filename, mode)
                       else:
                           stream = kwargs.pop("stream", None)
                           h = StreamHandler(stream)
                       handlers = [h]
                   dfs = kwargs.pop("datefmt", None)
                   style = kwargs.pop("style", '%')
                   if style not in _STYLES:
                       raise ValueError('Style must be one of: %s' % ','.join(
                                        _STYLES.keys()))
                   fs = kwargs.pop("format", _STYLES[style][1])
                   fmt = Formatter(fs, dfs, style)
                   for h in handlers:
                       if h.formatter is None:
                           h.setFormatter(fmt)
                       root.addHandler(h)
                   level = kwargs.pop("level", None)
                   if level is not None:
                       root.setLevel(level)
                   if kwargs:
                       keys = ', '.join(kwargs.keys())
                       raise ValueError('Unrecognised argument(s): %s' % keys)
           finally:
               _releaseLock()
       
       #---------------------------------------------------------------------------
       # Utility functions at module level.
       # Basically delegate everything to the root logger.
       #---------------------------------------------------------------------------
       
    1: def getLogger(name=None):
           """
           Return a logger with the specified name, creating it if necessary.
       
           If no name is specified, return the root logger.
           """
   35:     if name:
   35:         return Logger.manager.getLogger(name)
           else:
               return root
       
    1: def critical(msg, *args, **kwargs):
           """
           Log a message with severity 'CRITICAL' on the root logger. If the logger
           has no handlers, call basicConfig() to add a console handler with a
           pre-defined format.
           """
           if len(root.handlers) == 0:
               basicConfig()
           root.critical(msg, *args, **kwargs)
       
    1: fatal = critical
       
    1: def error(msg, *args, **kwargs):
           """
           Log a message with severity 'ERROR' on the root logger. If the logger has
           no handlers, call basicConfig() to add a console handler with a pre-defined
           format.
           """
           if len(root.handlers) == 0:
               basicConfig()
           root.error(msg, *args, **kwargs)
       
    1: def exception(msg, *args, exc_info=True, **kwargs):
           """
           Log a message with severity 'ERROR' on the root logger, with exception
           information. If the logger has no handlers, basicConfig() is called to add
           a console handler with a pre-defined format.
           """
           error(msg, *args, exc_info=exc_info, **kwargs)
       
    1: def warning(msg, *args, **kwargs):
           """
           Log a message with severity 'WARNING' on the root logger. If the logger has
           no handlers, call basicConfig() to add a console handler with a pre-defined
           format.
           """
           if len(root.handlers) == 0:
               basicConfig()
           root.warning(msg, *args, **kwargs)
       
    1: def warn(msg, *args, **kwargs):
           warnings.warn("The 'warn' function is deprecated, "
               "use 'warning' instead", DeprecationWarning, 2)
           warning(msg, *args, **kwargs)
       
    1: def info(msg, *args, **kwargs):
           """
           Log a message with severity 'INFO' on the root logger. If the logger has
           no handlers, call basicConfig() to add a console handler with a pre-defined
           format.
           """
           if len(root.handlers) == 0:
               basicConfig()
           root.info(msg, *args, **kwargs)
       
    1: def debug(msg, *args, **kwargs):
           """
           Log a message with severity 'DEBUG' on the root logger. If the logger has
           no handlers, call basicConfig() to add a console handler with a pre-defined
           format.
           """
           if len(root.handlers) == 0:
               basicConfig()
           root.debug(msg, *args, **kwargs)
       
    1: def log(level, msg, *args, **kwargs):
           """
           Log 'msg % args' with the integer severity 'level' on the root logger. If
           the logger has no handlers, call basicConfig() to add a console handler
           with a pre-defined format.
           """
           if len(root.handlers) == 0:
               basicConfig()
           root.log(level, msg, *args, **kwargs)
       
    1: def disable(level=CRITICAL):
           """
           Disable all logging calls of severity 'level' and below.
           """
           root.manager.disable = level
           root.manager._clear_cache()
       
    1: def shutdown(handlerList=_handlerList):
           """
           Perform any cleanup actions in the logging system (e.g. flushing
           buffers).
       
           Should be called at application exit.
           """
           for wr in reversed(handlerList[:]):
               #errors might occur, for example, if files are locked
               #we just ignore them if raiseExceptions is not set
               try:
                   h = wr()
                   if h:
                       try:
                           h.acquire()
                           h.flush()
                           h.close()
                       except (OSError, ValueError):
                           # Ignore errors which might be caused
                           # because handlers have been closed but
                           # references to them are still around at
                           # application exit.
                           pass
                       finally:
                           h.release()
               except: # ignore everything, as we're shutting down
                   if raiseExceptions:
                       raise
                   #else, swallow
       
       #Let's try and shutdown automatically on application exit...
    1: import atexit
    1: atexit.register(shutdown)
       
       # Null handler
       
    2: class NullHandler(Handler):
           """
           This handler does nothing. It's intended to be used to avoid the
           "No handlers could be found for logger XXX" one-off warning. This is
           important for library code, which may contain code to log events. If a user
           of the library does not configure logging, the one-off warning might be
           produced; to avoid this, the library developer simply needs to instantiate
           a NullHandler and add it to the top-level logger of the library module or
           package.
    1:     """
    1:     def handle(self, record):
               """Stub."""
       
    1:     def emit(self, record):
               """Stub."""
       
    1:     def createLock(self):
    5:         self.lock = None
       
       # Warnings integration
       
    1: _warnings_showwarning = None
       
    1: def _showwarning(message, category, filename, lineno, file=None, line=None):
           """
           Implementation of showwarnings which redirects to logging, which will first
           check to see if the file parameter is None. If a file is specified, it will
           delegate to the original warnings implementation of showwarning. Otherwise,
           it will call warnings.formatwarning and will log the resulting string to a
           warnings logger named "py.warnings" with level logging.WARNING.
           """
           if file is not None:
               if _warnings_showwarning is not None:
                   _warnings_showwarning(message, category, filename, lineno, file, line)
           else:
               s = warnings.formatwarning(message, category, filename, lineno, line)
               logger = getLogger("py.warnings")
               if not logger.handlers:
                   logger.addHandler(NullHandler())
               logger.warning("%s", s)
       
    1: def captureWarnings(capture):
           """
           If capture is true, redirect all warnings to the logging package.
           If capture is False, ensure that warnings are not redirected to logging
           but to their original destinations.
           """
           global _warnings_showwarning
           if capture:
               if _warnings_showwarning is None:
                   _warnings_showwarning = warnings.showwarning
                   warnings.showwarning = _showwarning
           else:
               if _warnings_showwarning is not None:
                   warnings.showwarning = _warnings_showwarning
                   _warnings_showwarning = None
