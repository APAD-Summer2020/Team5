       # -*- coding: utf-8 -*-
       
       """
       requests.exceptions
       ~~~~~~~~~~~~~~~~~~~
       
       This module contains the set of Requests' exceptions.
    1: """
    1: from .packages.urllib3.exceptions import HTTPError as BaseHTTPError
       
       
    2: class RequestException(IOError):
           """There was an ambiguous exception that occurred while handling your
           request.
    1:     """
       
    1:     def __init__(self, *args, **kwargs):
               """Initialize RequestException with `request` and `response` objects."""
               response = kwargs.pop('response', None)
               self.response = response
               self.request = kwargs.pop('request', None)
               if (response is not None and not self.request and
                       hasattr(response, 'request')):
                   self.request = self.response.request
               super(RequestException, self).__init__(*args, **kwargs)
       
       
    2: class HTTPError(RequestException):
    1:     """An HTTP error occurred."""
       
       
    2: class ConnectionError(RequestException):
    1:     """A Connection error occurred."""
       
       
    2: class ProxyError(ConnectionError):
    1:     """A proxy error occurred."""
       
       
    2: class SSLError(ConnectionError):
    1:     """An SSL error occurred."""
       
       
    2: class Timeout(RequestException):
           """The request timed out.
       
           Catching this error will catch both
           :exc:`~requests.exceptions.ConnectTimeout` and
           :exc:`~requests.exceptions.ReadTimeout` errors.
    1:     """
       
       
    2: class ConnectTimeout(ConnectionError, Timeout):
           """The request timed out while trying to connect to the remote server.
       
           Requests that produced this error are safe to retry.
    1:     """
       
       
    2: class ReadTimeout(Timeout):
    1:     """The server did not send any data in the allotted amount of time."""
       
       
    2: class URLRequired(RequestException):
    1:     """A valid URL is required to make a request."""
       
       
    2: class TooManyRedirects(RequestException):
    1:     """Too many redirects."""
       
       
    2: class MissingSchema(RequestException, ValueError):
    1:     """The URL schema (e.g. http or https) is missing."""
       
       
    2: class InvalidSchema(RequestException, ValueError):
    1:     """See defaults.py for valid schemas."""
       
       
    2: class InvalidURL(RequestException, ValueError):
    1:     """The URL provided was somehow invalid."""
       
       
    2: class InvalidHeader(RequestException, ValueError):
    1:     """The header value provided was somehow invalid."""
       
       
    2: class ChunkedEncodingError(RequestException):
    1:     """The server declared chunked encoding but sent an invalid chunk."""
       
       
    2: class ContentDecodingError(RequestException, BaseHTTPError):
    1:     """Failed to decode response content"""
       
       
    2: class StreamConsumedError(RequestException, TypeError):
    1:     """The content for this response was already consumed"""
       
       
    2: class RetryError(RequestException):
    1:     """Custom retries logic failed"""
       
       
       # Warnings
       
       
    2: class RequestsWarning(Warning):
    1:     """Base warning for Requests."""
    1:     pass
       
       
    2: class FileModeWarning(RequestsWarning, DeprecationWarning):
    1:     """A file was opened in text mode, but Requests determined its binary length."""
    1:     pass
