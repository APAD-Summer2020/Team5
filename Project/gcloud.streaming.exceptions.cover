    1: """Exceptions for generated client libraries."""
       
       
    2: class Error(Exception):
    1:     """Base class for all exceptions."""
       
       
    2: class CommunicationError(Error):
    1:     """Any communication error talking to an API server."""
       
       
    2: class HttpError(CommunicationError):
           """Error making a request. Soon to be HttpError.
       
           :type response: dict
           :param response: headers from the response which returned the error
       
           :type content: bytes
           :param content: payload of the response which returned the error
       
           :type url: string
           :param url: URL of the response which returned the error
    1:     """
    1:     def __init__(self, response, content, url):
               super(HttpError, self).__init__()
               self.response = response
               self.content = content
               self.url = url
       
    1:     def __str__(self):
               content = self.content.decode('ascii', 'replace')
               return 'HttpError accessing <%s>: response: <%s>, content <%s>' % (
                   self.url, self.response, content)
       
    1:     @property
           def status_code(self):
               """Status code for the response.
       
               :rtype: integer
               :returns: the code
               """
               return int(self.response['status'])
       
    1:     @classmethod
           def from_response(cls, http_response):
               """Factory:  construct an exception from a response.
       
               :type http_response: :class:`gcloud.streaming.http_wrapper.Response`
               :param http_response: the response which returned the error
       
               :rtype: :class:`HttpError`
               """
               return cls(http_response.info, http_response.content,
                          http_response.request_url)
       
       
    2: class TransferError(CommunicationError):
    1:     """Errors related to transfers."""
       
       
    2: class TransferRetryError(TransferError):
    1:     """Retryable errors related to transfers."""
       
       
    2: class TransferInvalidError(TransferError):
    1:     """The given transfer is invalid."""
       
       
    2: class RequestError(CommunicationError):
    1:     """The request was not successful."""
       
       
    2: class RetryAfterError(HttpError):
           """The response contained a retry-after header.
       
           :type response: dict
           :param response: headers from the response which returned the error
       
           :type content: bytes
           :param content: payload of the response which returned the error
       
           :type url: string
           :param url: URL of the response which returned the error
       
           :type retry_after: integer
           :param retry_after: seconds to wait before retrying
    1:     """
    1:     def __init__(self, response, content, url, retry_after):
               super(RetryAfterError, self).__init__(response, content, url)
               self.retry_after = int(retry_after)
       
    1:     @classmethod
           def from_response(cls, http_response):
               """Factory:  construct an exception from a response.
       
               :type http_response: :class:`gcloud.streaming.http_wrapper.Response`
               :param http_response: the response which returned the error
       
               :rtype: :class:`RetryAfterError`
               """
               return cls(http_response.info, http_response.content,
                          http_response.request_url, http_response.retry_after)
       
       
    2: class BadStatusCodeError(HttpError):
    1:     """The request completed but returned a bad status code."""
