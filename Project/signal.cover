    1: import _signal
    1: from _signal import *
    1: from functools import wraps as _wraps
    1: from enum import IntEnum as _IntEnum
       
    1: _globals = globals()
       
    1: _IntEnum._convert(
    1:         'Signals', __name__,
    1:         lambda name:
   67:             name.isupper()
   41:             and (name.startswith('SIG') and not name.startswith('SIG_'))
   35:             or name.startswith('CTRL_'))
       
    1: _IntEnum._convert(
    1:         'Handlers', __name__,
   69:         lambda name: name in ('SIG_DFL', 'SIG_IGN'))
       
    1: if 'pthread_sigmask' in _globals:
    1:     _IntEnum._convert(
    1:             'Sigmasks', __name__,
   70:             lambda name: name in ('SIG_BLOCK', 'SIG_UNBLOCK', 'SIG_SETMASK'))
       
       
    1: def _int_to_enum(value, enum_klass):
           """Convert a numeric value to an IntEnum member.
           If it's not a known member, return the numeric value itself.
           """
    1:     try:
    1:         return enum_klass(value)
           except ValueError:
               return value
       
       
    1: def _enum_to_int(value):
           """Convert an IntEnum member to a numeric value.
           If it's not an IntEnum member return the value itself.
           """
    2:     try:
    2:         return int(value)
    1:     except (ValueError, TypeError):
    1:         return value
       
       
    1: @_wraps(_signal.signal)
       def signal(signalnum, handler):
    1:     handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))
    1:     return _int_to_enum(handler, Handlers)
       
       
    1: @_wraps(_signal.getsignal)
       def getsignal(signalnum):
           handler = _signal.getsignal(signalnum)
           return _int_to_enum(handler, Handlers)
       
       
    1: if 'pthread_sigmask' in _globals:
    1:     @_wraps(_signal.pthread_sigmask)
           def pthread_sigmask(how, mask):
               sigs_set = _signal.pthread_sigmask(how, mask)
               return set(_int_to_enum(x, Signals) for x in sigs_set)
    1:     pthread_sigmask.__doc__ = _signal.pthread_sigmask.__doc__
       
       
    1: if 'sigpending' in _globals:
    1:     @_wraps(_signal.sigpending)
           def sigpending():
               sigs = _signal.sigpending()
               return set(_int_to_enum(x, Signals) for x in sigs)
       
       
    1: if 'sigwait' in _globals:
    1:     @_wraps(_signal.sigwait)
           def sigwait(sigset):
               retsig = _signal.sigwait(sigset)
               return _int_to_enum(retsig, Signals)
    1:     sigwait.__doc__ = _signal.sigwait
       
    1: del _globals, _wraps
