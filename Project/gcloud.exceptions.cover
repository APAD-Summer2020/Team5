       # Copyright 2014 Google Inc. All rights reserved.
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
       """Custom exceptions for :mod:`gcloud` package.
       
       See: https://cloud.google.com/storage/docs/json_api/v1/status-codes
    1: """
       
    1: import copy
    1: import json
    1: import six
       
    1: _HTTP_CODE_TO_EXCEPTION = {}  # populated at end of module
       
       
    2: class GCloudError(Exception):
           """Base error class for gcloud errors (abstract).
       
           Each subclass represents a single type of HTTP error response.
    1:     """
    1:     code = None
           """HTTP status code.  Concrete subclasses *must* define.
       
           See: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
           """
       
    1:     def __init__(self, message, errors=()):
               super(GCloudError, self).__init__()
               # suppress deprecation warning under 2.6.x
               self.message = message
               self._errors = errors
       
    1:     def __str__(self):
               return '%d %s' % (self.code, self.message)
       
    1:     @property
           def errors(self):
               """Detailed error information.
       
               :rtype: list(dict)
               :returns: a list of mappings describing each error.
               """
               return [copy.deepcopy(error) for error in self._errors]
       
       
    2: class Redirection(GCloudError):
           """Base for 3xx responses
       
           This class is abstract.
    1:     """
       
       
    2: class MovedPermanently(Redirection):
    1:     """Exception mapping a '301 Moved Permanently' response."""
    1:     code = 301
       
       
    2: class NotModified(Redirection):
    1:     """Exception mapping a '304 Not Modified' response."""
    1:     code = 304
       
       
    2: class TemporaryRedirect(Redirection):
    1:     """Exception mapping a '307 Temporary Redirect' response."""
    1:     code = 307
       
       
    2: class ResumeIncomplete(Redirection):
    1:     """Exception mapping a '308 Resume Incomplete' response."""
    1:     code = 308
       
       
    2: class ClientError(GCloudError):
           """Base for 4xx responses
       
           This class is abstract
    1:     """
       
       
    2: class BadRequest(ClientError):
    1:     """Exception mapping a '400 Bad Request' response."""
    1:     code = 400
       
       
    2: class Unauthorized(ClientError):
    1:     """Exception mapping a '401 Unauthorized' response."""
    1:     code = 401
       
       
    2: class Forbidden(ClientError):
    1:     """Exception mapping a '403 Forbidden' response."""
    1:     code = 403
       
       
    2: class NotFound(ClientError):
    1:     """Exception mapping a '404 Not Found' response."""
    1:     code = 404
       
       
    2: class MethodNotAllowed(ClientError):
    1:     """Exception mapping a '405 Method Not Allowed' response."""
    1:     code = 405
       
       
    2: class Conflict(ClientError):
    1:     """Exception mapping a '409 Conflict' response."""
    1:     code = 409
       
       
    2: class LengthRequired(ClientError):
    1:     """Exception mapping a '411 Length Required' response."""
    1:     code = 411
       
       
    2: class PreconditionFailed(ClientError):
    1:     """Exception mapping a '412 Precondition Failed' response."""
    1:     code = 412
       
       
    2: class RequestRangeNotSatisfiable(ClientError):
    1:     """Exception mapping a '416 Request Range Not Satisfiable' response."""
    1:     code = 416
       
       
    2: class TooManyRequests(ClientError):
    1:     """Exception mapping a '429 Too Many Requests' response."""
    1:     code = 429
       
       
    2: class ServerError(GCloudError):
    1:     """Base for 5xx responses:  (abstract)"""
       
       
    2: class InternalServerError(ServerError):
    1:     """Exception mapping a '500 Internal Server Error' response."""
    1:     code = 500
       
       
    2: class MethodNotImplemented(ServerError):
    1:     """Exception mapping a '501 Not Implemented' response."""
    1:     code = 501
       
       
    2: class ServiceUnavailable(ServerError):
    1:     """Exception mapping a '503 Service Unavailable' response."""
    1:     code = 503
       
       
    1: def make_exception(response, content, error_info=None, use_json=True):
           """Factory:  create exception based on HTTP response code.
       
           :type response: :class:`httplib2.Response` or other HTTP response object
           :param response: A response object that defines a status code as the
                            status attribute.
       
           :type content: string or dictionary
           :param content: The body of the HTTP error response.
       
           :type error_info: string
           :param error_info: Optional string giving extra information about the
                              failed request.
       
           :type use_json: bool
           :param use_json: Flag indicating if ``content`` is expected to be JSON.
       
           :rtype: instance of :class:`GCloudError`, or a concrete subclass.
           :returns: Exception specific to the error response.
           """
           if isinstance(content, six.binary_type):
               content = content.decode('utf-8')
       
           if isinstance(content, six.string_types):
               payload = None
               if use_json:
                   try:
                       payload = json.loads(content)
                   except ValueError:
                       # Expected JSON but received something else.
                       pass
               if payload is None:
                   payload = {'error': {'message': content}}
           else:
               payload = content
       
           message = payload.get('error', {}).get('message', '')
           errors = payload.get('error', {}).get('errors', ())
       
           if error_info is not None:
               message += ' (%s)' % (error_info,)
       
           try:
               klass = _HTTP_CODE_TO_EXCEPTION[response.status]
           except KeyError:
               error = GCloudError(message, errors)
               error.code = response.status
           else:
               error = klass(message, errors)
           return error
       
       
    1: def _walk_subclasses(klass):
           """Recursively walk subclass tree."""
   41:     for sub in klass.__subclasses__():
   20:         yield sub
   37:         for subsub in _walk_subclasses(sub):
   17:             yield subsub
       
       
       # Build the code->exception class mapping.
   21: for _eklass in _walk_subclasses(GCloudError):
   20:     code = getattr(_eklass, 'code', None)
   20:     if code is not None:
   17:         _HTTP_CODE_TO_EXCEPTION[code] = _eklass
