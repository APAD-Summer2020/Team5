       # -*- coding: utf-8 -*-
       
       #   __
       #  /__)  _  _     _   _ _/   _
       # / (   (- (/ (/ (- _)  /  _)
       #          /
       
       """
       Requests HTTP library
       ~~~~~~~~~~~~~~~~~~~~~
       
       Requests is an HTTP library, written in Python, for human beings. Basic GET
       usage:
       
          >>> import requests
          >>> r = requests.get('https://www.python.org')
          >>> r.status_code
          200
          >>> 'Python is a programming language' in r.content
          True
       
       ... or POST:
       
          >>> payload = dict(key1='value1', key2='value2')
          >>> r = requests.post('http://httpbin.org/post', data=payload)
          >>> print(r.text)
          {
            ...
            "form": {
              "key2": "value2",
              "key1": "value1"
            },
            ...
          }
       
       The other HTTP methods are supported - see `requests.api`. Full documentation
       is at <http://python-requests.org>.
       
       :copyright: (c) 2016 by Kenneth Reitz.
       :license: Apache 2.0, see LICENSE for more details.
    1: """
       
    1: __title__ = 'requests'
    1: __version__ = '2.11.1'
    1: __build__ = 0x021101
    1: __author__ = 'Kenneth Reitz'
    1: __license__ = 'Apache 2.0'
    1: __copyright__ = 'Copyright 2016 Kenneth Reitz'
       
       # Attempt to enable urllib3's SNI support, if possible
    1: try:
    1:     from .packages.urllib3.contrib import pyopenssl
           pyopenssl.inject_into_urllib3()
    1: except ImportError:
    1:     pass
       
    1: import warnings
       
       # urllib3's DependencyWarnings should be silenced.
    1: from .packages.urllib3.exceptions import DependencyWarning
    1: warnings.simplefilter('ignore', DependencyWarning)
       
    1: from . import utils
    1: from .models import Request, Response, PreparedRequest
    1: from .api import request, get, head, post, patch, put, delete, options
    1: from .sessions import session, Session
    1: from .status_codes import codes
    1: from .exceptions import (
           RequestException, Timeout, URLRequired,
           TooManyRedirects, HTTPError, ConnectionError,
           FileModeWarning, ConnectTimeout, ReadTimeout
       )
       
       # Set default logging handler to avoid "No handler found" warnings.
    1: import logging
    1: try:  # Python 2.7+
    1:     from logging import NullHandler
       except ImportError:
           class NullHandler(logging.Handler):
               def emit(self, record):
                   pass
       
    1: logging.getLogger(__name__).addHandler(NullHandler())
       
       # FileModeWarnings go off per the default.
    1: warnings.simplefilter('default', FileModeWarning, append=True)
