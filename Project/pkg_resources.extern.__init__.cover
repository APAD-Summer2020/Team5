    1: import sys
       
       
    2: class VendorImporter:
           """
           A PEP 302 meta path importer for finding optionally-vendored
           or otherwise naturally-installed packages from root_name.
    1:     """
       
    1:     def __init__(self, root_name, vendored_names=(), vendor_pkg=None):
    1:         self.root_name = root_name
    1:         self.vendored_names = set(vendored_names)
    1:         self.vendor_pkg = vendor_pkg or root_name.replace('extern', '_vendor')
       
    1:     @property
           def search_path(self):
               """
               Search first the vendor package then as a natural package.
               """
    6:         yield self.vendor_pkg + '.'
               yield ''
       
    1:     def find_module(self, fullname, path=None):
               """
               Return self when fullname starts with root_name and the
               target module is one vendored through this importer.
               """
   35:         root, base, target = fullname.partition(self.root_name + '.')
   35:         if root:
   29:             return
    6:         if not any(map(target.startswith, self.vendored_names)):
                   return
    6:         return self
       
    1:     def load_module(self, fullname):
               """
               Iterate over the search path to locate and load fullname.
               """
    6:         root, base, target = fullname.partition(self.root_name + '.')
    6:         for prefix in self.search_path:
    6:             try:
    6:                 extant = prefix + target
    6:                 __import__(extant)
    6:                 mod = sys.modules[extant]
    6:                 sys.modules[fullname] = mod
    6:                 return mod
                   except ImportError:
                       pass
               else:
                   raise ImportError(
                       "The '{target}' package is required; "
                       "normally this is bundled with this package so if you get "
                       "this warning, consult the packager of your "
                       "distribution.".format(**locals())
                   )
       
    1:     def install(self):
               """
               Install this importer into sys.meta_path if not already present.
               """
    1:         if self not in sys.meta_path:
    1:             sys.meta_path.append(self)
       
       
    1: names = 'packaging', 'pyparsing', 'six', 'appdirs'
    1: VendorImporter(__name__, names).install()
