       # -*- coding: utf-8 -*-
       
       """
       requests.session
       ~~~~~~~~~~~~~~~~
       
       This module provides a Session object to manage and persist settings across
       requests (cookies, auth, proxies).
    1: """
    1: import os
    1: from collections import Mapping
    1: from datetime import datetime
       
    1: from .auth import _basic_auth_str
    1: from .compat import cookielib, OrderedDict, urljoin, urlparse
    1: from .cookies import (
           cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)
    1: from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT
    1: from .hooks import default_hooks, dispatch_hook
    1: from .utils import to_key_val_list, default_headers, to_native_string
    1: from .exceptions import (
           TooManyRedirects, InvalidSchema, ChunkedEncodingError, ContentDecodingError)
    1: from .packages.urllib3._collections import RecentlyUsedContainer
    1: from .structures import CaseInsensitiveDict
       
    1: from .adapters import HTTPAdapter
       
    1: from .utils import (
           requote_uri, get_environ_proxies, get_netrc_auth, should_bypass_proxies,
           get_auth_from_url
       )
       
    1: from .status_codes import codes
       
       # formerly defined here, reexposed here for backward compatibility
    1: from .models import REDIRECT_STATI
       
    1: REDIRECT_CACHE_SIZE = 1000
       
       
    1: def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
           """Determines appropriate setting for a given request, taking into account
           the explicit setting on that request, and the setting in the session. If a
           setting is a dictionary, they will be merged together using `dict_class`
           """
       
    7:     if session_setting is None:
    2:         return request_setting
       
    5:     if request_setting is None:
    2:         return session_setting
       
           # Bypass if not a dictionary (e.g. verify)
           if not (
    3:             isinstance(session_setting, Mapping) and
    3:             isinstance(request_setting, Mapping)
           ):
               return request_setting
       
    3:     merged_setting = dict_class(to_key_val_list(session_setting))
    3:     merged_setting.update(to_key_val_list(request_setting))
       
           # Remove keys that are set to None. Extract keys first to avoid altering
           # the dictionary during iteration.
   11:     none_keys = [k for (k, v) in merged_setting.items() if v is None]
    3:     for key in none_keys:
               del merged_setting[key]
       
    3:     return merged_setting
       
       
    1: def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
           """Properly merges both requests and session hooks.
       
           This is necessary because when request_hooks == {'response': []}, the
           merge breaks Session hooks entirely.
           """
    1:     if session_hooks is None or session_hooks.get('response') == []:
    1:         return request_hooks
       
           if request_hooks is None or request_hooks.get('response') == []:
               return session_hooks
       
           return merge_setting(request_hooks, session_hooks, dict_class)
       
       
    2: class SessionRedirectMixin(object):
           def resolve_redirects(self, resp, req, stream=False, timeout=None,
    1:                           verify=True, cert=None, proxies=None, **adapter_kwargs):
               """Receives a Response. Returns a generator of Responses."""
       
    1:         i = 0
    1:         hist = [] # keep track of history
       
    1:         while resp.is_redirect:
                   prepared_request = req.copy()
       
                   if i > 0:
                       # Update history and keep track of redirects.
                       hist.append(resp)
                       new_hist = list(hist)
                       resp.history = new_hist
       
                   try:
                       resp.content  # Consume socket so it can be released
                   except (ChunkedEncodingError, ContentDecodingError, RuntimeError):
                       resp.raw.read(decode_content=False)
       
                   if i >= self.max_redirects:
                       raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects, response=resp)
       
                   # Release the connection back into the pool.
                   resp.close()
       
                   url = resp.headers['location']
       
                   # Handle redirection without scheme (see: RFC 1808 Section 4)
                   if url.startswith('//'):
                       parsed_rurl = urlparse(resp.url)
                       url = '%s:%s' % (parsed_rurl.scheme, url)
       
                   # The scheme should be lower case...
                   parsed = urlparse(url)
                   url = parsed.geturl()
       
                   # Facilitate relative 'location' headers, as allowed by RFC 7231.
                   # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')
                   # Compliant with RFC3986, we percent encode the url.
                   if not parsed.netloc:
                       url = urljoin(resp.url, requote_uri(url))
                   else:
                       url = requote_uri(url)
       
                   prepared_request.url = to_native_string(url)
                   # Cache the url, unless it redirects to itself.
                   if resp.is_permanent_redirect and req.url != prepared_request.url:
                       self.redirect_cache[req.url] = prepared_request.url
       
                   self.rebuild_method(prepared_request, resp)
       
                   # https://github.com/kennethreitz/requests/issues/1084
                   if resp.status_code not in (codes.temporary_redirect, codes.permanent_redirect):
                       # https://github.com/kennethreitz/requests/issues/3490
                       purged_headers = ('Content-Length', 'Content-Type', 'Transfer-Encoding')
                       for header in purged_headers:
                           prepared_request.headers.pop(header, None)
                       prepared_request.body = None
       
                   headers = prepared_request.headers
                   try:
                       del headers['Cookie']
                   except KeyError:
                       pass
       
                   # Extract any cookies sent on the response to the cookiejar
                   # in the new request. Because we've mutated our copied prepared
                   # request, use the old one that we haven't yet touched.
                   extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)
                   prepared_request._cookies.update(self.cookies)
                   prepared_request.prepare_cookies(prepared_request._cookies)
       
                   # Rebuild auth and proxy information.
                   proxies = self.rebuild_proxies(prepared_request, proxies)
                   self.rebuild_auth(prepared_request, resp)
       
                   # Override the original request.
                   req = prepared_request
       
                   resp = self.send(
                       req,
                       stream=stream,
                       timeout=timeout,
                       verify=verify,
                       cert=cert,
                       proxies=proxies,
                       allow_redirects=False,
                       **adapter_kwargs
                   )
       
                   extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)
       
                   i += 1
                   yield resp
       
    1:     def rebuild_auth(self, prepared_request, response):
               """When being redirected we may want to strip authentication from the
               request to avoid leaking credentials. This method intelligently removes
               and reapplies authentication where possible to avoid credential loss.
               """
               headers = prepared_request.headers
               url = prepared_request.url
       
               if 'Authorization' in headers:
                   # If we get redirected to a new host, we should strip out any
                   # authentication headers.
                   original_parsed = urlparse(response.request.url)
                   redirect_parsed = urlparse(url)
       
                   if (original_parsed.hostname != redirect_parsed.hostname):
                       del headers['Authorization']
       
               # .netrc might have more auth for us on our new host.
               new_auth = get_netrc_auth(url) if self.trust_env else None
               if new_auth is not None:
                   prepared_request.prepare_auth(new_auth)
       
               return
       
    1:     def rebuild_proxies(self, prepared_request, proxies):
               """This method re-evaluates the proxy configuration by considering the
               environment variables. If we are redirected to a URL covered by
               NO_PROXY, we strip the proxy configuration. Otherwise, we set missing
               proxy keys for this URL (in case they were stripped by a previous
               redirect).
       
               This method also replaces the Proxy-Authorization header where
               necessary.
       
               :rtype: dict
               """
               headers = prepared_request.headers
               url = prepared_request.url
               scheme = urlparse(url).scheme
               new_proxies = proxies.copy() if proxies is not None else {}
       
               if self.trust_env and not should_bypass_proxies(url):
                   environ_proxies = get_environ_proxies(url)
       
                   proxy = environ_proxies.get('all', environ_proxies.get(scheme))
       
                   if proxy:
                       new_proxies.setdefault(scheme, proxy)
       
               if 'Proxy-Authorization' in headers:
                   del headers['Proxy-Authorization']
       
               try:
                   username, password = get_auth_from_url(new_proxies[scheme])
               except KeyError:
                   username, password = None, None
       
               if username and password:
                   headers['Proxy-Authorization'] = _basic_auth_str(username, password)
       
               return new_proxies
       
    1:     def rebuild_method(self, prepared_request, response):
               """When being redirected we may want to change the method of the request
               based on certain specs or browser behavior.
               """
               method = prepared_request.method
       
               # http://tools.ietf.org/html/rfc7231#section-6.4.4
               if response.status_code == codes.see_other and method != 'HEAD':
                   method = 'GET'
       
               # Do what the browsers do, despite standards...
               # First, turn 302s into GETs.
               if response.status_code == codes.found and method != 'HEAD':
                   method = 'GET'
       
               # Second, if a POST is responded to with a 301, turn it into a GET.
               # This bizarre behaviour is explained in Issue 1704.
               if response.status_code == codes.moved and method == 'POST':
                   method = 'GET'
       
               prepared_request.method = method
       
       
    2: class Session(SessionRedirectMixin):
           """A Requests session.
       
           Provides cookie persistence, connection-pooling, and configuration.
       
           Basic Usage::
       
             >>> import requests
             >>> s = requests.Session()
             >>> s.get('http://httpbin.org/get')
             <Response [200]>
       
           Or as a context manager::
       
             >>> with requests.Session() as s:
             >>>     s.get('http://httpbin.org/get')
             <Response [200]>
    1:     """
       
           __attrs__ = [
    1:         'headers', 'cookies', 'auth', 'proxies', 'hooks', 'params', 'verify',
    1:         'cert', 'prefetch', 'adapters', 'stream', 'trust_env',
    1:         'max_redirects',
           ]
       
    1:     def __init__(self):
       
               #: A case-insensitive dictionary of headers to be sent on each
               #: :class:`Request <Request>` sent from this
               #: :class:`Session <Session>`.
    3:         self.headers = default_headers()
       
               #: Default Authentication tuple or object to attach to
               #: :class:`Request <Request>`.
    3:         self.auth = None
       
               #: Dictionary mapping protocol or protocol and host to the URL of the proxy
               #: (e.g. {'http': 'foo.bar:3128', 'http://host.name': 'foo.bar:4012'}) to
               #: be used on each :class:`Request <Request>`.
    3:         self.proxies = {}
       
               #: Event-handling hooks.
    3:         self.hooks = default_hooks()
       
               #: Dictionary of querystring data to attach to each
               #: :class:`Request <Request>`. The dictionary values may be lists for
               #: representing multivalued query parameters.
    3:         self.params = {}
       
               #: Stream response content default.
    3:         self.stream = False
       
               #: SSL Verification default.
    3:         self.verify = True
       
               #: SSL certificate default.
    3:         self.cert = None
       
               #: Maximum number of redirects allowed. If the request exceeds this
               #: limit, a :class:`TooManyRedirects` exception is raised.
               #: This defaults to requests.models.DEFAULT_REDIRECT_LIMIT, which is
               #: 30.
    3:         self.max_redirects = DEFAULT_REDIRECT_LIMIT
       
               #: Trust environment settings for proxy configuration, default
               #: authentication and similar.
    3:         self.trust_env = True
       
               #: A CookieJar containing all currently outstanding cookies set on this
               #: session. By default it is a
               #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but
               #: may be any other ``cookielib.CookieJar`` compatible object.
    3:         self.cookies = cookiejar_from_dict({})
       
               # Default connection adapters.
    3:         self.adapters = OrderedDict()
    3:         self.mount('https://', HTTPAdapter())
    3:         self.mount('http://', HTTPAdapter())
       
               # Only store 1000 redirects to prevent using infinite memory
    3:         self.redirect_cache = RecentlyUsedContainer(REDIRECT_CACHE_SIZE)
       
    1:     def __enter__(self):
               return self
       
    1:     def __exit__(self, *args):
               self.close()
       
    1:     def prepare_request(self, request):
               """Constructs a :class:`PreparedRequest <PreparedRequest>` for
               transmission and returns it. The :class:`PreparedRequest` has settings
               merged from the :class:`Request <Request>` instance and those of the
               :class:`Session`.
       
               :param request: :class:`Request` instance to prepare with this
                   session's settings.
               :rtype: requests.PreparedRequest
               """
    1:         cookies = request.cookies or {}
       
               # Bootstrap CookieJar.
    1:         if not isinstance(cookies, cookielib.CookieJar):
    1:             cookies = cookiejar_from_dict(cookies)
       
               # Merge with session cookies
    1:         merged_cookies = merge_cookies(
    1:             merge_cookies(RequestsCookieJar(), self.cookies), cookies)
       
               # Set environment's basic authentication if not explicitly set.
    1:         auth = request.auth
    1:         if self.trust_env and not auth and not self.auth:
    1:             auth = get_netrc_auth(request.url)
       
    1:         p = PreparedRequest()
    1:         p.prepare(
    1:             method=request.method.upper(),
    1:             url=request.url,
    1:             files=request.files,
    1:             data=request.data,
    1:             json=request.json,
    1:             headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
    1:             params=merge_setting(request.params, self.params),
    1:             auth=merge_setting(auth, self.auth),
    1:             cookies=merged_cookies,
    1:             hooks=merge_hooks(request.hooks, self.hooks),
               )
    1:         return p
       
           def request(self, method, url,
               params=None,
               data=None,
               headers=None,
               cookies=None,
               files=None,
               auth=None,
               timeout=None,
               allow_redirects=True,
               proxies=None,
               hooks=None,
               stream=None,
               verify=None,
               cert=None,
    1:         json=None):
               """Constructs a :class:`Request <Request>`, prepares it and sends it.
               Returns :class:`Response <Response>` object.
       
               :param method: method for the new :class:`Request` object.
               :param url: URL for the new :class:`Request` object.
               :param params: (optional) Dictionary or bytes to be sent in the query
                   string for the :class:`Request`.
               :param data: (optional) Dictionary, bytes, or file-like object to send
                   in the body of the :class:`Request`.
               :param json: (optional) json to send in the body of the
                   :class:`Request`.
               :param headers: (optional) Dictionary of HTTP Headers to send with the
                   :class:`Request`.
               :param cookies: (optional) Dict or CookieJar object to send with the
                   :class:`Request`.
               :param files: (optional) Dictionary of ``'filename': file-like-objects``
                   for multipart encoding upload.
               :param auth: (optional) Auth tuple or callable to enable
                   Basic/Digest/Custom HTTP Auth.
               :param timeout: (optional) How long to wait for the server to send
                   data before giving up, as a float, or a :ref:`(connect timeout,
                   read timeout) <timeouts>` tuple.
               :type timeout: float or tuple
               :param allow_redirects: (optional) Set to True by default.
               :type allow_redirects: bool
               :param proxies: (optional) Dictionary mapping protocol or protocol and
                   hostname to the URL of the proxy.
               :param stream: (optional) whether to immediately download the response
                   content. Defaults to ``False``.
               :param verify: (optional) whether the SSL cert will be verified.
                   A CA_BUNDLE path can also be provided. Defaults to ``True``.
               :param cert: (optional) if String, path to ssl client cert file (.pem).
                   If Tuple, ('cert', 'key') pair.
               :rtype: requests.Response
               """
               # Create the Request.
    1:         req = Request(
    1:             method = method.upper(),
    1:             url = url,
    1:             headers = headers,
    1:             files = files,
    1:             data = data or {},
    1:             json = json,
    1:             params = params or {},
    1:             auth = auth,
    1:             cookies = cookies,
    1:             hooks = hooks,
               )
    1:         prep = self.prepare_request(req)
       
    1:         proxies = proxies or {}
       
    1:         settings = self.merge_environment_settings(
    1:             prep.url, proxies, stream, verify, cert
               )
       
               # Send the request.
               send_kwargs = {
    1:             'timeout': timeout,
    1:             'allow_redirects': allow_redirects,
               }
    1:         send_kwargs.update(settings)
    1:         resp = self.send(prep, **send_kwargs)
       
    1:         return resp
       
    1:     def get(self, url, **kwargs):
               """Sends a GET request. Returns :class:`Response` object.
       
               :param url: URL for the new :class:`Request` object.
               :param \*\*kwargs: Optional arguments that ``request`` takes.
               :rtype: requests.Response
               """
       
               kwargs.setdefault('allow_redirects', True)
               return self.request('GET', url, **kwargs)
       
    1:     def options(self, url, **kwargs):
               """Sends a OPTIONS request. Returns :class:`Response` object.
       
               :param url: URL for the new :class:`Request` object.
               :param \*\*kwargs: Optional arguments that ``request`` takes.
               :rtype: requests.Response
               """
       
               kwargs.setdefault('allow_redirects', True)
               return self.request('OPTIONS', url, **kwargs)
       
    1:     def head(self, url, **kwargs):
               """Sends a HEAD request. Returns :class:`Response` object.
       
               :param url: URL for the new :class:`Request` object.
               :param \*\*kwargs: Optional arguments that ``request`` takes.
               :rtype: requests.Response
               """
       
               kwargs.setdefault('allow_redirects', False)
               return self.request('HEAD', url, **kwargs)
       
    1:     def post(self, url, data=None, json=None, **kwargs):
               """Sends a POST request. Returns :class:`Response` object.
       
               :param url: URL for the new :class:`Request` object.
               :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
               :param json: (optional) json to send in the body of the :class:`Request`.
               :param \*\*kwargs: Optional arguments that ``request`` takes.
               :rtype: requests.Response
               """
       
               return self.request('POST', url, data=data, json=json, **kwargs)
       
    1:     def put(self, url, data=None, **kwargs):
               """Sends a PUT request. Returns :class:`Response` object.
       
               :param url: URL for the new :class:`Request` object.
               :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
               :param \*\*kwargs: Optional arguments that ``request`` takes.
               :rtype: requests.Response
               """
       
               return self.request('PUT', url, data=data, **kwargs)
       
    1:     def patch(self, url, data=None, **kwargs):
               """Sends a PATCH request. Returns :class:`Response` object.
       
               :param url: URL for the new :class:`Request` object.
               :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
               :param \*\*kwargs: Optional arguments that ``request`` takes.
               :rtype: requests.Response
               """
       
               return self.request('PATCH', url,  data=data, **kwargs)
       
    1:     def delete(self, url, **kwargs):
               """Sends a DELETE request. Returns :class:`Response` object.
       
               :param url: URL for the new :class:`Request` object.
               :param \*\*kwargs: Optional arguments that ``request`` takes.
               :rtype: requests.Response
               """
       
               return self.request('DELETE', url, **kwargs)
       
    1:     def send(self, request, **kwargs):
               """
               Send a given PreparedRequest.
       
               :rtype: requests.Response
               """
               # Set defaults that the hooks can utilize to ensure they always have
               # the correct parameters to reproduce the previous request.
    1:         kwargs.setdefault('stream', self.stream)
    1:         kwargs.setdefault('verify', self.verify)
    1:         kwargs.setdefault('cert', self.cert)
    1:         kwargs.setdefault('proxies', self.proxies)
       
               # It's possible that users might accidentally send a Request object.
               # Guard against that specific failure case.
    1:         if isinstance(request, Request):
                   raise ValueError('You can only send PreparedRequests.')
       
               # Set up variables needed for resolve_redirects and dispatching of hooks
    1:         allow_redirects = kwargs.pop('allow_redirects', True)
    1:         stream = kwargs.get('stream')
    1:         hooks = request.hooks
       
               # Resolve URL in redirect cache, if available.
    1:         if allow_redirects:
    1:             checked_urls = set()
    1:             while request.url in self.redirect_cache:
                       checked_urls.add(request.url)
                       new_url = self.redirect_cache.get(request.url)
                       if new_url in checked_urls:
                           break
                       request.url = new_url
       
               # Get the appropriate adapter to use
    1:         adapter = self.get_adapter(url=request.url)
       
               # Start time (approximately) of the request
    1:         start = datetime.utcnow()
       
               # Send the request
    1:         r = adapter.send(request, **kwargs)
       
               # Total elapsed time of the request (approximately)
    1:         r.elapsed = datetime.utcnow() - start
       
               # Response manipulation hooks
    1:         r = dispatch_hook('response', hooks, r, **kwargs)
       
               # Persist cookies
    1:         if r.history:
       
                   # If the hooks create history then we want those cookies too
                   for resp in r.history:
                       extract_cookies_to_jar(self.cookies, resp.request, resp.raw)
       
    1:         extract_cookies_to_jar(self.cookies, request, r.raw)
       
               # Redirect resolving generator.
    1:         gen = self.resolve_redirects(r, request, **kwargs)
       
               # Resolve redirects if allowed.
    2:         history = [resp for resp in gen] if allow_redirects else []
       
               # Shuffle things around if there's history.
    1:         if history:
                   # Insert the first (original) request at the start
                   history.insert(0, r)
                   # Get the last request made
                   r = history.pop()
                   r.history = history
       
    1:         if not stream:
    1:             r.content
       
    1:         return r
       
    1:     def merge_environment_settings(self, url, proxies, stream, verify, cert):
               """
               Check the environment and merge it with some settings.
       
               :rtype: dict
               """
               # Gather clues from the surrounding environment.
    1:         if self.trust_env:
                   # Set environment's proxies.
    1:             env_proxies = get_environ_proxies(url) or {}
    1:             for (k, v) in env_proxies.items():
                       proxies.setdefault(k, v)
       
                   # Look for requests environment configuration and be compatible
                   # with cURL.
    1:             if verify is True or verify is None:
    1:                 verify = (os.environ.get('REQUESTS_CA_BUNDLE') or
    1:                           os.environ.get('CURL_CA_BUNDLE'))
       
               # Merge all the kwargs.
    1:         proxies = merge_setting(proxies, self.proxies)
    1:         stream = merge_setting(stream, self.stream)
    1:         verify = merge_setting(verify, self.verify)
    1:         cert = merge_setting(cert, self.cert)
       
    1:         return {'verify': verify, 'proxies': proxies, 'stream': stream,
    1:                 'cert': cert}
       
    1:     def get_adapter(self, url):
               """
               Returns the appropriate connection adapter for the given URL.
       
               :rtype: requests.adapters.BaseAdapter
               """
    1:         for (prefix, adapter) in self.adapters.items():
       
    1:             if url.lower().startswith(prefix):
    1:                 return adapter
       
               # Nothing matches :-/
               raise InvalidSchema("No connection adapters were found for '%s'" % url)
       
    1:     def close(self):
               """Closes all adapters and as such the session"""
               for v in self.adapters.values():
                   v.close()
       
    1:     def mount(self, prefix, adapter):
               """Registers a connection adapter to a prefix.
       
               Adapters are sorted in descending order by key length.
               """
    8:         self.adapters[prefix] = adapter
   29:         keys_to_move = [k for k in self.adapters if len(k) < len(prefix)]
       
    9:         for key in keys_to_move:
    1:             self.adapters[key] = self.adapters.pop(key)
       
    1:     def __getstate__(self):
               state = dict((attr, getattr(self, attr, None)) for attr in self.__attrs__)
               state['redirect_cache'] = dict(self.redirect_cache)
               return state
       
    1:     def __setstate__(self, state):
               redirect_cache = state.pop('redirect_cache', {})
               for attr, value in state.items():
                   setattr(self, attr, value)
       
               self.redirect_cache = RecentlyUsedContainer(REDIRECT_CACHE_SIZE)
               for redirect, to in redirect_cache.items():
                   self.redirect_cache[redirect] = to
       
       
    1: def session():
           """
           Returns a :class:`Session` for context-management.
       
           :rtype: Session
           """
       
           return Session()
