       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
       
    1: from __future__ import absolute_import, division, print_function
       
    1: import abc
       
    1: import six
       
    1: from cryptography import utils
       
       
    1: def generate_parameters(generator, key_size, backend):
           return backend.generate_dh_parameters(generator, key_size)
       
       
    2: class DHPrivateNumbers(object):
    1:     def __init__(self, x, public_numbers):
               if not isinstance(x, six.integer_types):
                   raise TypeError("x must be an integer.")
       
               if not isinstance(public_numbers, DHPublicNumbers):
                   raise TypeError("public_numbers must be an instance of "
                                   "DHPublicNumbers.")
       
               self._x = x
               self._public_numbers = public_numbers
       
    1:     def __eq__(self, other):
               if not isinstance(other, DHPrivateNumbers):
                   return NotImplemented
       
               return (
                   self._x == other._x and
                   self._public_numbers == other._public_numbers
               )
       
    1:     def __ne__(self, other):
               return not self == other
       
    1:     def private_key(self, backend):
               return backend.load_dh_private_numbers(self)
       
    1:     public_numbers = utils.read_only_property("_public_numbers")
    1:     x = utils.read_only_property("_x")
       
       
    2: class DHPublicNumbers(object):
    1:     def __init__(self, y, parameter_numbers):
               if not isinstance(y, six.integer_types):
                   raise TypeError("y must be an integer.")
       
               if not isinstance(parameter_numbers, DHParameterNumbers):
                   raise TypeError(
                       "parameters must be an instance of DHParameterNumbers.")
       
               self._y = y
               self._parameter_numbers = parameter_numbers
       
    1:     def __eq__(self, other):
               if not isinstance(other, DHPublicNumbers):
                   return NotImplemented
       
               return (
                   self._y == other._y and
                   self._parameter_numbers == other._parameter_numbers
               )
       
    1:     def __ne__(self, other):
               return not self == other
       
    1:     def public_key(self, backend):
               return backend.load_dh_public_numbers(self)
       
    1:     y = utils.read_only_property("_y")
    1:     parameter_numbers = utils.read_only_property("_parameter_numbers")
       
       
    2: class DHParameterNumbers(object):
    1:     def __init__(self, p, g, q=None):
               if (
                   not isinstance(p, six.integer_types) or
                   not isinstance(g, six.integer_types)
               ):
                   raise TypeError("p and g must be integers")
               if q is not None and not isinstance(q, six.integer_types):
                   raise TypeError("q must be integer or None")
       
               if g < 2:
                   raise ValueError("DH generator must be 2 or greater")
       
               self._p = p
               self._g = g
               self._q = q
       
    1:     def __eq__(self, other):
               if not isinstance(other, DHParameterNumbers):
                   return NotImplemented
       
               return (
                   self._p == other._p and
                   self._g == other._g and
                   self._q == other._q
               )
       
    1:     def __ne__(self, other):
               return not self == other
       
    1:     def parameters(self, backend):
               return backend.load_dh_parameter_numbers(self)
       
    1:     p = utils.read_only_property("_p")
    1:     g = utils.read_only_property("_g")
    1:     q = utils.read_only_property("_q")
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class DHParameters(object):
    1:     @abc.abstractmethod
           def generate_private_key(self):
               """
               Generates and returns a DHPrivateKey.
               """
       
    1:     @abc.abstractmethod
           def parameter_bytes(self, encoding, format):
               """
               Returns the parameters serialized as bytes.
               """
       
    1:     @abc.abstractmethod
           def parameter_numbers(self):
               """
               Returns a DHParameterNumbers.
               """
       
       
    1: DHParametersWithSerialization = DHParameters
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class DHPrivateKey(object):
    1:     @abc.abstractproperty
           def key_size(self):
               """
               The bit length of the prime modulus.
               """
       
    1:     @abc.abstractmethod
           def public_key(self):
               """
               The DHPublicKey associated with this private key.
               """
       
    1:     @abc.abstractmethod
           def parameters(self):
               """
               The DHParameters object associated with this private key.
               """
       
    1:     @abc.abstractmethod
           def exchange(self, peer_public_key):
               """
               Given peer's DHPublicKey, carry out the key exchange and
               return shared key as bytes.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class DHPrivateKeyWithSerialization(DHPrivateKey):
    1:     @abc.abstractmethod
           def private_numbers(self):
               """
               Returns a DHPrivateNumbers.
               """
       
    1:     @abc.abstractmethod
           def private_bytes(self, encoding, format, encryption_algorithm):
               """
               Returns the key serialized as bytes.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class DHPublicKey(object):
    1:     @abc.abstractproperty
           def key_size(self):
               """
               The bit length of the prime modulus.
               """
       
    1:     @abc.abstractmethod
           def parameters(self):
               """
               The DHParameters object associated with this public key.
               """
       
    1:     @abc.abstractmethod
           def public_numbers(self):
               """
               Returns a DHPublicNumbers.
               """
       
    1:     @abc.abstractmethod
           def public_bytes(self, encoding, format):
               """
               Returns the key serialized as bytes.
               """
       
       
    1: DHPublicKeyWithSerialization = DHPublicKey
