       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
       
    1: from __future__ import absolute_import, division, print_function
       
    1: import abc
    1: from enum import Enum
       
    1: import six
       
    1: from cryptography import utils
       
       
    1: def load_pem_private_key(data, password, backend):
    1:     return backend.load_pem_private_key(data, password)
       
       
    1: def load_pem_public_key(data, backend):
           return backend.load_pem_public_key(data)
       
       
    1: def load_pem_parameters(data, backend):
           return backend.load_pem_parameters(data)
       
       
    1: def load_der_private_key(data, password, backend):
           return backend.load_der_private_key(data, password)
       
       
    1: def load_der_public_key(data, backend):
           return backend.load_der_public_key(data)
       
       
    1: def load_der_parameters(data, backend):
           return backend.load_der_parameters(data)
       
       
    2: class Encoding(Enum):
    1:     PEM = "PEM"
    1:     DER = "DER"
    1:     OpenSSH = "OpenSSH"
    1:     Raw = "Raw"
    1:     X962 = "ANSI X9.62"
       
       
    2: class PrivateFormat(Enum):
    1:     PKCS8 = "PKCS8"
    1:     TraditionalOpenSSL = "TraditionalOpenSSL"
    1:     Raw = "Raw"
       
       
    2: class PublicFormat(Enum):
    1:     SubjectPublicKeyInfo = "X.509 subjectPublicKeyInfo with PKCS#1"
    1:     PKCS1 = "Raw PKCS#1"
    1:     OpenSSH = "OpenSSH"
    1:     Raw = "Raw"
    1:     CompressedPoint = "X9.62 Compressed Point"
    1:     UncompressedPoint = "X9.62 Uncompressed Point"
       
       
    2: class ParameterFormat(Enum):
    1:     PKCS3 = "PKCS3"
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class KeySerializationEncryption(object):
    1:     pass
       
       
    2: @utils.register_interface(KeySerializationEncryption)
    1: class BestAvailableEncryption(object):
    1:     def __init__(self, password):
               if not isinstance(password, bytes) or len(password) == 0:
                   raise ValueError("Password must be 1 or more bytes.")
       
               self.password = password
       
       
    2: @utils.register_interface(KeySerializationEncryption)
    1: class NoEncryption(object):
    1:     pass
