       """
       urllib3 - Thread-safe connection pooling and re-using.
    1: """
       
    1: from __future__ import absolute_import
    1: import warnings
       
    1: from .connectionpool import (
           HTTPConnectionPool,
           HTTPSConnectionPool,
           connection_from_url
       )
       
    1: from . import exceptions
    1: from .filepost import encode_multipart_formdata
    1: from .poolmanager import PoolManager, ProxyManager, proxy_from_url
    1: from .response import HTTPResponse
    1: from .util.request import make_headers
    1: from .util.url import get_host
    1: from .util.timeout import Timeout
    1: from .util.retry import Retry
       
       
       # Set default logging handler to avoid "No handler found" warnings.
    1: import logging
    1: try:  # Python 2.7+
    1:     from logging import NullHandler
       except ImportError:
           class NullHandler(logging.Handler):
               def emit(self, record):
                   pass
       
    1: __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'
    1: __license__ = 'MIT'
    1: __version__ = '1.16'
       
       __all__ = (
    1:     'HTTPConnectionPool',
           'HTTPSConnectionPool',
           'PoolManager',
           'ProxyManager',
           'HTTPResponse',
           'Retry',
           'Timeout',
           'add_stderr_logger',
           'connection_from_url',
           'disable_warnings',
           'encode_multipart_formdata',
           'get_host',
           'make_headers',
           'proxy_from_url',
       )
       
    1: logging.getLogger(__name__).addHandler(NullHandler())
       
       
    1: def add_stderr_logger(level=logging.DEBUG):
           """
           Helper for quickly adding a StreamHandler to the logger. Useful for
           debugging.
       
           Returns the handler after adding it.
           """
           # This method needs to be in this __init__.py to get the __name__ correct
           # even if urllib3 is vendored within another package.
           logger = logging.getLogger(__name__)
           handler = logging.StreamHandler()
           handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))
           logger.addHandler(handler)
           logger.setLevel(level)
           logger.debug('Added a stderr logging handler to logger: %s', __name__)
           return handler
       
       # ... Clean up.
    1: del NullHandler
       
       
       # All warning filters *must* be appended unless you're really certain that they
       # shouldn't be: otherwise, it's very hard for users to use most Python
       # mechanisms to silence them.
       # SecurityWarning's always go off by default.
    1: warnings.simplefilter('always', exceptions.SecurityWarning, append=True)
       # SubjectAltNameWarning's should go off once per host
    1: warnings.simplefilter('default', exceptions.SubjectAltNameWarning, append=True)
       # InsecurePlatformWarning's don't vary between requests, so we keep it default.
    1: warnings.simplefilter('default', exceptions.InsecurePlatformWarning,
    1:                       append=True)
       # SNIMissingWarnings should go off only once.
    1: warnings.simplefilter('default', exceptions.SNIMissingWarning, append=True)
       
       
    1: def disable_warnings(category=exceptions.HTTPWarning):
           """
           Helper for quickly disabling all urllib3 warnings.
           """
           warnings.simplefilter('ignore', category)
