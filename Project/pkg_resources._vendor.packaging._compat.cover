       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
    1: from __future__ import absolute_import, division, print_function
       
    1: import sys
       
       
    1: PY2 = sys.version_info[0] == 2
    1: PY3 = sys.version_info[0] == 3
       
       # flake8: noqa
       
    1: if PY3:
    1:     string_types = str,
       else:
           string_types = basestring,
       
       
    1: def with_metaclass(meta, *bases):
           """
           Create a base class with a metaclass.
           """
           # This requires a bit of explanation: the basic idea is to make a dummy
           # metaclass for one level of class instantiation that replaces itself with
           # the actual metaclass.
    2:     class metaclass(meta):
    1:         def __new__(cls, name, this_bases, d):
    1:             return meta(name, bases, d)
    1:     return type.__new__(metaclass, 'temporary_class', (), {})
