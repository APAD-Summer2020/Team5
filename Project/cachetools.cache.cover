    1: from .abc import DefaultMapping
       
       
    2: class _DefaultSize(object):
    1:     def __getitem__(self, _):
               return 1
       
    1:     def __setitem__(self, _, value):
               assert value == 1
       
    1:     def pop(self, _):
               return 1
       
       
    2: class Cache(DefaultMapping):
    1:     """Mutable mapping to serve as a simple cache or cache base class."""
       
    1:     __size = _DefaultSize()
       
    1:     def __init__(self, maxsize, getsizeof=None):
               if getsizeof:
                   self.getsizeof = getsizeof
               if self.getsizeof is not Cache.getsizeof:
                   self.__size = dict()
               self.__data = dict()
               self.__currsize = 0
               self.__maxsize = maxsize
       
    1:     def __repr__(self):
               return '%s(%r, maxsize=%r, currsize=%r)' % (
                   self.__class__.__name__,
                   list(self.__data.items()),
                   self.__maxsize,
                   self.__currsize,
               )
       
    1:     def __getitem__(self, key):
               try:
                   return self.__data[key]
               except KeyError:
                   return self.__missing__(key)
       
    1:     def __setitem__(self, key, value):
               maxsize = self.__maxsize
               size = self.getsizeof(value)
               if size > maxsize:
                   raise ValueError('value too large')
               if key not in self.__data or self.__size[key] < size:
                   while self.__currsize + size > maxsize:
                       self.popitem()
               if key in self.__data:
                   diffsize = size - self.__size[key]
               else:
                   diffsize = size
               self.__data[key] = value
               self.__size[key] = size
               self.__currsize += diffsize
       
    1:     def __delitem__(self, key):
               size = self.__size.pop(key)
               del self.__data[key]
               self.__currsize -= size
       
    1:     def __contains__(self, key):
               return key in self.__data
       
    1:     def __missing__(self, key):
               raise KeyError(key)
       
    1:     def __iter__(self):
               return iter(self.__data)
       
    1:     def __len__(self):
               return len(self.__data)
       
    1:     @property
           def maxsize(self):
               """The maximum size of the cache."""
               return self.__maxsize
       
    1:     @property
           def currsize(self):
               """The current size of the cache."""
               return self.__currsize
       
    1:     @staticmethod
           def getsizeof(value):
               """Return the size of a cache element's value."""
               return 1
