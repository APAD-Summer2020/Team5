       """Record of phased-in incompatible language changes.
       
       Each line is of the form:
       
           FeatureName = "_Feature(" OptionalRelease "," MandatoryRelease ","
                                     CompilerFlag ")"
       
       where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
       of the same form as sys.version_info:
       
           (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
            PY_MINOR_VERSION, # the 1; an int
            PY_MICRO_VERSION, # the 0; an int
            PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
            PY_RELEASE_SERIAL # the 3; an int
           )
       
       OptionalRelease records the first release in which
       
           from __future__ import FeatureName
       
       was accepted.
       
       In the case of MandatoryReleases that have not yet occurred,
       MandatoryRelease predicts the release in which the feature will become part
       of the language.
       
       Else MandatoryRelease records when the feature became part of the language;
       in releases at or after that, modules no longer need
       
           from __future__ import FeatureName
       
       to use the feature in question, but may continue to use such imports.
       
       MandatoryRelease may also be None, meaning that a planned feature got
       dropped.
       
       Instances of class _Feature have two corresponding methods,
       .getOptionalRelease() and .getMandatoryRelease().
       
       CompilerFlag is the (bitfield) flag that should be passed in the fourth
       argument to the builtin function compile() to enable the feature in
       dynamically compiled code.  This flag is stored in the .compiler_flag
       attribute on _Future instances.  These values must match the appropriate
       #defines of CO_xxx flags in Include/compile.h.
       
       No feature line is ever to be deleted from this file.
    1: """
       
       all_feature_names = [
    1:     "nested_scopes",
    1:     "generators",
    1:     "division",
    1:     "absolute_import",
    1:     "with_statement",
    1:     "print_function",
    1:     "unicode_literals",
    1:     "barry_as_FLUFL",
    1:     "generator_stop",
    1:     "annotations",
       ]
       
    1: __all__ = ["all_feature_names"] + all_feature_names
       
       # The CO_xxx symbols are defined here under the same names defined in
       # code.h and used by compile.h, so that an editor search will find them here.
       # However, they're not exported in __all__, because they don't really belong to
       # this module.
    1: CO_NESTED            = 0x0010   # nested_scopes
    1: CO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)
    1: CO_FUTURE_DIVISION   = 0x2000   # division
    1: CO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default
    1: CO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement
    1: CO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function
    1: CO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals
    1: CO_FUTURE_BARRY_AS_BDFL = 0x40000
    1: CO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators
    1: CO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime
       
    2: class _Feature:
    1:     def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):
   10:         self.optional = optionalRelease
   10:         self.mandatory = mandatoryRelease
   10:         self.compiler_flag = compiler_flag
       
    1:     def getOptionalRelease(self):
               """Return first release in which this feature was recognized.
       
               This is a 5-tuple, of the same form as sys.version_info.
               """
       
               return self.optional
       
    1:     def getMandatoryRelease(self):
               """Return release in which this feature will become mandatory.
       
               This is a 5-tuple, of the same form as sys.version_info, or, if
               the feature was dropped, is None.
               """
       
               return self.mandatory
       
    1:     def __repr__(self):
               return "_Feature" + repr((self.optional,
                                         self.mandatory,
                                         self.compiler_flag))
       
    1: nested_scopes = _Feature((2, 1, 0, "beta",  1),
    1:                          (2, 2, 0, "alpha", 0),
    1:                          CO_NESTED)
       
    1: generators = _Feature((2, 2, 0, "alpha", 1),
    1:                       (2, 3, 0, "final", 0),
    1:                       CO_GENERATOR_ALLOWED)
       
    1: division = _Feature((2, 2, 0, "alpha", 2),
    1:                     (3, 0, 0, "alpha", 0),
    1:                     CO_FUTURE_DIVISION)
       
    1: absolute_import = _Feature((2, 5, 0, "alpha", 1),
    1:                            (3, 0, 0, "alpha", 0),
    1:                            CO_FUTURE_ABSOLUTE_IMPORT)
       
    1: with_statement = _Feature((2, 5, 0, "alpha", 1),
    1:                           (2, 6, 0, "alpha", 0),
    1:                           CO_FUTURE_WITH_STATEMENT)
       
    1: print_function = _Feature((2, 6, 0, "alpha", 2),
    1:                           (3, 0, 0, "alpha", 0),
    1:                           CO_FUTURE_PRINT_FUNCTION)
       
    1: unicode_literals = _Feature((2, 6, 0, "alpha", 2),
    1:                             (3, 0, 0, "alpha", 0),
    1:                             CO_FUTURE_UNICODE_LITERALS)
       
    1: barry_as_FLUFL = _Feature((3, 1, 0, "alpha", 2),
    1:                           (3, 9, 0, "alpha", 0),
    1:                           CO_FUTURE_BARRY_AS_BDFL)
       
    1: generator_stop = _Feature((3, 5, 0, "beta", 1),
    1:                           (3, 7, 0, "alpha", 0),
    1:                           CO_FUTURE_GENERATOR_STOP)
       
    1: annotations = _Feature((3, 7, 0, "beta", 1),
    1:                        (4, 0, 0, "alpha", 0),
    1:                        CO_FUTURE_ANNOTATIONS)
