       # Copyright 2017 Google LLC
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
       """Helpers for loading gapic configuration data.
       
       The Google API generator creates supplementary configuration for each RPC
       method to tell the client library how to deal with retries and timeouts.
    1: """
       
    1: import collections
       
    1: import grpc
    1: import six
       
    1: from google.api_core import exceptions
    1: from google.api_core import retry
    1: from google.api_core import timeout
       
       
    1: _MILLIS_PER_SECOND = 1000.0
       
       
    1: def _exception_class_for_grpc_status_name(name):
           """Returns the Google API exception class for a gRPC error code name.
       
           Args:
               name (str): The name of the gRPC status code, for example,
                   ``UNAVAILABLE``.
       
           Returns:
               :func:`type`: The appropriate subclass of
                   :class:`google.api_core.exceptions.GoogleAPICallError`.
           """
   27:     return exceptions.exception_class_for_grpc_status(getattr(grpc.StatusCode, name))
       
       
    1: def _retry_from_retry_config(retry_params, retry_codes, retry_impl=retry.Retry):
           """Creates a Retry object given a gapic retry configuration.
       
           Args:
               retry_params (dict): The retry parameter values, for example::
       
                   {
                       "initial_retry_delay_millis": 1000,
                       "retry_delay_multiplier": 2.5,
                       "max_retry_delay_millis": 120000,
                       "initial_rpc_timeout_millis": 120000,
                       "rpc_timeout_multiplier": 1.0,
                       "max_rpc_timeout_millis": 120000,
                       "total_timeout_millis": 600000
                   }
       
               retry_codes (sequence[str]): The list of retryable gRPC error code
                   names.
       
           Returns:
               google.api_core.retry.Retry: The default retry object for the method.
           """
           exception_classes = [
   57:         _exception_class_for_grpc_status_name(code) for code in retry_codes
           ]
   15:     return retry_impl(
   15:         retry.if_exception_type(*exception_classes),
   15:         initial=(retry_params["initial_retry_delay_millis"] / _MILLIS_PER_SECOND),
   15:         maximum=(retry_params["max_retry_delay_millis"] / _MILLIS_PER_SECOND),
   15:         multiplier=retry_params["retry_delay_multiplier"],
   15:         deadline=retry_params["total_timeout_millis"] / _MILLIS_PER_SECOND,
           )
       
       
    1: def _timeout_from_retry_config(retry_params):
           """Creates a ExponentialTimeout object given a gapic retry configuration.
       
           Args:
               retry_params (dict): The retry parameter values, for example::
       
                   {
                       "initial_retry_delay_millis": 1000,
                       "retry_delay_multiplier": 2.5,
                       "max_retry_delay_millis": 120000,
                       "initial_rpc_timeout_millis": 120000,
                       "rpc_timeout_multiplier": 1.0,
                       "max_rpc_timeout_millis": 120000,
                       "total_timeout_millis": 600000
                   }
       
           Returns:
               google.api_core.retry.ExponentialTimeout: The default time object for
                   the method.
           """
   15:     return timeout.ExponentialTimeout(
   15:         initial=(retry_params["initial_rpc_timeout_millis"] / _MILLIS_PER_SECOND),
   15:         maximum=(retry_params["max_rpc_timeout_millis"] / _MILLIS_PER_SECOND),
   15:         multiplier=retry_params["rpc_timeout_multiplier"],
   15:         deadline=(retry_params["total_timeout_millis"] / _MILLIS_PER_SECOND),
           )
       
       
    1: MethodConfig = collections.namedtuple("MethodConfig", ["retry", "timeout"])
       
       
    1: def parse_method_configs(interface_config, retry_impl=retry.Retry):
           """Creates default retry and timeout objects for each method in a gapic
           interface config.
       
           Args:
               interface_config (Mapping): The interface config section of the full
                   gapic library config. For example, If the full configuration has
                   an interface named ``google.example.v1.ExampleService`` you would
                   pass in just that interface's configuration, for example
                   ``gapic_config['interfaces']['google.example.v1.ExampleService']``.
               retry_impl (Callable): The constructor that creates a retry decorator
                   that will be applied to the method based on method configs.
       
           Returns:
               Mapping[str, MethodConfig]: A mapping of RPC method names to their
                   configuration.
           """
           # Grab all the retry codes
    6:     retry_codes_map = {
               name: retry_codes
    5:         for name, retry_codes in six.iteritems(interface_config.get("retry_codes", {}))
           }
       
           # Grab all of the retry params
    4:     retry_params_map = {
               name: retry_params
    3:         for name, retry_params in six.iteritems(
    1:             interface_config.get("retry_params", {})
               )
           }
       
           # Iterate through all the API methods and create a flat MethodConfig
           # instance for each one.
    1:     method_configs = {}
       
    1:     for method_name, method_params in six.iteritems(
   16:         interface_config.get("methods", {})
           ):
   15:         retry_params_name = method_params.get("retry_params_name")
       
   15:         if retry_params_name is not None:
   15:             retry_params = retry_params_map[retry_params_name]
   15:             retry_ = _retry_from_retry_config(
   15:                 retry_params, retry_codes_map[method_params["retry_codes_name"]], retry_impl
                   )
   15:             timeout_ = _timeout_from_retry_config(retry_params)
       
               # No retry config, so this is a non-retryable method.
               else:
                   retry_ = None
                   timeout_ = timeout.ConstantTimeout(
                       method_params["timeout_millis"] / _MILLIS_PER_SECOND
                   )
       
   15:         method_configs[method_name] = MethodConfig(retry=retry_, timeout=timeout_)
       
    1:     return method_configs
