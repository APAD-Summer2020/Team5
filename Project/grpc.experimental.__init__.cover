       # Copyright 2018 gRPC authors.
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       """gRPC's experimental APIs.
       
       These APIs are subject to be removed during any minor version release.
    1: """
       
    1: import copy
    1: import functools
    1: import sys
    1: import warnings
       
    1: import grpc
       
    1: _EXPERIMENTAL_APIS_USED = set()
       
       
    2: class ChannelOptions(object):
           """Indicates a channel option unique to gRPC Python.
       
            This enumeration is part of an EXPERIMENTAL API.
       
            Attributes:
              SingleThreadedUnaryStream: Perform unary-stream RPCs on a single thread.
    1:     """
    1:     SingleThreadedUnaryStream = "SingleThreadedUnaryStream"
       
       
    2: class UsageError(Exception):
    1:     """Raised by the gRPC library to indicate usage not allowed by the API."""
       
       
    1: _insecure_channel_credentials = object()
       
       
    1: def insecure_channel_credentials():
           """Creates a ChannelCredentials for use with an insecure channel.
       
           THIS IS AN EXPERIMENTAL API.
       
           This is not for use with secure_channel function. Intead, this should be
           used with grpc.unary_unary, grpc.unary_stream, grpc.stream_unary, or
           grpc.stream_stream.
           """
           return grpc.ChannelCredentials(_insecure_channel_credentials)
       
       
    2: class ExperimentalApiWarning(Warning):
    1:     """A warning that an API is experimental."""
       
       
    1: def _warn_experimental(api_name, stack_offset):
           if api_name not in _EXPERIMENTAL_APIS_USED:
               _EXPERIMENTAL_APIS_USED.add(api_name)
               msg = ("'{}' is an experimental API. It is subject to change or ".
                      format(api_name) +
                      "removal between minor releases. Proceed with caution.")
               warnings.warn(msg, ExperimentalApiWarning, stacklevel=2 + stack_offset)
       
       
    1: def experimental_api(f):
       
    4:     @functools.wraps(f)
           def _wrapper(*args, **kwargs):
               _warn_experimental(f.__name__, 1)
               return f(*args, **kwargs)
       
    4:     return _wrapper
       
       
    1: def wrap_server_method_handler(wrapper, handler):
           """Wraps the server method handler function.
       
           The server implementation requires all server handlers being wrapped as
           RpcMethodHandler objects. This helper function ease the pain of writing
           server handler wrappers.
       
           Args:
               wrapper: A wrapper function that takes in a method handler behavior
                 (the actual function) and returns a wrapped function.
               handler: A RpcMethodHandler object to be wrapped.
       
           Returns:
               A newly created RpcMethodHandler.
           """
           if not handler:
               return None
       
           if not handler.request_streaming:
               if not handler.response_streaming:
                   # NOTE(lidiz) _replace is a public API:
                   #   https://docs.python.org/dev/library/collections.html
                   return handler._replace(unary_unary=wrapper(handler.unary_unary))
               else:
                   return handler._replace(unary_stream=wrapper(handler.unary_stream))
           else:
               if not handler.response_streaming:
                   return handler._replace(stream_unary=wrapper(handler.stream_unary))
               else:
                   return handler._replace(
                       stream_stream=wrapper(handler.stream_stream))
       
       
       __all__ = (
    1:     'ChannelOptions',
           'ExperimentalApiWarning',
           'UsageError',
           'insecure_channel_credentials',
           'wrap_server_method_handler',
       )
       
    1: if sys.version_info[0] == 3 and sys.version_info[1] >= 6:
    1:     from grpc._simple_stubs import unary_unary, unary_stream, stream_unary, stream_stream
    1:     __all__ = __all__ + (unary_unary, unary_stream, stream_unary, stream_stream)
