       #
       # This file is part of pyasn1-modules software.
       #
       # Updated by Russ Housley to resolve the TODO regarding the Certificate
       #   Policies Certificate Extension.
       #
       # Copyright (c) 2005-2019, Ilya Etingof <etingof@gmail.com>
       # License: http://snmplabs.com/pyasn1/license.html
       #
       # X.509 message syntax
       #
       # ASN.1 source from:
       # http://www.trl.ibm.com/projects/xml/xss4j/data/asn1/grammars/x509.asn
       # http://www.ietf.org/rfc/rfc2459.txt
       #
       # Sample captures from:
       # http://wiki.wireshark.org/SampleCaptures/
       #
    1: from pyasn1.type import char
    1: from pyasn1.type import constraint
    1: from pyasn1.type import namedtype
    1: from pyasn1.type import namedval
    1: from pyasn1.type import opentype
    1: from pyasn1.type import tag
    1: from pyasn1.type import univ
    1: from pyasn1.type import useful
       
    1: MAX = float('inf')
       
       #
       # PKIX1Explicit88
       #
       
       # Upper Bounds
    1: ub_name = univ.Integer(32768)
    1: ub_common_name = univ.Integer(64)
    1: ub_locality_name = univ.Integer(128)
    1: ub_state_name = univ.Integer(128)
    1: ub_organization_name = univ.Integer(64)
    1: ub_organizational_unit_name = univ.Integer(64)
    1: ub_title = univ.Integer(64)
    1: ub_match = univ.Integer(128)
    1: ub_emailaddress_length = univ.Integer(128)
    1: ub_common_name_length = univ.Integer(64)
    1: ub_country_name_alpha_length = univ.Integer(2)
    1: ub_country_name_numeric_length = univ.Integer(3)
    1: ub_domain_defined_attributes = univ.Integer(4)
    1: ub_domain_defined_attribute_type_length = univ.Integer(8)
    1: ub_domain_defined_attribute_value_length = univ.Integer(128)
    1: ub_domain_name_length = univ.Integer(16)
    1: ub_extension_attributes = univ.Integer(256)
    1: ub_e163_4_number_length = univ.Integer(15)
    1: ub_e163_4_sub_address_length = univ.Integer(40)
    1: ub_generation_qualifier_length = univ.Integer(3)
    1: ub_given_name_length = univ.Integer(16)
    1: ub_initials_length = univ.Integer(5)
    1: ub_integer_options = univ.Integer(256)
    1: ub_numeric_user_id_length = univ.Integer(32)
    1: ub_organization_name_length = univ.Integer(64)
    1: ub_organizational_unit_name_length = univ.Integer(32)
    1: ub_organizational_units = univ.Integer(4)
    1: ub_pds_name_length = univ.Integer(16)
    1: ub_pds_parameter_length = univ.Integer(30)
    1: ub_pds_physical_address_lines = univ.Integer(6)
    1: ub_postal_code_length = univ.Integer(16)
    1: ub_surname_length = univ.Integer(40)
    1: ub_terminal_id_length = univ.Integer(24)
    1: ub_unformatted_address_length = univ.Integer(180)
    1: ub_x121_address_length = univ.Integer(16)
       
       
    2: class UniversalString(char.UniversalString):
    1:     pass
       
       
    2: class BMPString(char.BMPString):
    1:     pass
       
       
    2: class UTF8String(char.UTF8String):
    1:     pass
       
       
    1: id_pkix = univ.ObjectIdentifier('1.3.6.1.5.5.7')
    1: id_pe = univ.ObjectIdentifier('1.3.6.1.5.5.7.1')
    1: id_qt = univ.ObjectIdentifier('1.3.6.1.5.5.7.2')
    1: id_kp = univ.ObjectIdentifier('1.3.6.1.5.5.7.3')
    1: id_ad = univ.ObjectIdentifier('1.3.6.1.5.5.7.48')
       
    1: id_qt_cps = univ.ObjectIdentifier('1.3.6.1.5.5.7.2.1')
    1: id_qt_unotice = univ.ObjectIdentifier('1.3.6.1.5.5.7.2.2')
       
    1: id_ad_ocsp = univ.ObjectIdentifier('1.3.6.1.5.5.7.48.1')
    1: id_ad_caIssuers = univ.ObjectIdentifier('1.3.6.1.5.5.7.48.2')
       
       
       
       
    1: id_at = univ.ObjectIdentifier('2.5.4')
    1: id_at_name = univ.ObjectIdentifier('2.5.4.41')
       # preserve misspelled variable for compatibility
    1: id_at_sutname = id_at_surname = univ.ObjectIdentifier('2.5.4.4')
    1: id_at_givenName = univ.ObjectIdentifier('2.5.4.42')
    1: id_at_initials = univ.ObjectIdentifier('2.5.4.43')
    1: id_at_generationQualifier = univ.ObjectIdentifier('2.5.4.44')
       
       
    2: class X520name(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString',
    1:                             char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),
    1:         namedtype.NamedType('printableString',
    1:                             char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),
    1:         namedtype.NamedType('universalString',
    1:                             char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),
    1:         namedtype.NamedType('utf8String',
    1:                             char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name))),
    1:         namedtype.NamedType('bmpString',
    1:                             char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_name)))
           )
       
       
    1: id_at_commonName = univ.ObjectIdentifier('2.5.4.3')
       
       
    2: class X520CommonName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),
    1:         namedtype.NamedType('printableString', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),
    1:         namedtype.NamedType('universalString', char.UniversalString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),
    1:         namedtype.NamedType('utf8String',
    1:                             char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name))),
    1:         namedtype.NamedType('bmpString',
    1:                             char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_common_name)))
           )
       
       
    1: id_at_localityName = univ.ObjectIdentifier('2.5.4.7')
       
       
    2: class X520LocalityName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),
    1:         namedtype.NamedType('printableString', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),
    1:         namedtype.NamedType('universalString', char.UniversalString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),
    1:         namedtype.NamedType('utf8String',
    1:                             char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name))),
    1:         namedtype.NamedType('bmpString',
    1:                             char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_locality_name)))
           )
       
       
    1: id_at_stateOrProvinceName = univ.ObjectIdentifier('2.5.4.8')
       
       
    2: class X520StateOrProvinceName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString',
    1:                             char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),
    1:         namedtype.NamedType('printableString', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),
    1:         namedtype.NamedType('universalString', char.UniversalString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),
    1:         namedtype.NamedType('utf8String',
    1:                             char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name))),
    1:         namedtype.NamedType('bmpString',
    1:                             char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_state_name)))
           )
       
       
    1: id_at_organizationName = univ.ObjectIdentifier('2.5.4.10')
       
       
    2: class X520OrganizationName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),
    1:         namedtype.NamedType('printableString', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),
    1:         namedtype.NamedType('universalString', char.UniversalString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),
    1:         namedtype.NamedType('utf8String', char.UTF8String().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name))),
    1:         namedtype.NamedType('bmpString', char.BMPString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organization_name)))
           )
       
       
    1: id_at_organizationalUnitName = univ.ObjectIdentifier('2.5.4.11')
       
       
    2: class X520OrganizationalUnitName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),
    1:         namedtype.NamedType('printableString', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),
    1:         namedtype.NamedType('universalString', char.UniversalString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),
    1:         namedtype.NamedType('utf8String', char.UTF8String().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name))),
    1:         namedtype.NamedType('bmpString', char.BMPString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_organizational_unit_name)))
           )
       
       
    1: id_at_title = univ.ObjectIdentifier('2.5.4.12')
       
       
    2: class X520Title(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString',
    1:                             char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),
    1:         namedtype.NamedType('printableString',
    1:                             char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),
    1:         namedtype.NamedType('universalString',
    1:                             char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),
    1:         namedtype.NamedType('utf8String',
    1:                             char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title))),
    1:         namedtype.NamedType('bmpString',
    1:                             char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, ub_title)))
           )
       
       
    1: id_at_dnQualifier = univ.ObjectIdentifier('2.5.4.46')
       
       
    2: class X520dnQualifier(char.PrintableString):
    1:     pass
       
       
    1: id_at_countryName = univ.ObjectIdentifier('2.5.4.6')
       
       
    2: class X520countryName(char.PrintableString):
    1:     subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(2, 2)
       
       
    1: pkcs_9 = univ.ObjectIdentifier('1.2.840.113549.1.9')
       
    1: emailAddress = univ.ObjectIdentifier('1.2.840.113549.1.9.1')
       
       
    2: class Pkcs9email(char.IA5String):
    1:     subtypeSpec = char.IA5String.subtypeSpec + constraint.ValueSizeConstraint(1, ub_emailaddress_length)
       
       
       # ----
       
    2: class DSAPrivateKey(univ.Sequence):
    1:     """PKIX compliant DSA private key structure"""
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('version', univ.Integer(namedValues=namedval.NamedValues(('v1', 0)))),
    1:         namedtype.NamedType('p', univ.Integer()),
    1:         namedtype.NamedType('q', univ.Integer()),
    1:         namedtype.NamedType('g', univ.Integer()),
    1:         namedtype.NamedType('public', univ.Integer()),
    1:         namedtype.NamedType('private', univ.Integer())
           )
       
       
       # ----
       
       
    2: class DirectoryString(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('teletexString',
    1:                             char.TeletexString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),
    1:         namedtype.NamedType('printableString',
    1:                             char.PrintableString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),
    1:         namedtype.NamedType('universalString',
    1:                             char.UniversalString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),
    1:         namedtype.NamedType('utf8String',
    1:                             char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),
    1:         namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),
    1:         namedtype.NamedType('ia5String', char.IA5String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))
               # hm, this should not be here!? XXX
           )
       
       
       # certificate and CRL specific structures begin here
       
    2: class AlgorithmIdentifier(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('algorithm', univ.ObjectIdentifier()),
    1:         namedtype.OptionalNamedType('parameters', univ.Any())
           )
       
       
       
       # Algorithm OIDs and parameter structures
       
    1: pkcs_1 = univ.ObjectIdentifier('1.2.840.113549.1.1')
    1: rsaEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.1')
    1: md2WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.2')
    1: md5WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.4')
    1: sha1WithRSAEncryption = univ.ObjectIdentifier('1.2.840.113549.1.1.5')
    1: id_dsa_with_sha1 = univ.ObjectIdentifier('1.2.840.10040.4.3')
       
       
    2: class Dss_Sig_Value(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('r', univ.Integer()),
    1:         namedtype.NamedType('s', univ.Integer())
           )
       
       
    1: dhpublicnumber = univ.ObjectIdentifier('1.2.840.10046.2.1')
       
       
    2: class ValidationParms(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('seed', univ.BitString()),
    1:         namedtype.NamedType('pgenCounter', univ.Integer())
           )
       
       
    2: class DomainParameters(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('p', univ.Integer()),
    1:         namedtype.NamedType('g', univ.Integer()),
    1:         namedtype.NamedType('q', univ.Integer()),
    1:         namedtype.NamedType('j', univ.Integer()),
    1:         namedtype.OptionalNamedType('validationParms', ValidationParms())
           )
       
       
    1: id_dsa = univ.ObjectIdentifier('1.2.840.10040.4.1')
       
       
    2: class Dss_Parms(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('p', univ.Integer()),
    1:         namedtype.NamedType('q', univ.Integer()),
    1:         namedtype.NamedType('g', univ.Integer())
           )
       
       
       # x400 address syntax starts here
       
    1: teletex_domain_defined_attributes = univ.Integer(6)
       
       
    2: class TeletexDomainDefinedAttribute(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('type', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),
    1:         namedtype.NamedType('value', char.TeletexString())
           )
       
       
    2: class TeletexDomainDefinedAttributes(univ.SequenceOf):
    1:     componentType = TeletexDomainDefinedAttribute()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)
       
       
    1: terminal_type = univ.Integer(23)
       
       
    2: class TerminalType(univ.Integer):
    1:     subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(0, ub_integer_options)
    1:     namedValues = namedval.NamedValues(
    1:         ('telex', 3),
    1:         ('teletelex', 4),
    1:         ('g3-facsimile', 5),
    1:         ('g4-facsimile', 6),
    1:         ('ia5-terminal', 7),
    1:         ('videotex', 8)
           )
       
       
    2: class PresentationAddress(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('pSelector', univ.OctetString().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.OptionalNamedType('sSelector', univ.OctetString().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.OptionalNamedType('tSelector', univ.OctetString().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    1:         namedtype.OptionalNamedType('nAddresses', univ.SetOf(componentType=univ.OctetString()).subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3),
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, MAX))),
           )
       
       
    1: extended_network_address = univ.Integer(22)
       
       
    2: class E163_4_address(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('number', char.NumericString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_number_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.OptionalNamedType('sub-address', char.NumericString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_e163_4_sub_address_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
           )
       
       
    2: class ExtendedNetworkAddress(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('e163-4-address', E163_4_address()),
    1:         namedtype.NamedType('psap-address', PresentationAddress().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))
           )
       
       
    2: class PDSParameter(univ.Set):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('printable-string', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length))),
    1:         namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)))
           )
       
       
    1: local_postal_attributes = univ.Integer(21)
       
       
    2: class LocalPostalAttributes(PDSParameter):
    1:     pass
       
       
    2: class UniquePostalName(PDSParameter):
    1:     pass
       
       
    1: unique_postal_name = univ.Integer(20)
       
    1: poste_restante_address = univ.Integer(19)
       
       
    2: class PosteRestanteAddress(PDSParameter):
    1:     pass
       
       
    1: post_office_box_address = univ.Integer(18)
       
       
    2: class PostOfficeBoxAddress(PDSParameter):
    1:     pass
       
       
    1: street_address = univ.Integer(17)
       
       
    2: class StreetAddress(PDSParameter):
    1:     pass
       
       
    2: class UnformattedPostalAddress(univ.Set):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('printable-address', univ.SequenceOf(componentType=char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_parameter_length)).subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_pds_physical_address_lines)))),
    1:         namedtype.OptionalNamedType('teletex-string', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_unformatted_address_length)))
           )
       
       
    1: physical_delivery_office_name = univ.Integer(10)
       
       
    2: class PhysicalDeliveryOfficeName(PDSParameter):
    1:     pass
       
       
    1: physical_delivery_office_number = univ.Integer(11)
       
       
    2: class PhysicalDeliveryOfficeNumber(PDSParameter):
    1:     pass
       
       
    1: extension_OR_address_components = univ.Integer(12)
       
       
    2: class ExtensionORAddressComponents(PDSParameter):
    1:     pass
       
       
    1: physical_delivery_personal_name = univ.Integer(13)
       
       
    2: class PhysicalDeliveryPersonalName(PDSParameter):
    1:     pass
       
       
    1: physical_delivery_organization_name = univ.Integer(14)
       
       
    2: class PhysicalDeliveryOrganizationName(PDSParameter):
    1:     pass
       
       
    1: extension_physical_delivery_address_components = univ.Integer(15)
       
       
    2: class ExtensionPhysicalDeliveryAddressComponents(PDSParameter):
    1:     pass
       
       
    1: unformatted_postal_address = univ.Integer(16)
       
    1: postal_code = univ.Integer(9)
       
       
    2: class PostalCode(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('numeric-code', char.NumericString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length))),
    1:         namedtype.NamedType('printable-code', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_postal_code_length)))
           )
       
       
    2: class PhysicalDeliveryCountryName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length,
    1:                                                        ub_country_name_numeric_length))),
    1:         namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))
           )
       
       
    2: class PDSName(char.PrintableString):
    1:     subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_pds_name_length)
       
       
    1: physical_delivery_country_name = univ.Integer(8)
       
       
    2: class TeletexOrganizationalUnitName(char.TeletexString):
    1:     subtypeSpec = char.TeletexString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)
       
       
    1: pds_name = univ.Integer(7)
       
    1: teletex_organizational_unit_names = univ.Integer(5)
       
       
    2: class TeletexOrganizationalUnitNames(univ.SequenceOf):
    1:     componentType = TeletexOrganizationalUnitName()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_organizational_units)
       
       
    1: teletex_personal_name = univ.Integer(4)
       
       
    2: class TeletexPersonalName(univ.Set):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('surname', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.OptionalNamedType('given-name', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.OptionalNamedType('initials', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    1:         namedtype.OptionalNamedType('generation-qualifier', char.TeletexString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))
           )
       
       
    1: teletex_organization_name = univ.Integer(3)
       
       
    2: class TeletexOrganizationName(char.TeletexString):
    1:     subtypeSpec = char.TeletexString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organization_name_length)
       
       
    1: teletex_common_name = univ.Integer(2)
       
       
    2: class TeletexCommonName(char.TeletexString):
    1:     subtypeSpec = char.TeletexString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_common_name_length)
       
       
    2: class CommonName(char.PrintableString):
    1:     subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_common_name_length)
       
       
    1: common_name = univ.Integer(1)
       
       
    2: class ExtensionAttribute(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('extension-attribute-type', univ.Integer().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(0, ub_extension_attributes),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.NamedType('extension-attribute-value',
    1:                             univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
           )
       
       
    2: class ExtensionAttributes(univ.SetOf):
    1:     componentType = ExtensionAttribute()
    1:     sizeSpec = univ.SetOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_extension_attributes)
       
       
    2: class BuiltInDomainDefinedAttribute(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('type', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_type_length))),
    1:         namedtype.NamedType('value', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_defined_attribute_value_length)))
           )
       
       
    2: class BuiltInDomainDefinedAttributes(univ.SequenceOf):
    1:     componentType = BuiltInDomainDefinedAttribute()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_domain_defined_attributes)
       
       
    2: class OrganizationalUnitName(char.PrintableString):
    1:     subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organizational_unit_name_length)
       
       
    2: class OrganizationalUnitNames(univ.SequenceOf):
    1:     componentType = OrganizationalUnitName()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, ub_organizational_units)
       
       
    2: class PersonalName(univ.Set):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('surname', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_surname_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.OptionalNamedType('given-name', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_given_name_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.OptionalNamedType('initials', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_initials_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    1:         namedtype.OptionalNamedType('generation-qualifier', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_generation_qualifier_length),
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))
           )
       
       
    2: class NumericUserIdentifier(char.NumericString):
    1:     subtypeSpec = char.NumericString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_numeric_user_id_length)
       
       
    2: class OrganizationName(char.PrintableString):
    1:     subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_organization_name_length)
       
       
    2: class PrivateDomainName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('numeric', char.NumericString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length))),
    1:         namedtype.NamedType('printable', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, ub_domain_name_length)))
           )
       
       
    2: class TerminalIdentifier(char.PrintableString):
    1:     subtypeSpec = char.PrintableString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_terminal_id_length)
       
       
    2: class X121Address(char.NumericString):
    1:     subtypeSpec = char.NumericString.subtypeSpec + constraint.ValueSizeConstraint(1, ub_x121_address_length)
       
       
    2: class NetworkAddress(X121Address):
    1:     pass
       
       
    2: class AdministrationDomainName(univ.Choice):
    1:     tagSet = univ.Choice.tagSet.tagExplicitly(
    1:         tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2)
           )
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('numeric', char.NumericString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length))),
    1:         namedtype.NamedType('printable', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(0, ub_domain_name_length)))
           )
       
       
    2: class CountryName(univ.Choice):
    1:     tagSet = univ.Choice.tagSet.tagExplicitly(
    1:         tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1)
           )
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('x121-dcc-code', char.NumericString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_numeric_length,
    1:                                                        ub_country_name_numeric_length))),
    1:         namedtype.NamedType('iso-3166-alpha2-code', char.PrintableString().subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(ub_country_name_alpha_length, ub_country_name_alpha_length)))
           )
       
       
    2: class BuiltInStandardAttributes(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('country-name', CountryName()),
    1:         namedtype.OptionalNamedType('administration-domain-name', AdministrationDomainName()),
    1:         namedtype.OptionalNamedType('network-address', NetworkAddress().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.OptionalNamedType('terminal-identifier', TerminalIdentifier().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.OptionalNamedType('private-domain-name', PrivateDomainName().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    1:         namedtype.OptionalNamedType('organization-name', OrganizationName().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),
    1:         namedtype.OptionalNamedType('numeric-user-identifier', NumericUserIdentifier().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),
    1:         namedtype.OptionalNamedType('personal-name', PersonalName().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))),
    1:         namedtype.OptionalNamedType('organizational-unit-names', OrganizationalUnitNames().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6)))
           )
       
       
    2: class ORAddress(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('built-in-standard-attributes', BuiltInStandardAttributes()),
    1:         namedtype.OptionalNamedType('built-in-domain-defined-attributes', BuiltInDomainDefinedAttributes()),
    1:         namedtype.OptionalNamedType('extension-attributes', ExtensionAttributes())
           )
       
       
       #
       # PKIX1Implicit88
       #
       
    1: id_ce_invalidityDate = univ.ObjectIdentifier('2.5.29.24')
       
       
    2: class InvalidityDate(useful.GeneralizedTime):
    1:     pass
       
       
    1: id_holdinstruction_none = univ.ObjectIdentifier('2.2.840.10040.2.1')
    1: id_holdinstruction_callissuer = univ.ObjectIdentifier('2.2.840.10040.2.2')
    1: id_holdinstruction_reject = univ.ObjectIdentifier('2.2.840.10040.2.3')
       
    1: holdInstruction = univ.ObjectIdentifier('2.2.840.10040.2')
       
    1: id_ce_holdInstructionCode = univ.ObjectIdentifier('2.5.29.23')
       
       
    2: class HoldInstructionCode(univ.ObjectIdentifier):
    1:     pass
       
       
    1: id_ce_cRLReasons = univ.ObjectIdentifier('2.5.29.21')
       
       
    2: class CRLReason(univ.Enumerated):
    1:     namedValues = namedval.NamedValues(
    1:         ('unspecified', 0),
    1:         ('keyCompromise', 1),
    1:         ('cACompromise', 2),
    1:         ('affiliationChanged', 3),
    1:         ('superseded', 4),
    1:         ('cessationOfOperation', 5),
    1:         ('certificateHold', 6),
    1:         ('removeFromCRL', 8)
           )
       
       
    1: id_ce_cRLNumber = univ.ObjectIdentifier('2.5.29.20')
       
       
    2: class CRLNumber(univ.Integer):
    1:     subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(0, MAX)
       
       
    2: class BaseCRLNumber(CRLNumber):
    1:     pass
       
       
    1: id_kp_serverAuth = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.1')
    1: id_kp_clientAuth = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.2')
    1: id_kp_codeSigning = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.3')
    1: id_kp_emailProtection = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.4')
    1: id_kp_ipsecEndSystem = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.5')
    1: id_kp_ipsecTunnel = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.6')
    1: id_kp_ipsecUser = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.7')
    1: id_kp_timeStamping = univ.ObjectIdentifier('1.3.6.1.5.5.7.3.8')
    1: id_pe_authorityInfoAccess = univ.ObjectIdentifier('1.3.6.1.5.5.7.1.1')
    1: id_ce_extKeyUsage = univ.ObjectIdentifier('2.5.29.37')
       
       
    2: class KeyPurposeId(univ.ObjectIdentifier):
    1:     pass
       
       
    2: class ExtKeyUsageSyntax(univ.SequenceOf):
    1:     componentType = KeyPurposeId()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    2: class ReasonFlags(univ.BitString):
    1:     namedValues = namedval.NamedValues(
    1:         ('unused', 0),
    1:         ('keyCompromise', 1),
    1:         ('cACompromise', 2),
    1:         ('affiliationChanged', 3),
    1:         ('superseded', 4),
    1:         ('cessationOfOperation', 5),
    1:         ('certificateHold', 6)
           )
       
       
    2: class SkipCerts(univ.Integer):
    1:     subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueSizeConstraint(0, MAX)
       
       
    1: id_ce_policyConstraints = univ.ObjectIdentifier('2.5.29.36')
       
       
    2: class PolicyConstraints(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('requireExplicitPolicy', SkipCerts().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    1:         namedtype.OptionalNamedType('inhibitPolicyMapping', SkipCerts().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
           )
       
       
    1: id_ce_basicConstraints = univ.ObjectIdentifier('2.5.29.19')
       
       
    2: class BasicConstraints(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.DefaultedNamedType('cA', univ.Boolean(False)),
    1:         namedtype.OptionalNamedType('pathLenConstraint',
    1:                                     univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, MAX)))
           )
       
       
    1: id_ce_subjectDirectoryAttributes = univ.ObjectIdentifier('2.5.29.9')
       
       
    2: class EDIPartyName(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('nameAssigner', DirectoryString().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.NamedType('partyName',
    1:                             DirectoryString().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
           )
       
       
       
    1: id_ce_deltaCRLIndicator = univ.ObjectIdentifier('2.5.29.27')
       
       
       
    2: class BaseDistance(univ.Integer):
    1:     subtypeSpec = univ.Integer.subtypeSpec + constraint.ValueRangeConstraint(0, MAX)
       
       
    1: id_ce_cRLDistributionPoints = univ.ObjectIdentifier('2.5.29.31')
       
       
    1: id_ce_issuingDistributionPoint = univ.ObjectIdentifier('2.5.29.28')
       
       
       
       
    1: id_ce_nameConstraints = univ.ObjectIdentifier('2.5.29.30')
       
       
    2: class DisplayText(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('visibleString',
    1:                             char.VisibleString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),
    1:         namedtype.NamedType('bmpString', char.BMPString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200))),
    1:         namedtype.NamedType('utf8String', char.UTF8String().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 200)))
           )
       
       
    2: class NoticeReference(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('organization', DisplayText()),
    1:         namedtype.NamedType('noticeNumbers', univ.SequenceOf(componentType=univ.Integer()))
           )
       
       
    2: class UserNotice(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('noticeRef', NoticeReference()),
    1:         namedtype.OptionalNamedType('explicitText', DisplayText())
           )
       
       
    2: class CPSuri(char.IA5String):
    1:     pass
       
       
    2: class PolicyQualifierId(univ.ObjectIdentifier):
    1:     subtypeSpec = univ.ObjectIdentifier.subtypeSpec + constraint.SingleValueConstraint(id_qt_cps, id_qt_unotice)
       
       
    2: class CertPolicyId(univ.ObjectIdentifier):
    1:     pass
       
       
    2: class PolicyQualifierInfo(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('policyQualifierId', PolicyQualifierId()),
    1:         namedtype.NamedType('qualifier', univ.Any())
           )
       
       
    1: id_ce_certificatePolicies = univ.ObjectIdentifier('2.5.29.32')
       
       
    2: class PolicyInformation(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('policyIdentifier', CertPolicyId()),
    1:         namedtype.OptionalNamedType('policyQualifiers', univ.SequenceOf(componentType=PolicyQualifierInfo()).subtype(
    1:             subtypeSpec=constraint.ValueSizeConstraint(1, MAX)))
           )
       
       
    2: class CertificatePolicies(univ.SequenceOf):
    1:     componentType = PolicyInformation()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    1: id_ce_policyMappings = univ.ObjectIdentifier('2.5.29.33')
       
       
    2: class PolicyMapping(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('issuerDomainPolicy', CertPolicyId()),
    1:         namedtype.NamedType('subjectDomainPolicy', CertPolicyId())
           )
       
       
    2: class PolicyMappings(univ.SequenceOf):
    1:     componentType = PolicyMapping()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    1: id_ce_privateKeyUsagePeriod = univ.ObjectIdentifier('2.5.29.16')
       
       
    2: class PrivateKeyUsagePeriod(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('notBefore', useful.GeneralizedTime().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.OptionalNamedType('notAfter', useful.GeneralizedTime().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
           )
       
       
    1: id_ce_keyUsage = univ.ObjectIdentifier('2.5.29.15')
       
       
    2: class KeyUsage(univ.BitString):
    1:     namedValues = namedval.NamedValues(
    1:         ('digitalSignature', 0),
    1:         ('nonRepudiation', 1),
    1:         ('keyEncipherment', 2),
    1:         ('dataEncipherment', 3),
    1:         ('keyAgreement', 4),
    1:         ('keyCertSign', 5),
    1:         ('cRLSign', 6),
    1:         ('encipherOnly', 7),
    1:         ('decipherOnly', 8)
           )
       
       
    1: id_ce = univ.ObjectIdentifier('2.5.29')
       
    1: id_ce_authorityKeyIdentifier = univ.ObjectIdentifier('2.5.29.35')
       
       
    2: class KeyIdentifier(univ.OctetString):
    1:     pass
       
       
    1: id_ce_subjectKeyIdentifier = univ.ObjectIdentifier('2.5.29.14')
       
       
    2: class SubjectKeyIdentifier(KeyIdentifier):
    1:     pass
       
       
    1: id_ce_certificateIssuer = univ.ObjectIdentifier('2.5.29.29')
       
       
    1: id_ce_subjectAltName = univ.ObjectIdentifier('2.5.29.17')
       
       
    1: id_ce_issuerAltName = univ.ObjectIdentifier('2.5.29.18')
       
       
    2: class AttributeValue(univ.Any):
    1:     pass
       
       
    2: class AttributeType(univ.ObjectIdentifier):
    1:     pass
       
    1: certificateAttributesMap = {}
       
       
    2: class AttributeTypeAndValue(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('type', AttributeType()),
    1:         namedtype.NamedType('value', AttributeValue(),
    1:                             openType=opentype.OpenType('type', certificateAttributesMap))
           )
       
       
    2: class Attribute(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('type', AttributeType()),
    1:         namedtype.NamedType('vals', univ.SetOf(componentType=AttributeValue()))
           )
       
       
    2: class SubjectDirectoryAttributes(univ.SequenceOf):
    1:     componentType = Attribute()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    2: class RelativeDistinguishedName(univ.SetOf):
    1:     componentType = AttributeTypeAndValue()
       
       
    2: class RDNSequence(univ.SequenceOf):
    1:     componentType = RelativeDistinguishedName()
       
       
    2: class Name(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('', RDNSequence())
           )
       
    2: class CertificateSerialNumber(univ.Integer):
    1:     pass
       
       
    2: class AnotherName(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('type-id', univ.ObjectIdentifier()),
    1:         namedtype.NamedType('value',
    1:                             univ.Any().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))
           )
       
       
    2: class GeneralName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('otherName',
    1:                             AnotherName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.NamedType('rfc822Name',
    1:                             char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.NamedType('dNSName',
    1:                             char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    1:         namedtype.NamedType('x400Address',
    1:                             ORAddress().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),
    1:         namedtype.NamedType('directoryName',
    1:                             Name().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),
    1:         namedtype.NamedType('ediPartyName',
    1:                             EDIPartyName().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))),
    1:         namedtype.NamedType('uniformResourceIdentifier',
    1:                             char.IA5String().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))),
    1:         namedtype.NamedType('iPAddress', univ.OctetString().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),
    1:         namedtype.NamedType('registeredID', univ.ObjectIdentifier().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 8)))
           )
       
       
    2: class GeneralNames(univ.SequenceOf):
    1:     componentType = GeneralName()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    2: class AccessDescription(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('accessMethod', univ.ObjectIdentifier()),
    1:         namedtype.NamedType('accessLocation', GeneralName())
           )
       
       
    2: class AuthorityInfoAccessSyntax(univ.SequenceOf):
    1:     componentType = AccessDescription()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    2: class AuthorityKeyIdentifier(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('keyIdentifier', KeyIdentifier().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.OptionalNamedType('authorityCertIssuer', GeneralNames().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.OptionalNamedType('authorityCertSerialNumber', CertificateSerialNumber().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))
           )
       
       
    2: class DistributionPointName(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('fullName', GeneralNames().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    1:         namedtype.NamedType('nameRelativeToCRLIssuer', RelativeDistinguishedName().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
           )
       
       
    2: class DistributionPoint(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    1:         namedtype.OptionalNamedType('reasons', ReasonFlags().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.OptionalNamedType('cRLIssuer', GeneralNames().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))
           )
       
       
    2: class CRLDistPointsSyntax(univ.SequenceOf):
    1:     componentType = DistributionPoint()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    2: class IssuingDistributionPoint(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('distributionPoint', DistributionPointName().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    1:         namedtype.NamedType('onlyContainsUserCerts', univ.Boolean(False).subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.NamedType('onlyContainsCACerts', univ.Boolean(False).subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    1:         namedtype.OptionalNamedType('onlySomeReasons', ReasonFlags().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),
    1:         namedtype.NamedType('indirectCRL', univ.Boolean(False).subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))
           )
       
       
    2: class GeneralSubtree(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('base', GeneralName()),
    1:         namedtype.DefaultedNamedType('minimum', BaseDistance(0).subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    1:         namedtype.OptionalNamedType('maximum', BaseDistance().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
           )
       
       
    2: class GeneralSubtrees(univ.SequenceOf):
    1:     componentType = GeneralSubtree()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    2: class NameConstraints(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('permittedSubtrees', GeneralSubtrees().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    1:         namedtype.OptionalNamedType('excludedSubtrees', GeneralSubtrees().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
           )
       
       
    2: class CertificateIssuer(GeneralNames):
    1:     pass
       
       
    2: class SubjectAltName(GeneralNames):
    1:     pass
       
       
    2: class IssuerAltName(GeneralNames):
    1:     pass
       
       
    1: certificateExtensionsMap = {}
       
       
    2: class Extension(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('extnID', univ.ObjectIdentifier()),
    1:         namedtype.DefaultedNamedType('critical', univ.Boolean('False')),
    1:         namedtype.NamedType('extnValue', univ.OctetString(),
    1:                             openType=opentype.OpenType('extnID', certificateExtensionsMap))
           )
       
       
    2: class Extensions(univ.SequenceOf):
    1:     componentType = Extension()
    1:     sizeSpec = univ.SequenceOf.sizeSpec + constraint.ValueSizeConstraint(1, MAX)
       
       
    2: class SubjectPublicKeyInfo(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('algorithm', AlgorithmIdentifier()),
    1:         namedtype.NamedType('subjectPublicKey', univ.BitString())
           )
       
       
    2: class UniqueIdentifier(univ.BitString):
    1:     pass
       
       
    2: class Time(univ.Choice):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('utcTime', useful.UTCTime()),
    1:         namedtype.NamedType('generalTime', useful.GeneralizedTime())
           )
       
       
    2: class Validity(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('notBefore', Time()),
    1:         namedtype.NamedType('notAfter', Time())
           )
       
       
    2: class Version(univ.Integer):
    1:     namedValues = namedval.NamedValues(
    1:         ('v1', 0), ('v2', 1), ('v3', 2)
           )
       
       
    2: class TBSCertificate(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.DefaultedNamedType('version', Version('v1').subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    1:         namedtype.NamedType('serialNumber', CertificateSerialNumber()),
    1:         namedtype.NamedType('signature', AlgorithmIdentifier()),
    1:         namedtype.NamedType('issuer', Name()),
    1:         namedtype.NamedType('validity', Validity()),
    1:         namedtype.NamedType('subject', Name()),
    1:         namedtype.NamedType('subjectPublicKeyInfo', SubjectPublicKeyInfo()),
    1:         namedtype.OptionalNamedType('issuerUniqueID', UniqueIdentifier().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    1:         namedtype.OptionalNamedType('subjectUniqueID', UniqueIdentifier().subtype(
    1:             implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    1:         namedtype.OptionalNamedType('extensions', Extensions().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))
           )
       
       
    2: class Certificate(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('tbsCertificate', TBSCertificate()),
    1:         namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),
    1:         namedtype.NamedType('signatureValue', univ.BitString())
           )
       
       # CRL structures
       
    2: class RevokedCertificate(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('userCertificate', CertificateSerialNumber()),
    1:         namedtype.NamedType('revocationDate', Time()),
    1:         namedtype.OptionalNamedType('crlEntryExtensions', Extensions())
           )
       
       
    2: class TBSCertList(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.OptionalNamedType('version', Version()),
    1:         namedtype.NamedType('signature', AlgorithmIdentifier()),
    1:         namedtype.NamedType('issuer', Name()),
    1:         namedtype.NamedType('thisUpdate', Time()),
    1:         namedtype.OptionalNamedType('nextUpdate', Time()),
    1:         namedtype.OptionalNamedType('revokedCertificates', univ.SequenceOf(componentType=RevokedCertificate())),
    1:         namedtype.OptionalNamedType('crlExtensions', Extensions().subtype(
    1:             explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)))
           )
       
       
    2: class CertificateList(univ.Sequence):
    1:     componentType = namedtype.NamedTypes(
    1:         namedtype.NamedType('tbsCertList', TBSCertList()),
    1:         namedtype.NamedType('signatureAlgorithm', AlgorithmIdentifier()),
    1:         namedtype.NamedType('signature', univ.BitString())
           )
       
       # map of AttributeType -> AttributeValue
       
       _certificateAttributesMapUpdate = {
    1:     id_at_name: X520name(),
    1:     id_at_surname: X520name(),
    1:     id_at_givenName: X520name(),
    1:     id_at_initials: X520name(),
    1:     id_at_generationQualifier: X520name(),
    1:     id_at_commonName: X520CommonName(),
    1:     id_at_localityName: X520LocalityName(),
    1:     id_at_stateOrProvinceName: X520StateOrProvinceName(),
    1:     id_at_organizationName: X520OrganizationName(),
    1:     id_at_organizationalUnitName: X520OrganizationalUnitName(),
    1:     id_at_title: X520Title(),
    1:     id_at_dnQualifier: X520dnQualifier(),
    1:     id_at_countryName: X520countryName(),
    1:     emailAddress: Pkcs9email(),
       }
       
    1: certificateAttributesMap.update(_certificateAttributesMapUpdate)
       
       
       # map of Certificate Extension OIDs to Extensions
       
       _certificateExtensionsMapUpdate = {
    1:     id_ce_authorityKeyIdentifier: AuthorityKeyIdentifier(),
    1:     id_ce_subjectKeyIdentifier: SubjectKeyIdentifier(),
    1:     id_ce_keyUsage: KeyUsage(),
    1:     id_ce_privateKeyUsagePeriod: PrivateKeyUsagePeriod(),
    1:     id_ce_certificatePolicies: CertificatePolicies(),
    1:     id_ce_policyMappings: PolicyMappings(),
    1:     id_ce_subjectAltName: SubjectAltName(),
    1:     id_ce_issuerAltName: IssuerAltName(),
    1:     id_ce_subjectDirectoryAttributes: SubjectDirectoryAttributes(),
    1:     id_ce_basicConstraints: BasicConstraints(),
    1:     id_ce_nameConstraints: NameConstraints(),
    1:     id_ce_policyConstraints: PolicyConstraints(),
    1:     id_ce_extKeyUsage: ExtKeyUsageSyntax(),
    1:     id_ce_cRLDistributionPoints: CRLDistPointsSyntax(),
    1:     id_pe_authorityInfoAccess: AuthorityInfoAccessSyntax(),
    1:     id_ce_cRLNumber: univ.Integer(),
    1:     id_ce_deltaCRLIndicator: BaseCRLNumber(),
    1:     id_ce_issuingDistributionPoint: IssuingDistributionPoint(),
    1:     id_ce_cRLReasons: CRLReason(),
    1:     id_ce_holdInstructionCode: univ.ObjectIdentifier(),
    1:     id_ce_invalidityDate: useful.GeneralizedTime(),
    1:     id_ce_certificateIssuer: GeneralNames(),
       }
       
    1: certificateExtensionsMap.update(_certificateExtensionsMapUpdate)
       
