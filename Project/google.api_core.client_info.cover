       # Copyright 2017 Google LLC
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
       """Helpers for providing client information.
       
       Client information is used to send information about the calling client,
       such as the library and Python version, to API services.
    1: """
       
    1: import platform
       
    1: import pkg_resources
       
    1: _PY_VERSION = platform.python_version()
    1: _API_CORE_VERSION = pkg_resources.get_distribution("google-api-core").version
       
    1: try:
    1:     _GRPC_VERSION = pkg_resources.get_distribution("grpcio").version
       except pkg_resources.DistributionNotFound:  # pragma: NO COVER
           _GRPC_VERSION = None
       
       
    2: class ClientInfo(object):
           """Client information used to generate a user-agent for API calls.
       
           This user-agent information is sent along with API calls to allow the
           receiving service to do analytics on which versions of Python and Google
           libraries are being used.
       
           Args:
               python_version (str): The Python interpreter version, for example,
                   ``'2.7.13'``.
               grpc_version (Optional[str]): The gRPC library version.
               api_core_version (str): The google-api-core library version.
               gapic_version (Optional[str]): The sversion of gapic-generated client
                   library, if the library was generated by gapic.
               client_library_version (Optional[str]): The version of the client
                   library, generally used if the client library was not generated
                   by gapic or if additional functionality was built on top of
                   a gapic client library.
               user_agent (Optional[str]): Prefix to the user agent header. This is
                   used to supply information such as application name or partner tool.
                   Recommended format: ``application-or-tool-ID/major.minor.version``.
    1:     """
       
           def __init__(
               self,
    1:         python_version=_PY_VERSION,
    1:         grpc_version=_GRPC_VERSION,
    1:         api_core_version=_API_CORE_VERSION,
    1:         gapic_version=None,
    1:         client_library_version=None,
    1:         user_agent=None,
           ):
    2:         self.python_version = python_version
    2:         self.grpc_version = grpc_version
    2:         self.api_core_version = api_core_version
    2:         self.gapic_version = gapic_version
    2:         self.client_library_version = client_library_version
    2:         self.user_agent = user_agent
       
    1:     def to_user_agent(self):
               """Returns the user-agent string for this client info."""
       
               # Note: the order here is important as the internal metrics system
               # expects these items to be in specific locations.
    1:         ua = ""
       
    1:         if self.user_agent is not None:
                   ua += "{user_agent} "
       
    1:         ua += "gl-python/{python_version} "
       
    1:         if self.grpc_version is not None:
    1:             ua += "grpc/{grpc_version} "
       
    1:         ua += "gax/{api_core_version} "
       
    1:         if self.gapic_version is not None:
    1:             ua += "gapic/{gapic_version} "
       
    1:         if self.client_library_version is not None:
    1:             ua += "gccl/{client_library_version} "
       
    1:         return ua.format(**self.__dict__).strip()
