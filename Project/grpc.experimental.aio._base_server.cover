       # Copyright 2020 The gRPC Authors
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
    1: """Abstract base classes for server-side classes."""
       
    1: import abc
    1: from typing import Generic, Optional, Sequence
       
    1: import grpc
       
    1: from ._typing import MetadataType, RequestType, ResponseType
       
       
    2: class Server(abc.ABC):
    1:     """Serves RPCs."""
       
    1:     @abc.abstractmethod
           def add_generic_rpc_handlers(
                   self,
    1:             generic_rpc_handlers: Sequence[grpc.GenericRpcHandler]) -> None:
               """Registers GenericRpcHandlers with this Server.
       
               This method is only safe to call before the server is started.
       
               Args:
                 generic_rpc_handlers: A sequence of GenericRpcHandlers that will be
                 used to service RPCs.
               """
       
    1:     @abc.abstractmethod
    1:     def add_insecure_port(self, address: str) -> int:
               """Opens an insecure port for accepting RPCs.
       
               A port is a communication endpoint that used by networking protocols,
               like TCP and UDP. To date, we only support TCP.
       
               This method may only be called before starting the server.
       
               Args:
                 address: The address for which to open a port. If the port is 0,
                   or not specified in the address, then the gRPC runtime will choose a port.
       
               Returns:
                 An integer port on which the server will accept RPC requests.
               """
       
    1:     @abc.abstractmethod
    1:     def add_secure_port(self, address: str,
    1:                         server_credentials: grpc.ServerCredentials) -> int:
               """Opens a secure port for accepting RPCs.
       
               A port is a communication endpoint that used by networking protocols,
               like TCP and UDP. To date, we only support TCP.
       
               This method may only be called before starting the server.
       
               Args:
                 address: The address for which to open a port.
                   if the port is 0, or not specified in the address, then the gRPC
                   runtime will choose a port.
                 server_credentials: A ServerCredentials object.
       
               Returns:
                 An integer port on which the server will accept RPC requests.
               """
       
    1:     @abc.abstractmethod
    1:     async def start(self) -> None:
               """Starts this Server.
       
               This method may only be called once. (i.e. it is not idempotent).
               """
       
    1:     @abc.abstractmethod
    1:     async def stop(self, grace: Optional[float]) -> None:
               """Stops this Server.
       
               This method immediately stops the server from servicing new RPCs in
               all cases.
       
               If a grace period is specified, this method returns immediately and all
               RPCs active at the end of the grace period are aborted. If a grace
               period is not specified (by passing None for grace), all existing RPCs
               are aborted immediately and this method blocks until the last RPC
               handler terminates.
       
               This method is idempotent and may be called at any time. Passing a
               smaller grace value in a subsequent call will have the effect of
               stopping the Server sooner (passing None will have the effect of
               stopping the server immediately). Passing a larger grace value in a
               subsequent call will not have the effect of stopping the server later
               (i.e. the most restrictive grace value is used).
       
               Args:
                 grace: A duration of time in seconds or None.
               """
       
    1:     @abc.abstractmethod
           async def wait_for_termination(self,
    1:                                    timeout: Optional[float] = None) -> bool:
               """Continues current coroutine once the server stops.
       
               This is an EXPERIMENTAL API.
       
               The wait will not consume computational resources during blocking, and
               it will block until one of the two following conditions are met:
       
               1) The server is stopped or terminated;
               2) A timeout occurs if timeout is not `None`.
       
               The timeout argument works in the same way as `threading.Event.wait()`.
               https://docs.python.org/3/library/threading.html#threading.Event.wait
       
               Args:
                 timeout: A floating point number specifying a timeout for the
                   operation in seconds.
       
               Returns:
                 A bool indicates if the operation times out.
               """
       
       
    2: class ServicerContext(Generic[RequestType, ResponseType], abc.ABC):
    1:     """A context object passed to method implementations."""
       
    1:     @abc.abstractmethod
    1:     async def read(self) -> RequestType:
               """Reads one message from the RPC.
       
               Only one read operation is allowed simultaneously.
       
               Returns:
                 A response message of the RPC.
       
               Raises:
                 An RpcError exception if the read failed.
               """
       
    1:     @abc.abstractmethod
    1:     async def write(self, message: ResponseType) -> None:
               """Writes one message to the RPC.
       
               Only one write operation is allowed simultaneously.
       
               Raises:
                 An RpcError exception if the write failed.
               """
       
    1:     @abc.abstractmethod
           async def send_initial_metadata(self,
    1:                                     initial_metadata: MetadataType) -> None:
               """Sends the initial metadata value to the client.
       
               This method need not be called by implementations if they have no
               metadata to add to what the gRPC runtime will transmit.
       
               Args:
                 initial_metadata: The initial :term:`metadata`.
               """
       
    1:     @abc.abstractmethod
    1:     async def abort(self, code: grpc.StatusCode, details: str,
    1:                     trailing_metadata: MetadataType) -> None:
               """Raises an exception to terminate the RPC with a non-OK status.
       
               The code and details passed as arguments will supercede any existing
               ones.
       
               Args:
                 code: A StatusCode object to be sent to the client.
                   It must not be StatusCode.OK.
                 details: A UTF-8-encodable string to be sent to the client upon
                   termination of the RPC.
                 trailing_metadata: A sequence of tuple represents the trailing
                   :term:`metadata`.
       
               Raises:
                 Exception: An exception is always raised to signal the abortion the
                   RPC to the gRPC runtime.
               """
       
    1:     @abc.abstractmethod
           async def set_trailing_metadata(self,
    1:                                     trailing_metadata: MetadataType) -> None:
               """Sends the trailing metadata for the RPC.
       
               This method need not be called by implementations if they have no
               metadata to add to what the gRPC runtime will transmit.
       
               Args:
                 trailing_metadata: The trailing :term:`metadata`.
               """
       
    1:     @abc.abstractmethod
    1:     def invocation_metadata(self) -> Optional[MetadataType]:
               """Accesses the metadata from the sent by the client.
       
               Returns:
                 The invocation :term:`metadata`.
               """
       
    1:     @abc.abstractmethod
    1:     def set_code(self, code: grpc.StatusCode) -> None:
               """Sets the value to be used as status code upon RPC completion.
       
               This method need not be called by method implementations if they wish
               the gRPC runtime to determine the status code of the RPC.
       
               Args:
                 code: A StatusCode object to be sent to the client.
               """
       
    1:     @abc.abstractmethod
    1:     def set_details(self, details: str) -> None:
               """Sets the value to be used the as detail string upon RPC completion.
       
               This method need not be called by method implementations if they have
               no details to transmit.
       
               Args:
                 details: A UTF-8-encodable string to be sent to the client upon
                   termination of the RPC.
               """
       
    1:     @abc.abstractmethod
    1:     def set_compression(self, compression: grpc.Compression) -> None:
               """Set the compression algorithm to be used for the entire call.
       
               This is an EXPERIMENTAL method.
       
               Args:
                 compression: An element of grpc.compression, e.g.
                   grpc.compression.Gzip.
               """
       
    1:     @abc.abstractmethod
    1:     def disable_next_message_compression(self) -> None:
               """Disables compression for the next response message.
       
               This is an EXPERIMENTAL method.
       
               This method will override any compression configuration set during
               server creation or set on the call.
               """
