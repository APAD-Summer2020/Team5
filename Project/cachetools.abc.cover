    1: from abc import abstractmethod
    1: from collections.abc import MutableMapping
       
       
    2: class DefaultMapping(MutableMapping):
       
    1:     __slots__ = ()
       
    1:     @abstractmethod
           def __contains__(self, key):  # pragma: nocover
               return False
       
    1:     @abstractmethod
           def __getitem__(self, key):  # pragma: nocover
               if hasattr(self.__class__, '__missing__'):
                   return self.__class__.__missing__(self, key)
               else:
                   raise KeyError(key)
       
    1:     def get(self, key, default=None):
               if key in self:
                   return self[key]
               else:
                   return default
       
    1:     __marker = object()
       
    1:     def pop(self, key, default=__marker):
               if key in self:
                   value = self[key]
                   del self[key]
               elif default is self.__marker:
                   raise KeyError(key)
               else:
                   value = default
               return value
       
    1:     def setdefault(self, key, default=None):
               if key in self:
                   value = self[key]
               else:
                   self[key] = value = default
               return value
       
       
    1: DefaultMapping.register(dict)
