       # -*- coding: utf-8 -*-
       
       """
       requests.structures
       ~~~~~~~~~~~~~~~~~~~
       
       Data structures that power Requests.
    1: """
       
    1: import collections
       
    1: from .compat import OrderedDict
       
       
    2: class CaseInsensitiveDict(collections.MutableMapping):
           """A case-insensitive ``dict``-like object.
       
           Implements all methods and operations of
           ``collections.MutableMapping`` as well as dict's ``copy``. Also
           provides ``lower_items``.
       
           All keys are expected to be strings. The structure remembers the
           case of the last key to be set, and ``iter(instance)``,
           ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
           will contain case-sensitive keys. However, querying and contains
           testing is case insensitive::
       
               cid = CaseInsensitiveDict()
               cid['Accept'] = 'application/json'
               cid['aCCEPT'] == 'application/json'  # True
               list(cid) == ['Accept']  # True
       
           For example, ``headers['content-encoding']`` will return the
           value of a ``'Content-Encoding'`` response header, regardless
           of how the header name was originally stored.
       
           If the constructor, ``.update``, or equality comparison
           operations are given keys that have equal ``.lower()``s, the
           behavior is undefined.
    1:     """
       
    1:     def __init__(self, data=None, **kwargs):
    7:         self._store = OrderedDict()
    7:         if data is None:
    2:             data = {}
    7:         self.update(data, **kwargs)
       
    1:     def __setitem__(self, key, value):
               # Use the lowercased key for lookups, but store the actual
               # key alongside the value.
   34:         self._store[key.lower()] = (key, value)
       
    1:     def __getitem__(self, key):
   23:         return self._store[key.lower()][1]
       
    1:     def __delitem__(self, key):
               del self._store[key.lower()]
       
    1:     def __iter__(self):
   36:         return (casedkey for casedkey, mappedvalue in self._store.values())
       
    1:     def __len__(self):
    2:         return len(self._store)
       
    1:     def lower_items(self):
               """Like iteritems(), but with all lowercase keys."""
               return (
                   (lowerkey, keyval[1])
                   for (lowerkey, keyval)
                   in self._store.items()
               )
       
    1:     def __eq__(self, other):
               if isinstance(other, collections.Mapping):
                   other = CaseInsensitiveDict(other)
               else:
                   return NotImplemented
               # Compare insensitively
               return dict(self.lower_items()) == dict(other.lower_items())
       
           # Copy is required
    1:     def copy(self):
               return CaseInsensitiveDict(self._store.values())
       
    1:     def __repr__(self):
               return str(dict(self.items()))
       
       
    2: class LookupDict(dict):
    1:     """Dictionary lookup object."""
       
    1:     def __init__(self, name=None):
    1:         self.name = name
    1:         super(LookupDict, self).__init__()
       
    1:     def __repr__(self):
               return '<lookup \'%s\'>' % (self.name)
       
    1:     def __getitem__(self, key):
               # We allow fall-through here, so values default to None
       
               return self.__dict__.get(key, None)
       
    1:     def get(self, key, default=None):
               return self.__dict__.get(key, default)
