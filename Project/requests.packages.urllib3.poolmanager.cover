    1: from __future__ import absolute_import
    1: import collections
    1: import functools
    1: import logging
       
    1: try:  # Python 3
    1:     from urllib.parse import urljoin
       except ImportError:
           from urlparse import urljoin
       
    1: from ._collections import RecentlyUsedContainer
    1: from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool
    1: from .connectionpool import port_by_scheme
    1: from .exceptions import LocationValueError, MaxRetryError, ProxySchemeUnknown
    1: from .request import RequestMethods
    1: from .util.url import parse_url
    1: from .util.retry import Retry
       
       
    1: __all__ = ['PoolManager', 'ProxyManager', 'proxy_from_url']
       
       
    1: log = logging.getLogger(__name__)
       
    1: SSL_KEYWORDS = ('key_file', 'cert_file', 'cert_reqs', 'ca_certs',
                       'ssl_version', 'ca_cert_dir')
       
       # The base fields to use when determining what pool to get a connection from;
       # these do not rely on the ``connection_pool_kw`` and can be determined by the
       # URL and potentially the ``urllib3.connection.port_by_scheme`` dictionary.
       #
       # All custom key schemes should include the fields in this key at a minimum.
    1: BasePoolKey = collections.namedtuple('BasePoolKey', ('scheme', 'host', 'port'))
       
       # The fields to use when determining what pool to get a HTTP and HTTPS
       # connection from. All additional fields must be present in the PoolManager's
       # ``connection_pool_kw`` instance variable.
    1: HTTPPoolKey = collections.namedtuple(
    1:     'HTTPPoolKey', BasePoolKey._fields + ('timeout', 'retries', 'strict',
                                                 'block', 'source_address')
       )
    1: HTTPSPoolKey = collections.namedtuple(
    1:     'HTTPSPoolKey', HTTPPoolKey._fields + SSL_KEYWORDS
       )
       
       
    1: def _default_key_normalizer(key_class, request_context):
           """
           Create a pool key of type ``key_class`` for a request.
       
           According to RFC 3986, both the scheme and host are case-insensitive.
           Therefore, this function normalizes both before constructing the pool
           key for an HTTPS request. If you wish to change this behaviour, provide
           alternate callables to ``key_fn_by_scheme``.
       
           :param key_class:
               The class to use when constructing the key. This should be a namedtuple
               with the ``scheme`` and ``host`` keys at a minimum.
       
           :param request_context:
               A dictionary-like object that contain the context for a request.
               It should contain a key for each field in the :class:`HTTPPoolKey`
           """
    1:     context = {}
   15:     for key in key_class._fields:
   14:         context[key] = request_context.get(key)
    1:     context['scheme'] = context['scheme'].lower()
    1:     context['host'] = context['host'].lower()
    1:     return key_class(**context)
       
       
       # A dictionary that maps a scheme to a callable that creates a pool key.
       # This can be used to alter the way pool keys are constructed, if desired.
       # Each PoolManager makes a copy of this dictionary so they can be configured
       # globally here, or individually on the instance.
       key_fn_by_scheme = {
    1:     'http': functools.partial(_default_key_normalizer, HTTPPoolKey),
    1:     'https': functools.partial(_default_key_normalizer, HTTPSPoolKey),
       }
       
       pool_classes_by_scheme = {
    1:     'http': HTTPConnectionPool,
    1:     'https': HTTPSConnectionPool,
       }
       
       
    2: class PoolManager(RequestMethods):
           """
           Allows for arbitrary requests while transparently keeping track of
           necessary connection pools for you.
       
           :param num_pools:
               Number of connection pools to cache before discarding the least
               recently used pool.
       
           :param headers:
               Headers to include with all requests, unless other headers are given
               explicitly.
       
           :param \**connection_pool_kw:
               Additional parameters are used to create fresh
               :class:`urllib3.connectionpool.ConnectionPool` instances.
       
           Example::
       
               >>> manager = PoolManager(num_pools=2)
               >>> r = manager.request('GET', 'http://google.com/')
               >>> r = manager.request('GET', 'http://google.com/mail')
               >>> r = manager.request('GET', 'http://yahoo.com/')
               >>> len(manager.pools)
               2
       
    1:     """
       
    1:     proxy = None
       
    1:     def __init__(self, num_pools=10, headers=None, **connection_pool_kw):
    7:         RequestMethods.__init__(self, headers)
    7:         self.connection_pool_kw = connection_pool_kw
    7:         self.pools = RecentlyUsedContainer(num_pools,
    7:                                            dispose_func=lambda p: p.close())
       
               # Locally set the pool classes and keys so other PoolManagers can
               # override them.
    7:         self.pool_classes_by_scheme = pool_classes_by_scheme
    7:         self.key_fn_by_scheme = key_fn_by_scheme.copy()
       
    1:     def __enter__(self):
               return self
       
    1:     def __exit__(self, exc_type, exc_val, exc_tb):
               self.clear()
               # Return False to re-raise any potential exceptions
               return False
       
    1:     def _new_pool(self, scheme, host, port):
               """
               Create a new :class:`ConnectionPool` based on host, port and scheme.
       
               This method is used to actually create the connection pools handed out
               by :meth:`connection_from_url` and companion methods. It is intended
               to be overridden for customization.
               """
    1:         pool_cls = self.pool_classes_by_scheme[scheme]
    1:         kwargs = self.connection_pool_kw
    1:         if scheme == 'http':
                   kwargs = self.connection_pool_kw.copy()
                   for kw in SSL_KEYWORDS:
                       kwargs.pop(kw, None)
       
    1:         return pool_cls(host, port, **kwargs)
       
    1:     def clear(self):
               """
               Empty our store of pools and direct them all to close.
       
               This will not affect in-flight connections, but they will not be
               re-used after completion.
               """
               self.pools.clear()
       
    1:     def connection_from_host(self, host, port=None, scheme='http'):
               """
               Get a :class:`ConnectionPool` based on the host, port, and scheme.
       
               If ``port`` isn't given, it will be derived from the ``scheme`` using
               ``urllib3.connectionpool.port_by_scheme``.
               """
       
    1:         if not host:
                   raise LocationValueError("No host specified.")
       
    1:         request_context = self.connection_pool_kw.copy()
    1:         request_context['scheme'] = scheme or 'http'
    1:         if not port:
    1:             port = port_by_scheme.get(request_context['scheme'].lower(), 80)
    1:         request_context['port'] = port
    1:         request_context['host'] = host
       
    1:         return self.connection_from_context(request_context)
       
    1:     def connection_from_context(self, request_context):
               """
               Get a :class:`ConnectionPool` based on the request context.
       
               ``request_context`` must at least contain the ``scheme`` key and its
               value must be a key in ``key_fn_by_scheme`` instance variable.
               """
    1:         scheme = request_context['scheme'].lower()
    1:         pool_key_constructor = self.key_fn_by_scheme[scheme]
    1:         pool_key = pool_key_constructor(request_context)
       
    1:         return self.connection_from_pool_key(pool_key)
       
    1:     def connection_from_pool_key(self, pool_key):
               """
               Get a :class:`ConnectionPool` based on the provided pool key.
       
               ``pool_key`` should be a namedtuple that only contains immutable
               objects. At a minimum it must have the ``scheme``, ``host``, and
               ``port`` fields.
               """
    1:         with self.pools.lock:
                   # If the scheme, host, or port doesn't match existing open
                   # connections, open a new ConnectionPool.
    1:             pool = self.pools.get(pool_key)
    1:             if pool:
                       return pool
       
                   # Make a fresh ConnectionPool of the desired type
    1:             pool = self._new_pool(pool_key.scheme, pool_key.host, pool_key.port)
    1:             self.pools[pool_key] = pool
       
    1:         return pool
       
    1:     def connection_from_url(self, url):
               """
               Similar to :func:`urllib3.connectionpool.connection_from_url` but
               doesn't pass any additional parameters to the
               :class:`urllib3.connectionpool.ConnectionPool` constructor.
       
               Additional parameters are taken from the :class:`.PoolManager`
               constructor.
               """
    1:         u = parse_url(url)
    1:         return self.connection_from_host(u.host, port=u.port, scheme=u.scheme)
       
    1:     def urlopen(self, method, url, redirect=True, **kw):
               """
               Same as :meth:`urllib3.connectionpool.HTTPConnectionPool.urlopen`
               with custom cross-host redirect logic and only sends the request-uri
               portion of the ``url``.
       
               The given ``url`` parameter must be absolute, such that an appropriate
               :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.
               """
               u = parse_url(url)
               conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)
       
               kw['assert_same_host'] = False
               kw['redirect'] = False
               if 'headers' not in kw:
                   kw['headers'] = self.headers
       
               if self.proxy is not None and u.scheme == "http":
                   response = conn.urlopen(method, url, **kw)
               else:
                   response = conn.urlopen(method, u.request_uri, **kw)
       
               redirect_location = redirect and response.get_redirect_location()
               if not redirect_location:
                   return response
       
               # Support relative URLs for redirecting.
               redirect_location = urljoin(url, redirect_location)
       
               # RFC 7231, Section 6.4.4
               if response.status == 303:
                   method = 'GET'
       
               retries = kw.get('retries')
               if not isinstance(retries, Retry):
                   retries = Retry.from_int(retries, redirect=redirect)
       
               try:
                   retries = retries.increment(method, url, response=response, _pool=conn)
               except MaxRetryError:
                   if retries.raise_on_redirect:
                       raise
                   return response
       
               kw['retries'] = retries
               kw['redirect'] = redirect
       
               log.info("Redirecting %s -> %s", url, redirect_location)
               return self.urlopen(method, redirect_location, **kw)
       
       
    2: class ProxyManager(PoolManager):
           """
           Behaves just like :class:`PoolManager`, but sends all requests through
           the defined proxy, using the CONNECT method for HTTPS URLs.
       
           :param proxy_url:
               The URL of the proxy to be used.
       
           :param proxy_headers:
               A dictionary contaning headers that will be sent to the proxy. In case
               of HTTP they are being sent with each request, while in the
               HTTPS/CONNECT case they are sent only once. Could be used for proxy
               authentication.
       
           Example:
               >>> proxy = urllib3.ProxyManager('http://localhost:3128/')
               >>> r1 = proxy.request('GET', 'http://google.com/')
               >>> r2 = proxy.request('GET', 'http://httpbin.org/')
               >>> len(proxy.pools)
               1
               >>> r3 = proxy.request('GET', 'https://httpbin.org/')
               >>> r4 = proxy.request('GET', 'https://twitter.com/')
               >>> len(proxy.pools)
               3
       
    1:     """
       
           def __init__(self, proxy_url, num_pools=10, headers=None,
    1:                  proxy_headers=None, **connection_pool_kw):
       
               if isinstance(proxy_url, HTTPConnectionPool):
                   proxy_url = '%s://%s:%i' % (proxy_url.scheme, proxy_url.host,
                                               proxy_url.port)
               proxy = parse_url(proxy_url)
               if not proxy.port:
                   port = port_by_scheme.get(proxy.scheme, 80)
                   proxy = proxy._replace(port=port)
       
               if proxy.scheme not in ("http", "https"):
                   raise ProxySchemeUnknown(proxy.scheme)
       
               self.proxy = proxy
               self.proxy_headers = proxy_headers or {}
       
               connection_pool_kw['_proxy'] = self.proxy
               connection_pool_kw['_proxy_headers'] = self.proxy_headers
       
               super(ProxyManager, self).__init__(
                   num_pools, headers, **connection_pool_kw)
       
    1:     def connection_from_host(self, host, port=None, scheme='http'):
               if scheme == "https":
                   return super(ProxyManager, self).connection_from_host(
                       host, port, scheme)
       
               return super(ProxyManager, self).connection_from_host(
                   self.proxy.host, self.proxy.port, self.proxy.scheme)
       
    1:     def _set_proxy_headers(self, url, headers=None):
               """
               Sets headers needed by proxies: specifically, the Accept and Host
               headers. Only sets headers not provided by the user.
               """
               headers_ = {'Accept': '*/*'}
       
               netloc = parse_url(url).netloc
               if netloc:
                   headers_['Host'] = netloc
       
               if headers:
                   headers_.update(headers)
               return headers_
       
    1:     def urlopen(self, method, url, redirect=True, **kw):
               "Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute."
               u = parse_url(url)
       
               if u.scheme == "http":
                   # For proxied HTTPS requests, httplib sets the necessary headers
                   # on the CONNECT to the proxy. For HTTP, we'll definitely
                   # need to set 'Host' at the very least.
                   headers = kw.get('headers', self.headers)
                   kw['headers'] = self._set_proxy_headers(url, headers)
       
               return super(ProxyManager, self).urlopen(method, url, redirect=redirect, **kw)
       
       
    1: def proxy_from_url(url, **kw):
           return ProxyManager(proxy_url=url, **kw)
