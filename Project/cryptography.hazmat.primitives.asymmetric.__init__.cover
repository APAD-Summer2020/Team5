       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
       
    1: from __future__ import absolute_import, division, print_function
       
    1: import abc
       
    1: import six
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class AsymmetricSignatureContext(object):
    1:     @abc.abstractmethod
           def update(self, data):
               """
               Processes the provided bytes and returns nothing.
               """
       
    1:     @abc.abstractmethod
           def finalize(self):
               """
               Returns the signature as bytes.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class AsymmetricVerificationContext(object):
    1:     @abc.abstractmethod
           def update(self, data):
               """
               Processes the provided bytes and returns nothing.
               """
       
    1:     @abc.abstractmethod
           def verify(self):
               """
               Raises an exception if the bytes provided to update do not match the
               signature or the signature does not match the public key.
               """
