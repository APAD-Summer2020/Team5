       #
       # This file is part of pyasn1 software.
       #
       # Copyright (c) 2005-2019, Ilya Etingof <etingof@gmail.com>
       # License: http://snmplabs.com/pyasn1/license.html
       #
    1: import logging
    1: import sys
       
    1: from pyasn1 import __version__
    1: from pyasn1 import error
    1: from pyasn1.compat.octets import octs2ints
       
    1: __all__ = ['Debug', 'setLogger', 'hexdump']
       
    1: DEBUG_NONE = 0x0000
    1: DEBUG_ENCODER = 0x0001
    1: DEBUG_DECODER = 0x0002
    1: DEBUG_ALL = 0xffff
       
       FLAG_MAP = {
    1:     'none': DEBUG_NONE,
    1:     'encoder': DEBUG_ENCODER,
    1:     'decoder': DEBUG_DECODER,
    1:     'all': DEBUG_ALL
       }
       
    1: LOGGEE_MAP = {}
       
       
    2: class Printer(object):
           # noinspection PyShadowingNames
    1:     def __init__(self, logger=None, handler=None, formatter=None):
    1:         if logger is None:
    1:             logger = logging.getLogger('pyasn1')
       
    1:         logger.setLevel(logging.DEBUG)
       
    1:         if handler is None:
    1:             handler = logging.StreamHandler()
       
    1:         if formatter is None:
    1:             formatter = logging.Formatter('%(asctime)s %(name)s: %(message)s')
       
    1:         handler.setFormatter(formatter)
    1:         handler.setLevel(logging.DEBUG)
    1:         logger.addHandler(handler)
       
    1:         self.__logger = logger
       
    1:     def __call__(self, msg):
               self.__logger.debug(msg)
       
    1:     def __str__(self):
               return '<python logging>'
       
       
    1: if hasattr(logging, 'NullHandler'):
    1:     NullHandler = logging.NullHandler
       
       else:
           # Python 2.6 and older
           class NullHandler(logging.Handler):
               def emit(self, record):
                   pass
       
       
    2: class Debug(object):
    1:     defaultPrinter = Printer()
       
    1:     def __init__(self, *flags, **options):
               self._flags = DEBUG_NONE
       
               if 'loggerName' in options:
                   # route our logs to parent logger
                   self._printer = Printer(
                       logger=logging.getLogger(options['loggerName']),
                       handler=NullHandler()
                   )
       
               elif 'printer' in options:
                   self._printer = options.get('printer')
       
               else:
                   self._printer = self.defaultPrinter
       
               self._printer('running pyasn1 %s, debug flags %s' % (__version__, ', '.join(flags)))
       
               for flag in flags:
                   inverse = flag and flag[0] in ('!', '~')
                   if inverse:
                       flag = flag[1:]
                   try:
                       if inverse:
                           self._flags &= ~FLAG_MAP[flag]
                       else:
                           self._flags |= FLAG_MAP[flag]
                   except KeyError:
                       raise error.PyAsn1Error('bad debug flag %s' % flag)
       
                   self._printer("debug category '%s' %s" % (flag, inverse and 'disabled' or 'enabled'))
       
    1:     def __str__(self):
               return 'logger %s, flags %x' % (self._printer, self._flags)
       
    1:     def __call__(self, msg):
               self._printer(msg)
       
    1:     def __and__(self, flag):
               return self._flags & flag
       
    1:     def __rand__(self, flag):
               return flag & self._flags
       
    1: _LOG = DEBUG_NONE
       
       
    1: def setLogger(userLogger):
           global _LOG
       
    1:     if userLogger:
               _LOG = userLogger
           else:
    1:         _LOG = DEBUG_NONE
       
           # Update registered logging clients
    2:     for module, (name, flags) in LOGGEE_MAP.items():
    1:         setattr(module, name, _LOG & flags and _LOG or DEBUG_NONE)
       
       
    1: def registerLoggee(module, name='LOG', flags=DEBUG_NONE):
    1:     LOGGEE_MAP[sys.modules[module]] = name, flags
    1:     setLogger(_LOG)
    1:     return _LOG
       
       
    1: def hexdump(octets):
           return ' '.join(
               ['%s%.2X' % (n % 16 == 0 and ('\n%.5d: ' % n) or '', x)
                for n, x in zip(range(len(octets)), octs2ints(octets))]
           )
       
       
    2: class Scope(object):
    1:     def __init__(self):
    1:         self._list = []
       
    1:     def __str__(self): return '.'.join(self._list)
       
    1:     def push(self, token):
               self._list.append(token)
       
    1:     def pop(self):
               return self._list.pop()
       
       
    1: scope = Scope()
