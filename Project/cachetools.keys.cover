    1: """Key functions for memoizing decorators."""
       
    1: __all__ = ('hashkey', 'typedkey')
       
       
    2: class _HashedTuple(tuple):
           """A tuple that ensures that hash() will be called no more than once
           per element, since cache decorators will hash the key multiple
           times on a cache miss.  See also _HashedSeq in the standard
           library functools implementation.
       
    1:     """
       
    1:     __hashvalue = None
       
    1:     def __hash__(self, hash=tuple.__hash__):
               hashvalue = self.__hashvalue
               if hashvalue is None:
                   self.__hashvalue = hashvalue = hash(self)
               return hashvalue
       
    1:     def __add__(self, other, add=tuple.__add__):
               return _HashedTuple(add(self, other))
       
    1:     def __radd__(self, other, add=tuple.__add__):
               return _HashedTuple(add(other, self))
       
    1:     def __getstate__(self):
               return {}
       
       
       # used for separating keyword arguments; we do not use an object
       # instance here so identity is preserved when pickling/unpickling
    1: _kwmark = (_HashedTuple,)
       
       
    1: def hashkey(*args, **kwargs):
           """Return a cache key for the specified hashable arguments."""
       
           if kwargs:
               return _HashedTuple(args + sum(sorted(kwargs.items()), _kwmark))
           else:
               return _HashedTuple(args)
       
       
    1: def typedkey(*args, **kwargs):
           """Return a typed cache key for the specified hashable arguments."""
       
           key = hashkey(*args, **kwargs)
           key += tuple(type(v) for v in args)
           key += tuple(type(v) for _, v in sorted(kwargs.items()))
           return key
