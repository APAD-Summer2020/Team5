       """Cache lines from Python source files.
       
       This is intended to read lines from modules imported -- hence if a filename
       is not found, it will look down the module search path for a file by
       that name.
       """
       
       import functools
       import sys
       import os
       import tokenize
       
       __all__ = ["getline", "clearcache", "checkcache"]
       
       def getline(filename, lineno, module_globals=None):
   78:     lines = getlines(filename, module_globals)
   78:     if 1 <= lineno <= len(lines):
   78:         return lines[lineno-1]
           else:
               return ''
       
       
       # The cache
       
       # The cache. Maps filenames to either a thunk which will provide source code,
       # or a tuple (size, mtime, lines, fullname) once loaded.
       cache = {}
       
       
       def clearcache():
           """Clear the cache entirely."""
       
           global cache
           cache = {}
       
       
       def getlines(filename, module_globals=None):
           """Get the lines for a Python source file from the cache.
           Update the cache if it doesn't contain an entry for this file already."""
       
   78:     if filename in cache:
   78:         entry = cache[filename]
   78:         if len(entry) != 1:
   77:             return cache[filename][2]
       
    1:     try:
    1:         return updatecache(filename, module_globals)
           except MemoryError:
               clearcache()
               return []
       
       
       def checkcache(filename=None):
           """Discard cache entries that are out of date.
           (This is not checked upon each call!)"""
       
   26:     if filename is None:
               filenames = list(cache.keys())
           else:
   26:         if filename in cache:
   26:             filenames = [filename]
               else:
                   return
       
   52:     for filename in filenames:
   26:         entry = cache[filename]
   26:         if len(entry) == 1:
                   # lazy cache entry, leave it lazy.
    1:             continue
   25:         size, mtime, lines, fullname = entry
   25:         if mtime is None:
                   continue   # no-op for files loaded via a __loader__
   25:         try:
   25:             stat = os.stat(fullname)
               except OSError:
                   del cache[filename]
                   continue
   25:         if size != stat.st_size or mtime != stat.st_mtime:
                   del cache[filename]
       
       
       def updatecache(filename, module_globals=None):
           """Update a cache entry and return its list of lines.
           If something's wrong, print a message, discard the cache entry,
           and return an empty list."""
       
    1:     if filename in cache:
    1:         if len(cache[filename]) != 1:
                   del cache[filename]
    1:     if not filename or (filename.startswith('<') and filename.endswith('>')):
               return []
       
    1:     fullname = filename
    1:     try:
    1:         stat = os.stat(fullname)
           except OSError:
               basename = filename
       
               # Realise a lazy loader based lookup if there is one
               # otherwise try to lookup right now.
               if lazycache(filename, module_globals):
                   try:
                       data = cache[filename][0]()
                   except (ImportError, OSError):
                       pass
                   else:
                       if data is None:
                           # No luck, the PEP302 loader cannot find the source
                           # for this module.
                           return []
                       cache[filename] = (
                           len(data), None,
                           [line+'\n' for line in data.splitlines()], fullname
                       )
                       return cache[filename][2]
       
               # Try looking through the module search path, which is only useful
               # when handling a relative filename.
               if os.path.isabs(filename):
                   return []
       
               for dirname in sys.path:
                   try:
                       fullname = os.path.join(dirname, basename)
                   except (TypeError, AttributeError):
                       # Not sufficiently string-like to do anything useful with.
                       continue
                   try:
                       stat = os.stat(fullname)
                       break
                   except OSError:
                       pass
               else:
                   return []
    1:     try:
    1:         with tokenize.open(fullname) as fp:
    1:             lines = fp.readlines()
           except OSError:
               return []
    1:     if lines and not lines[-1].endswith('\n'):
               lines[-1] += '\n'
    1:     size, mtime = stat.st_size, stat.st_mtime
    1:     cache[filename] = size, mtime, lines, fullname
    1:     return lines
       
       
       def lazycache(filename, module_globals):
           """Seed the cache for filename with module_globals.
       
           The module loader will be asked for the source only when getlines is
           called, not immediately.
       
           If there is an entry in the cache already, it is not altered.
       
           :return: True if a lazy load is registered in the cache,
               otherwise False. To register such a load a module loader with a
               get_source method must be found, the filename must be a cachable
               filename, and the filename must not be already cached.
           """
   78:     if filename in cache:
   77:         if len(cache[filename]) == 1:
    2:             return True
               else:
   75:             return False
    1:     if not filename or (filename.startswith('<') and filename.endswith('>')):
               return False
           # Try for a __loader__, if available
    1:     if module_globals and '__loader__' in module_globals:
    1:         name = module_globals.get('__name__')
    1:         loader = module_globals['__loader__']
    1:         get_source = getattr(loader, 'get_source', None)
       
    1:         if name and get_source:
    1:             get_lines = functools.partial(get_source, name)
    1:             cache[filename] = (get_lines,)
    1:             return True
           return False
