       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
       
    1: from __future__ import absolute_import, division, print_function
       
    1: import abc
    1: import warnings
       
    1: import six
       
    1: from cryptography import utils
    1: from cryptography.hazmat._oid import ObjectIdentifier
       
       
    2: class EllipticCurveOID(object):
    1:     SECP192R1 = ObjectIdentifier("1.2.840.10045.3.1.1")
    1:     SECP224R1 = ObjectIdentifier("1.3.132.0.33")
    1:     SECP256K1 = ObjectIdentifier("1.3.132.0.10")
    1:     SECP256R1 = ObjectIdentifier("1.2.840.10045.3.1.7")
    1:     SECP384R1 = ObjectIdentifier("1.3.132.0.34")
    1:     SECP521R1 = ObjectIdentifier("1.3.132.0.35")
    1:     BRAINPOOLP256R1 = ObjectIdentifier("1.3.36.3.3.2.8.1.1.7")
    1:     BRAINPOOLP384R1 = ObjectIdentifier("1.3.36.3.3.2.8.1.1.11")
    1:     BRAINPOOLP512R1 = ObjectIdentifier("1.3.36.3.3.2.8.1.1.13")
    1:     SECT163K1 = ObjectIdentifier("1.3.132.0.1")
    1:     SECT163R2 = ObjectIdentifier("1.3.132.0.15")
    1:     SECT233K1 = ObjectIdentifier("1.3.132.0.26")
    1:     SECT233R1 = ObjectIdentifier("1.3.132.0.27")
    1:     SECT283K1 = ObjectIdentifier("1.3.132.0.16")
    1:     SECT283R1 = ObjectIdentifier("1.3.132.0.17")
    1:     SECT409K1 = ObjectIdentifier("1.3.132.0.36")
    1:     SECT409R1 = ObjectIdentifier("1.3.132.0.37")
    1:     SECT571K1 = ObjectIdentifier("1.3.132.0.38")
    1:     SECT571R1 = ObjectIdentifier("1.3.132.0.39")
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class EllipticCurve(object):
    1:     @abc.abstractproperty
           def name(self):
               """
               The name of the curve. e.g. secp256r1.
               """
       
    1:     @abc.abstractproperty
           def key_size(self):
               """
               Bit size of a secret scalar for the curve.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class EllipticCurveSignatureAlgorithm(object):
    1:     @abc.abstractproperty
           def algorithm(self):
               """
               The digest algorithm used with this signature.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class EllipticCurvePrivateKey(object):
    1:     @abc.abstractmethod
           def signer(self, signature_algorithm):
               """
               Returns an AsymmetricSignatureContext used for signing data.
               """
       
    1:     @abc.abstractmethod
           def exchange(self, algorithm, peer_public_key):
               """
               Performs a key exchange operation using the provided algorithm with the
               provided peer's public key.
               """
       
    1:     @abc.abstractmethod
           def public_key(self):
               """
               The EllipticCurvePublicKey for this private key.
               """
       
    1:     @abc.abstractproperty
           def curve(self):
               """
               The EllipticCurve that this key is on.
               """
       
    1:     @abc.abstractproperty
           def key_size(self):
               """
               Bit size of a secret scalar for the curve.
               """
       
    1:     @abc.abstractmethod
           def sign(self, data, signature_algorithm):
               """
               Signs the data
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class EllipticCurvePrivateKeyWithSerialization(EllipticCurvePrivateKey):
    1:     @abc.abstractmethod
           def private_numbers(self):
               """
               Returns an EllipticCurvePrivateNumbers.
               """
       
    1:     @abc.abstractmethod
           def private_bytes(self, encoding, format, encryption_algorithm):
               """
               Returns the key serialized as bytes.
               """
       
       
    2: @six.add_metaclass(abc.ABCMeta)
    1: class EllipticCurvePublicKey(object):
    1:     @abc.abstractmethod
           def verifier(self, signature, signature_algorithm):
               """
               Returns an AsymmetricVerificationContext used for signing data.
               """
       
    1:     @abc.abstractproperty
           def curve(self):
               """
               The EllipticCurve that this key is on.
               """
       
    1:     @abc.abstractproperty
           def key_size(self):
               """
               Bit size of a secret scalar for the curve.
               """
       
    1:     @abc.abstractmethod
           def public_numbers(self):
               """
               Returns an EllipticCurvePublicNumbers.
               """
       
    1:     @abc.abstractmethod
           def public_bytes(self, encoding, format):
               """
               Returns the key serialized as bytes.
               """
       
    1:     @abc.abstractmethod
           def verify(self, signature, data, signature_algorithm):
               """
               Verifies the signature of the data.
               """
       
    1:     @classmethod
           def from_encoded_point(cls, curve, data):
               utils._check_bytes("data", data)
       
               if not isinstance(curve, EllipticCurve):
                   raise TypeError("curve must be an EllipticCurve instance")
       
               if len(data) == 0:
                   raise ValueError("data must not be an empty byte string")
       
               if six.indexbytes(data, 0) not in [0x02, 0x03, 0x04]:
                   raise ValueError("Unsupported elliptic curve point type")
       
               from cryptography.hazmat.backends.openssl.backend import backend
               return backend.load_elliptic_curve_public_bytes(curve, data)
       
       
    1: EllipticCurvePublicKeyWithSerialization = EllipticCurvePublicKey
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT571R1(object):
    1:     name = "sect571r1"
    1:     key_size = 570
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT409R1(object):
    1:     name = "sect409r1"
    1:     key_size = 409
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT283R1(object):
    1:     name = "sect283r1"
    1:     key_size = 283
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT233R1(object):
    1:     name = "sect233r1"
    1:     key_size = 233
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT163R2(object):
    1:     name = "sect163r2"
    1:     key_size = 163
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT571K1(object):
    1:     name = "sect571k1"
    1:     key_size = 571
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT409K1(object):
    1:     name = "sect409k1"
    1:     key_size = 409
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT283K1(object):
    1:     name = "sect283k1"
    1:     key_size = 283
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT233K1(object):
    1:     name = "sect233k1"
    1:     key_size = 233
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECT163K1(object):
    1:     name = "sect163k1"
    1:     key_size = 163
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECP521R1(object):
    1:     name = "secp521r1"
    1:     key_size = 521
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECP384R1(object):
    1:     name = "secp384r1"
    1:     key_size = 384
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECP256R1(object):
    1:     name = "secp256r1"
    1:     key_size = 256
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECP256K1(object):
    1:     name = "secp256k1"
    1:     key_size = 256
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECP224R1(object):
    1:     name = "secp224r1"
    1:     key_size = 224
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class SECP192R1(object):
    1:     name = "secp192r1"
    1:     key_size = 192
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class BrainpoolP256R1(object):
    1:     name = "brainpoolP256r1"
    1:     key_size = 256
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class BrainpoolP384R1(object):
    1:     name = "brainpoolP384r1"
    1:     key_size = 384
       
       
    2: @utils.register_interface(EllipticCurve)
    1: class BrainpoolP512R1(object):
    1:     name = "brainpoolP512r1"
    1:     key_size = 512
       
       
       _CURVE_TYPES = {
    1:     "prime192v1": SECP192R1,
    1:     "prime256v1": SECP256R1,
       
    1:     "secp192r1": SECP192R1,
    1:     "secp224r1": SECP224R1,
    1:     "secp256r1": SECP256R1,
    1:     "secp384r1": SECP384R1,
    1:     "secp521r1": SECP521R1,
    1:     "secp256k1": SECP256K1,
       
    1:     "sect163k1": SECT163K1,
    1:     "sect233k1": SECT233K1,
    1:     "sect283k1": SECT283K1,
    1:     "sect409k1": SECT409K1,
    1:     "sect571k1": SECT571K1,
       
    1:     "sect163r2": SECT163R2,
    1:     "sect233r1": SECT233R1,
    1:     "sect283r1": SECT283R1,
    1:     "sect409r1": SECT409R1,
    1:     "sect571r1": SECT571R1,
       
    1:     "brainpoolP256r1": BrainpoolP256R1,
    1:     "brainpoolP384r1": BrainpoolP384R1,
    1:     "brainpoolP512r1": BrainpoolP512R1,
       }
       
       
    2: @utils.register_interface(EllipticCurveSignatureAlgorithm)
    1: class ECDSA(object):
    1:     def __init__(self, algorithm):
               self._algorithm = algorithm
       
    1:     algorithm = utils.read_only_property("_algorithm")
       
       
    1: def generate_private_key(curve, backend):
           return backend.generate_elliptic_curve_private_key(curve)
       
       
    1: def derive_private_key(private_value, curve, backend):
           if not isinstance(private_value, six.integer_types):
               raise TypeError("private_value must be an integer type.")
       
           if private_value <= 0:
               raise ValueError("private_value must be a positive integer.")
       
           if not isinstance(curve, EllipticCurve):
               raise TypeError("curve must provide the EllipticCurve interface.")
       
           return backend.derive_elliptic_curve_private_key(private_value, curve)
       
       
    2: class EllipticCurvePublicNumbers(object):
    1:     def __init__(self, x, y, curve):
               if (
                   not isinstance(x, six.integer_types) or
                   not isinstance(y, six.integer_types)
               ):
                   raise TypeError("x and y must be integers.")
       
               if not isinstance(curve, EllipticCurve):
                   raise TypeError("curve must provide the EllipticCurve interface.")
       
               self._y = y
               self._x = x
               self._curve = curve
       
    1:     def public_key(self, backend):
               return backend.load_elliptic_curve_public_numbers(self)
       
    1:     def encode_point(self):
               warnings.warn(
                   "encode_point has been deprecated on EllipticCurvePublicNumbers"
                   " and will be removed in a future version. Please use "
                   "EllipticCurvePublicKey.public_bytes to obtain both "
                   "compressed and uncompressed point encoding.",
                   utils.DeprecatedIn25,
                   stacklevel=2,
               )
               # key_size is in bits. Convert to bytes and round up
               byte_length = (self.curve.key_size + 7) // 8
               return (
                   b'\x04' + utils.int_to_bytes(self.x, byte_length) +
                   utils.int_to_bytes(self.y, byte_length)
               )
       
    1:     @classmethod
           def from_encoded_point(cls, curve, data):
               if not isinstance(curve, EllipticCurve):
                   raise TypeError("curve must be an EllipticCurve instance")
       
               warnings.warn(
                   "Support for unsafe construction of public numbers from "
                   "encoded data will be removed in a future version. "
                   "Please use EllipticCurvePublicKey.from_encoded_point",
                   utils.DeprecatedIn25,
                   stacklevel=2,
               )
       
               if data.startswith(b'\x04'):
                   # key_size is in bits. Convert to bytes and round up
                   byte_length = (curve.key_size + 7) // 8
                   if len(data) == 2 * byte_length + 1:
                       x = utils.int_from_bytes(data[1:byte_length + 1], 'big')
                       y = utils.int_from_bytes(data[byte_length + 1:], 'big')
                       return cls(x, y, curve)
                   else:
                       raise ValueError('Invalid elliptic curve point data length')
               else:
                   raise ValueError('Unsupported elliptic curve point type')
       
    1:     curve = utils.read_only_property("_curve")
    1:     x = utils.read_only_property("_x")
    1:     y = utils.read_only_property("_y")
       
    1:     def __eq__(self, other):
               if not isinstance(other, EllipticCurvePublicNumbers):
                   return NotImplemented
       
               return (
                   self.x == other.x and
                   self.y == other.y and
                   self.curve.name == other.curve.name and
                   self.curve.key_size == other.curve.key_size
               )
       
    1:     def __ne__(self, other):
               return not self == other
       
    1:     def __hash__(self):
               return hash((self.x, self.y, self.curve.name, self.curve.key_size))
       
    1:     def __repr__(self):
               return (
                   "<EllipticCurvePublicNumbers(curve={0.curve.name}, x={0.x}, "
                   "y={0.y}>".format(self)
               )
       
       
    2: class EllipticCurvePrivateNumbers(object):
    1:     def __init__(self, private_value, public_numbers):
               if not isinstance(private_value, six.integer_types):
                   raise TypeError("private_value must be an integer.")
       
               if not isinstance(public_numbers, EllipticCurvePublicNumbers):
                   raise TypeError(
                       "public_numbers must be an EllipticCurvePublicNumbers "
                       "instance."
                   )
       
               self._private_value = private_value
               self._public_numbers = public_numbers
       
    1:     def private_key(self, backend):
               return backend.load_elliptic_curve_private_numbers(self)
       
    1:     private_value = utils.read_only_property("_private_value")
    1:     public_numbers = utils.read_only_property("_public_numbers")
       
    1:     def __eq__(self, other):
               if not isinstance(other, EllipticCurvePrivateNumbers):
                   return NotImplemented
       
               return (
                   self.private_value == other.private_value and
                   self.public_numbers == other.public_numbers
               )
       
    1:     def __ne__(self, other):
               return not self == other
       
    1:     def __hash__(self):
               return hash((self.private_value, self.public_numbers))
       
       
    2: class ECDH(object):
    1:     pass
       
       
       _OID_TO_CURVE = {
    1:     EllipticCurveOID.SECP192R1: SECP192R1,
    1:     EllipticCurveOID.SECP224R1: SECP224R1,
    1:     EllipticCurveOID.SECP256K1: SECP256K1,
    1:     EllipticCurveOID.SECP256R1: SECP256R1,
    1:     EllipticCurveOID.SECP384R1: SECP384R1,
    1:     EllipticCurveOID.SECP521R1: SECP521R1,
    1:     EllipticCurveOID.BRAINPOOLP256R1: BrainpoolP256R1,
    1:     EllipticCurveOID.BRAINPOOLP384R1: BrainpoolP384R1,
    1:     EllipticCurveOID.BRAINPOOLP512R1: BrainpoolP512R1,
    1:     EllipticCurveOID.SECT163K1: SECT163K1,
    1:     EllipticCurveOID.SECT163R2: SECT163R2,
    1:     EllipticCurveOID.SECT233K1: SECT233K1,
    1:     EllipticCurveOID.SECT233R1: SECT233R1,
    1:     EllipticCurveOID.SECT283K1: SECT283K1,
    1:     EllipticCurveOID.SECT283R1: SECT283R1,
    1:     EllipticCurveOID.SECT409K1: SECT409K1,
    1:     EllipticCurveOID.SECT409R1: SECT409R1,
    1:     EllipticCurveOID.SECT571K1: SECT571K1,
    1:     EllipticCurveOID.SECT571R1: SECT571R1,
       }
       
       
    1: def get_curve_for_oid(oid):
           try:
               return _OID_TO_CURVE[oid]
           except KeyError:
               raise LookupError(
                   "The provided object identifier has no matching elliptic "
                   "curve class"
               )
