       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
       
    1: from __future__ import absolute_import, division, print_function
       
    1: from cryptography import utils
    1: from cryptography.hazmat.primitives.ciphers import (
           BlockCipherAlgorithm, CipherAlgorithm
       )
    1: from cryptography.hazmat.primitives.ciphers.modes import ModeWithNonce
       
       
    1: def _verify_key_size(algorithm, key):
           # Verify that the key is instance of bytes
           utils._check_byteslike("key", key)
       
           # Verify that the key size matches the expected key size
           if len(key) * 8 not in algorithm.key_sizes:
               raise ValueError("Invalid key size ({}) for {}.".format(
                   len(key) * 8, algorithm.name
               ))
           return key
       
       
    2: @utils.register_interface(BlockCipherAlgorithm)
    1: @utils.register_interface(CipherAlgorithm)
    1: class AES(object):
    1:     name = "AES"
    1:     block_size = 128
           # 512 added to support AES-256-XTS, which uses 512-bit keys
    1:     key_sizes = frozenset([128, 192, 256, 512])
       
    1:     def __init__(self, key):
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(BlockCipherAlgorithm)
    1: @utils.register_interface(CipherAlgorithm)
    1: class Camellia(object):
    1:     name = "camellia"
    1:     block_size = 128
    1:     key_sizes = frozenset([128, 192, 256])
       
    1:     def __init__(self, key):
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(BlockCipherAlgorithm)
    1: @utils.register_interface(CipherAlgorithm)
    1: class TripleDES(object):
    1:     name = "3DES"
    1:     block_size = 64
    1:     key_sizes = frozenset([64, 128, 192])
       
    1:     def __init__(self, key):
               if len(key) == 8:
                   key += key + key
               elif len(key) == 16:
                   key += key[:8]
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(BlockCipherAlgorithm)
    1: @utils.register_interface(CipherAlgorithm)
    1: class Blowfish(object):
    1:     name = "Blowfish"
    1:     block_size = 64
    1:     key_sizes = frozenset(range(32, 449, 8))
       
    1:     def __init__(self, key):
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(BlockCipherAlgorithm)
    1: @utils.register_interface(CipherAlgorithm)
    1: class CAST5(object):
    1:     name = "CAST5"
    1:     block_size = 64
    1:     key_sizes = frozenset(range(40, 129, 8))
       
    1:     def __init__(self, key):
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(CipherAlgorithm)
    1: class ARC4(object):
    1:     name = "RC4"
    1:     key_sizes = frozenset([40, 56, 64, 80, 128, 160, 192, 256])
       
    1:     def __init__(self, key):
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(CipherAlgorithm)
    1: class IDEA(object):
    1:     name = "IDEA"
    1:     block_size = 64
    1:     key_sizes = frozenset([128])
       
    1:     def __init__(self, key):
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(BlockCipherAlgorithm)
    1: @utils.register_interface(CipherAlgorithm)
    1: class SEED(object):
    1:     name = "SEED"
    1:     block_size = 128
    1:     key_sizes = frozenset([128])
       
    1:     def __init__(self, key):
               self.key = _verify_key_size(self, key)
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
       
       
    2: @utils.register_interface(CipherAlgorithm)
    1: @utils.register_interface(ModeWithNonce)
    1: class ChaCha20(object):
    1:     name = "ChaCha20"
    1:     key_sizes = frozenset([256])
       
    1:     def __init__(self, key, nonce):
               self.key = _verify_key_size(self, key)
               utils._check_byteslike("nonce", nonce)
       
               if len(nonce) != 16:
                   raise ValueError("nonce must be 128-bits (16 bytes)")
       
               self._nonce = nonce
       
    1:     nonce = utils.read_only_property("_nonce")
       
    1:     @property
           def key_size(self):
               return len(self.key) * 8
