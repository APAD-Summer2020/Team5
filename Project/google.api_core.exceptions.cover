       # Copyright 2014 Google LLC
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
       """Exceptions raised by Google API core & clients.
       
       This module provides base classes for all errors raised by libraries based
       on :mod:`google.api_core`, including both HTTP and gRPC clients.
    1: """
       
    1: from __future__ import absolute_import
    1: from __future__ import unicode_literals
       
    1: import six
    1: from six.moves import http_client
       
    1: try:
    1:     import grpc
       except ImportError:  # pragma: NO COVER
           grpc = None
       
       # Lookup tables for mapping exceptions from HTTP and gRPC transports.
       # Populated by _APICallErrorMeta
    1: _HTTP_CODE_TO_EXCEPTION = {}
    1: _GRPC_CODE_TO_EXCEPTION = {}
       
       
    2: class GoogleAPIError(Exception):
    1:     """Base class for all exceptions raised by Google API Clients."""
       
    1:     pass
       
       
    2: class DuplicateCredentialArgs(GoogleAPIError):
    1:     """Raised when multiple credentials are passed."""
       
    1:     pass
       
       
    2: @six.python_2_unicode_compatible
    1: class RetryError(GoogleAPIError):
           """Raised when a function has exhausted all of its available retries.
       
           Args:
               message (str): The exception message.
               cause (Exception): The last exception raised when retring the
                   function.
    1:     """
       
    1:     def __init__(self, message, cause):
               super(RetryError, self).__init__(message)
               self.message = message
               self._cause = cause
       
    1:     @property
           def cause(self):
               """The last exception raised when retrying the function."""
               return self._cause
       
    1:     def __str__(self):
               return "{}, last exception: {}".format(self.message, self.cause)
       
       
    2: class _GoogleAPICallErrorMeta(type):
    1:     """Metaclass for registering GoogleAPICallError subclasses."""
       
    1:     def __new__(mcs, name, bases, class_dict):
   35:         cls = type.__new__(mcs, name, bases, class_dict)
   35:         if cls.code is not None:
   29:             _HTTP_CODE_TO_EXCEPTION.setdefault(cls.code, cls)
   35:         if cls.grpc_status_code is not None:
   16:             _GRPC_CODE_TO_EXCEPTION.setdefault(cls.grpc_status_code, cls)
   35:         return cls
       
       
    2: @six.python_2_unicode_compatible
    1: @six.add_metaclass(_GoogleAPICallErrorMeta)
    1: class GoogleAPICallError(GoogleAPIError):
           """Base class for exceptions raised by calling API methods.
       
           Args:
               message (str): The exception message.
               errors (Sequence[Any]): An optional list of error details.
               response (Union[requests.Request, grpc.Call]): The response or
                   gRPC call metadata.
    1:     """
       
    1:     code = None
           """Optional[int]: The HTTP status code associated with this error.
       
           This may be ``None`` if the exception does not have a direct mapping
           to an HTTP error.
       
           See http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
           """
       
    1:     grpc_status_code = None
           """Optional[grpc.StatusCode]: The gRPC status code associated with this
           error.
       
           This may be ``None`` if the exception does not match up to a gRPC error.
           """
       
    1:     def __init__(self, message, errors=(), response=None):
               super(GoogleAPICallError, self).__init__(message)
               self.message = message
               """str: The exception message."""
               self._errors = errors
               self._response = response
       
    1:     def __str__(self):
               return "{} {}".format(self.code, self.message)
       
    1:     @property
           def errors(self):
               """Detailed error information.
       
               Returns:
                   Sequence[Any]: A list of additional error details.
               """
               return list(self._errors)
       
    1:     @property
           def response(self):
               """Optional[Union[requests.Request, grpc.Call]]: The response or
               gRPC call metadata."""
               return self._response
       
       
    2: class Redirection(GoogleAPICallError):
    1:     """Base class for for all redirection (HTTP 3xx) responses."""
       
       
    2: class MovedPermanently(Redirection):
    1:     """Exception mapping a ``301 Moved Permanently`` response."""
       
    1:     code = http_client.MOVED_PERMANENTLY
       
       
    2: class NotModified(Redirection):
    1:     """Exception mapping a ``304 Not Modified`` response."""
       
    1:     code = http_client.NOT_MODIFIED
       
       
    2: class TemporaryRedirect(Redirection):
    1:     """Exception mapping a ``307 Temporary Redirect`` response."""
       
    1:     code = http_client.TEMPORARY_REDIRECT
       
       
    2: class ResumeIncomplete(Redirection):
           """Exception mapping a ``308 Resume Incomplete`` response.
       
           .. note:: :attr:`http_client.PERMANENT_REDIRECT` is ``308``, but Google
               APIs differ in their use of this status code.
    1:     """
       
    1:     code = 308
       
       
    2: class ClientError(GoogleAPICallError):
    1:     """Base class for all client error (HTTP 4xx) responses."""
       
       
    2: class BadRequest(ClientError):
    1:     """Exception mapping a ``400 Bad Request`` response."""
       
    1:     code = http_client.BAD_REQUEST
       
       
    2: class InvalidArgument(BadRequest):
    1:     """Exception mapping a :attr:`grpc.StatusCode.INVALID_ARGUMENT` error."""
       
    1:     grpc_status_code = grpc.StatusCode.INVALID_ARGUMENT if grpc is not None else None
       
       
    2: class FailedPrecondition(BadRequest):
           """Exception mapping a :attr:`grpc.StatusCode.FAILED_PRECONDITION`
    1:     error."""
       
    1:     grpc_status_code = grpc.StatusCode.FAILED_PRECONDITION if grpc is not None else None
       
       
    2: class OutOfRange(BadRequest):
    1:     """Exception mapping a :attr:`grpc.StatusCode.OUT_OF_RANGE` error."""
       
    1:     grpc_status_code = grpc.StatusCode.OUT_OF_RANGE if grpc is not None else None
       
       
    2: class Unauthorized(ClientError):
    1:     """Exception mapping a ``401 Unauthorized`` response."""
       
    1:     code = http_client.UNAUTHORIZED
       
       
    2: class Unauthenticated(Unauthorized):
    1:     """Exception mapping a :attr:`grpc.StatusCode.UNAUTHENTICATED` error."""
       
    1:     grpc_status_code = grpc.StatusCode.UNAUTHENTICATED if grpc is not None else None
       
       
    2: class Forbidden(ClientError):
    1:     """Exception mapping a ``403 Forbidden`` response."""
       
    1:     code = http_client.FORBIDDEN
       
       
    2: class PermissionDenied(Forbidden):
    1:     """Exception mapping a :attr:`grpc.StatusCode.PERMISSION_DENIED` error."""
       
    1:     grpc_status_code = grpc.StatusCode.PERMISSION_DENIED if grpc is not None else None
       
       
    2: class NotFound(ClientError):
           """Exception mapping a ``404 Not Found`` response or a
    1:     :attr:`grpc.StatusCode.NOT_FOUND` error."""
       
    1:     code = http_client.NOT_FOUND
    1:     grpc_status_code = grpc.StatusCode.NOT_FOUND if grpc is not None else None
       
       
    2: class MethodNotAllowed(ClientError):
    1:     """Exception mapping a ``405 Method Not Allowed`` response."""
       
    1:     code = http_client.METHOD_NOT_ALLOWED
       
       
    2: class Conflict(ClientError):
    1:     """Exception mapping a ``409 Conflict`` response."""
       
    1:     code = http_client.CONFLICT
       
       
    2: class AlreadyExists(Conflict):
    1:     """Exception mapping a :attr:`grpc.StatusCode.ALREADY_EXISTS` error."""
       
    1:     grpc_status_code = grpc.StatusCode.ALREADY_EXISTS if grpc is not None else None
       
       
    2: class Aborted(Conflict):
    1:     """Exception mapping a :attr:`grpc.StatusCode.ABORTED` error."""
       
    1:     grpc_status_code = grpc.StatusCode.ABORTED if grpc is not None else None
       
       
    2: class LengthRequired(ClientError):
    1:     """Exception mapping a ``411 Length Required`` response."""
       
    1:     code = http_client.LENGTH_REQUIRED
       
       
    2: class PreconditionFailed(ClientError):
    1:     """Exception mapping a ``412 Precondition Failed`` response."""
       
    1:     code = http_client.PRECONDITION_FAILED
       
       
    2: class RequestRangeNotSatisfiable(ClientError):
    1:     """Exception mapping a ``416 Request Range Not Satisfiable`` response."""
       
    1:     code = http_client.REQUESTED_RANGE_NOT_SATISFIABLE
       
       
    2: class TooManyRequests(ClientError):
    1:     """Exception mapping a ``429 Too Many Requests`` response."""
       
           # http_client does not define a constant for this in Python 2.
    1:     code = 429
       
       
    2: class ResourceExhausted(TooManyRequests):
    1:     """Exception mapping a :attr:`grpc.StatusCode.RESOURCE_EXHAUSTED` error."""
       
    1:     grpc_status_code = grpc.StatusCode.RESOURCE_EXHAUSTED if grpc is not None else None
       
       
    2: class Cancelled(ClientError):
    1:     """Exception mapping a :attr:`grpc.StatusCode.CANCELLED` error."""
       
           # This maps to HTTP status code 499. See
           # https://github.com/googleapis/googleapis/blob/master/google/rpc\
           # /code.proto
    1:     code = 499
    1:     grpc_status_code = grpc.StatusCode.CANCELLED if grpc is not None else None
       
       
    2: class ServerError(GoogleAPICallError):
    1:     """Base for 5xx responses."""
       
       
    2: class InternalServerError(ServerError):
           """Exception mapping a ``500 Internal Server Error`` response. or a
    1:     :attr:`grpc.StatusCode.INTERNAL` error."""
       
    1:     code = http_client.INTERNAL_SERVER_ERROR
    1:     grpc_status_code = grpc.StatusCode.INTERNAL if grpc is not None else None
       
       
    2: class Unknown(ServerError):
    1:     """Exception mapping a :attr:`grpc.StatusCode.UNKNOWN` error."""
       
    1:     grpc_status_code = grpc.StatusCode.UNKNOWN if grpc is not None else None
       
       
    2: class DataLoss(ServerError):
    1:     """Exception mapping a :attr:`grpc.StatusCode.DATA_LOSS` error."""
       
    1:     grpc_status_code = grpc.StatusCode.DATA_LOSS if grpc is not None else None
       
       
    2: class MethodNotImplemented(ServerError):
           """Exception mapping a ``501 Not Implemented`` response or a
    1:     :attr:`grpc.StatusCode.UNIMPLEMENTED` error."""
       
    1:     code = http_client.NOT_IMPLEMENTED
    1:     grpc_status_code = grpc.StatusCode.UNIMPLEMENTED if grpc is not None else None
       
       
    2: class BadGateway(ServerError):
    1:     """Exception mapping a ``502 Bad Gateway`` response."""
       
    1:     code = http_client.BAD_GATEWAY
       
       
    2: class ServiceUnavailable(ServerError):
           """Exception mapping a ``503 Service Unavailable`` response or a
    1:     :attr:`grpc.StatusCode.UNAVAILABLE` error."""
       
    1:     code = http_client.SERVICE_UNAVAILABLE
    1:     grpc_status_code = grpc.StatusCode.UNAVAILABLE if grpc is not None else None
       
       
    2: class GatewayTimeout(ServerError):
    1:     """Exception mapping a ``504 Gateway Timeout`` response."""
       
    1:     code = http_client.GATEWAY_TIMEOUT
       
       
    2: class DeadlineExceeded(GatewayTimeout):
    1:     """Exception mapping a :attr:`grpc.StatusCode.DEADLINE_EXCEEDED` error."""
       
    1:     grpc_status_code = grpc.StatusCode.DEADLINE_EXCEEDED if grpc is not None else None
       
       
    1: def exception_class_for_http_status(status_code):
           """Return the exception class for a specific HTTP status code.
       
           Args:
               status_code (int): The HTTP status code.
       
           Returns:
               :func:`type`: the appropriate subclass of :class:`GoogleAPICallError`.
           """
           return _HTTP_CODE_TO_EXCEPTION.get(status_code, GoogleAPICallError)
       
       
    1: def from_http_status(status_code, message, **kwargs):
           """Create a :class:`GoogleAPICallError` from an HTTP status code.
       
           Args:
               status_code (int): The HTTP status code.
               message (str): The exception message.
               kwargs: Additional arguments passed to the :class:`GoogleAPICallError`
                   constructor.
       
           Returns:
               GoogleAPICallError: An instance of the appropriate subclass of
                   :class:`GoogleAPICallError`.
           """
           error_class = exception_class_for_http_status(status_code)
           error = error_class(message, **kwargs)
       
           if error.code is None:
               error.code = status_code
       
           return error
       
       
    1: def from_http_response(response):
           """Create a :class:`GoogleAPICallError` from a :class:`requests.Response`.
       
           Args:
               response (requests.Response): The HTTP response.
       
           Returns:
               GoogleAPICallError: An instance of the appropriate subclass of
                   :class:`GoogleAPICallError`, with the message and errors populated
                   from the response.
           """
           try:
               payload = response.json()
           except ValueError:
               payload = {"error": {"message": response.text or "unknown error"}}
       
           error_message = payload.get("error", {}).get("message", "unknown error")
           errors = payload.get("error", {}).get("errors", ())
       
           message = "{method} {url}: {error}".format(
               method=response.request.method, url=response.request.url, error=error_message
           )
       
           exception = from_http_status(
               response.status_code, message, errors=errors, response=response
           )
           return exception
       
       
    1: def exception_class_for_grpc_status(status_code):
           """Return the exception class for a specific :class:`grpc.StatusCode`.
       
           Args:
               status_code (grpc.StatusCode): The gRPC status code.
       
           Returns:
               :func:`type`: the appropriate subclass of :class:`GoogleAPICallError`.
           """
   27:     return _GRPC_CODE_TO_EXCEPTION.get(status_code, GoogleAPICallError)
       
       
    1: def from_grpc_status(status_code, message, **kwargs):
           """Create a :class:`GoogleAPICallError` from a :class:`grpc.StatusCode`.
       
           Args:
               status_code (grpc.StatusCode): The gRPC status code.
               message (str): The exception message.
               kwargs: Additional arguments passed to the :class:`GoogleAPICallError`
                   constructor.
       
           Returns:
               GoogleAPICallError: An instance of the appropriate subclass of
                   :class:`GoogleAPICallError`.
           """
           error_class = exception_class_for_grpc_status(status_code)
           error = error_class(message, **kwargs)
       
           if error.grpc_status_code is None:
               error.grpc_status_code = status_code
       
           return error
       
       
    1: def _is_informative_grpc_error(rpc_exc):
           return hasattr(rpc_exc, "code") and hasattr(rpc_exc, "details")
       
       
    1: def from_grpc_error(rpc_exc):
           """Create a :class:`GoogleAPICallError` from a :class:`grpc.RpcError`.
       
           Args:
               rpc_exc (grpc.RpcError): The gRPC error.
       
           Returns:
               GoogleAPICallError: An instance of the appropriate subclass of
                   :class:`GoogleAPICallError`.
           """
           # NOTE(lidiz) All gRPC error shares the parent class grpc.RpcError.
           # However, check for grpc.RpcError breaks backward compatibility.
           if isinstance(rpc_exc, grpc.Call) or _is_informative_grpc_error(rpc_exc):
               return from_grpc_status(
                   rpc_exc.code(), rpc_exc.details(), errors=(rpc_exc,), response=rpc_exc
               )
           else:
               return GoogleAPICallError(str(rpc_exc), errors=(rpc_exc,), response=rpc_exc)
