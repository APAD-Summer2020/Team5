    1: from threading import RLock
    1: try:
    1:     from collections.abc import Mapping as DictMixin
       except ImportError:  # Python < 3.3
           try:
               from UserDict import DictMixin  # Python 2
           except ImportError:  # Python 3.0-3.3
               from collections import Mapping as DictMixin
       
       
       # With lazy loading, we might end up with multiple threads triggering
       # it at the same time. We need a lock.
    1: _fill_lock = RLock()
       
       
    2: class LazyDict(DictMixin):
    1:     """Dictionary populated on first use."""
    1:     data = None
       
    1:     def __getitem__(self, key):
               if self.data is None:
                   _fill_lock.acquire()
                   try:
                       if self.data is None:
                           self._fill()
                   finally:
                       _fill_lock.release()
               return self.data[key.upper()]
       
    1:     def __contains__(self, key):
               if self.data is None:
                   _fill_lock.acquire()
                   try:
                       if self.data is None:
                           self._fill()
                   finally:
                       _fill_lock.release()
               return key in self.data
       
    1:     def __iter__(self):
               if self.data is None:
                   _fill_lock.acquire()
                   try:
                       if self.data is None:
                           self._fill()
                   finally:
                       _fill_lock.release()
               return iter(self.data)
       
    1:     def __len__(self):
               if self.data is None:
                   _fill_lock.acquire()
                   try:
                       if self.data is None:
                           self._fill()
                   finally:
                       _fill_lock.release()
               return len(self.data)
       
    1:     def keys(self):
               if self.data is None:
                   _fill_lock.acquire()
                   try:
                       if self.data is None:
                           self._fill()
                   finally:
                       _fill_lock.release()
               return self.data.keys()
       
       
    2: class LazyList(list):
    1:     """List populated on first use."""
       
           _props = [
    1:         '__str__', '__repr__', '__unicode__',
    1:         '__hash__', '__sizeof__', '__cmp__',
    1:         '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__',
    1:         'append', 'count', 'index', 'extend', 'insert', 'pop', 'remove',
    1:         'reverse', 'sort', '__add__', '__radd__', '__iadd__', '__mul__',
    1:         '__rmul__', '__imul__', '__contains__', '__len__', '__nonzero__',
    1:         '__getitem__', '__setitem__', '__delitem__', '__iter__',
    1:         '__reversed__', '__getslice__', '__setslice__', '__delslice__']
       
    1:     def __new__(cls, fill_iter=None):
       
    2:         if fill_iter is None:
                   return list()
       
               # We need a new class as we will be dynamically messing with its
               # methods.
    4:         class LazyList(list):
    2:             pass
       
    2:         fill_iter = [fill_iter]
       
    2:         def lazy(name):
   62:             def _lazy(self, *args, **kw):
                       _fill_lock.acquire()
                       try:
                           if len(fill_iter) > 0:
                               list.extend(self, fill_iter.pop())
                               for method_name in cls._props:
                                   delattr(LazyList, method_name)
                       finally:
                           _fill_lock.release()
                       return getattr(list, name)(self, *args, **kw)
   62:             return _lazy
       
   64:         for name in cls._props:
   62:             setattr(LazyList, name, lazy(name))
       
    2:         new_list = LazyList()
    2:         return new_list
       
       # Not all versions of Python declare the same magic methods.
       # Filter out properties that don't exist in this version of Python
       # from the list.
   40: LazyList._props = [prop for prop in LazyList._props if hasattr(list, prop)]
       
       
    2: class LazySet(set):
    1:     """Set populated on first use."""
       
           _props = (
    1:         '__str__', '__repr__', '__unicode__',
               '__hash__', '__sizeof__', '__cmp__',
               '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__',
               '__contains__', '__len__', '__nonzero__',
               '__getitem__', '__setitem__', '__delitem__', '__iter__',
               '__sub__', '__and__', '__xor__', '__or__',
               '__rsub__', '__rand__', '__rxor__', '__ror__',
               '__isub__', '__iand__', '__ixor__', '__ior__',
               'add', 'clear', 'copy', 'difference', 'difference_update',
               'discard', 'intersection', 'intersection_update', 'isdisjoint',
               'issubset', 'issuperset', 'pop', 'remove',
               'symmetric_difference', 'symmetric_difference_update',
               'union', 'update')
       
    1:     def __new__(cls, fill_iter=None):
       
    2:         if fill_iter is None:
                   return set()
       
    4:         class LazySet(set):
    2:             pass
       
    2:         fill_iter = [fill_iter]
       
    2:         def lazy(name):
   84:             def _lazy(self, *args, **kw):
                       _fill_lock.acquire()
                       try:
                           if len(fill_iter) > 0:
                               for i in fill_iter.pop():
                                   set.add(self, i)
                               for method_name in cls._props:
                                   delattr(LazySet, method_name)
                       finally:
                           _fill_lock.release()
                       return getattr(set, name)(self, *args, **kw)
   84:             return _lazy
       
   86:         for name in cls._props:
   84:             setattr(LazySet, name, lazy(name))
       
    2:         new_set = LazySet()
    2:         return new_set
       
       # Not all versions of Python declare the same magic methods.
       # Filter out properties that don't exist in this version of Python
       # from the list.
   50: LazySet._props = [prop for prop in LazySet._props if hasattr(set, prop)]
