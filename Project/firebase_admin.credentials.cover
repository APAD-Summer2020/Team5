       # Copyright 2017 Google Inc.
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
    1: """Firebase credentials module."""
    1: import collections
    1: import json
       
    1: import google.auth
    1: from google.auth.transport import requests
    1: from google.oauth2 import credentials
    1: from google.oauth2 import service_account
       
       
    1: _request = requests.Request()
       _scopes = [
    1:     'https://www.googleapis.com/auth/cloud-platform',
    1:     'https://www.googleapis.com/auth/datastore',
    1:     'https://www.googleapis.com/auth/devstorage.read_write',
    1:     'https://www.googleapis.com/auth/firebase',
    1:     'https://www.googleapis.com/auth/identitytoolkit',
    1:     'https://www.googleapis.com/auth/userinfo.email'
       ]
       
    1: AccessTokenInfo = collections.namedtuple('AccessTokenInfo', ['access_token', 'expiry'])
       """Data included in an OAuth2 access token.
       
       Contains the access token string and the expiry time. The expirty time is exposed as a
       ``datetime`` value.
       """
       
       
    2: class Base:
    1:     """Provides OAuth2 access tokens for accessing Firebase services."""
       
    1:     def get_access_token(self):
               """Fetches a Google OAuth2 access token using this credential instance.
       
               Returns:
                 AccessTokenInfo: An access token obtained using the credential.
               """
               google_cred = self.get_credential()
               google_cred.refresh(_request)
               return AccessTokenInfo(google_cred.token, google_cred.expiry)
       
    1:     def get_credential(self):
               """Returns the Google credential instance used for authentication."""
               raise NotImplementedError
       
       
    2: class Certificate(Base):
    1:     """A credential initialized from a JSON certificate keyfile."""
       
    1:     _CREDENTIAL_TYPE = 'service_account'
       
    1:     def __init__(self, cert):
               """Initializes a credential from a Google service account certificate.
       
               Service account certificates can be downloaded as JSON files from the Firebase console.
               To instantiate a credential from a certificate file, either specify the file path or a
               dict representing the parsed contents of the file.
       
               Args:
                 cert: Path to a certificate file or a dict representing the contents of a certificate.
       
               Raises:
                 IOError: If the specified certificate file doesn't exist or cannot be read.
                 ValueError: If the specified certificate is invalid.
               """
    1:         super(Certificate, self).__init__()
    1:         if isinstance(cert, str):
    1:             with open(cert) as json_file:
    1:                 json_data = json.load(json_file)
               elif isinstance(cert, dict):
                   json_data = cert
               else:
                   raise ValueError(
                       'Invalid certificate argument: "{0}". Certificate argument must be a file path, '
                       'or a dict containing the parsed file contents.'.format(cert))
       
    1:         if json_data.get('type') != self._CREDENTIAL_TYPE:
                   raise ValueError('Invalid service account certificate. Certificate must contain a '
                                    '"type" field set to "{0}".'.format(self._CREDENTIAL_TYPE))
    1:         try:
    1:             self._g_credential = service_account.Credentials.from_service_account_info(
    1:                 json_data, scopes=_scopes)
               except ValueError as error:
                   raise ValueError('Failed to initialize a certificate credential. '
                                    'Caused by: "{0}"'.format(error))
       
    1:     @property
           def project_id(self):
    1:         return self._g_credential.project_id
       
    1:     @property
           def signer(self):
               return self._g_credential.signer
       
    1:     @property
           def service_account_email(self):
               return self._g_credential.service_account_email
       
    1:     def get_credential(self):
               """Returns the underlying Google credential.
       
               Returns:
                 google.auth.credentials.Credentials: A Google Auth credential instance."""
    1:         return self._g_credential
       
       
    2: class ApplicationDefault(Base):
    1:     """A Google Application Default credential."""
       
    1:     def __init__(self):
               """Creates an instance that will use Application Default credentials.
       
               The credentials will be lazily initialized when get_credential() or
               project_id() is called. See those methods for possible errors raised.
               """
               super(ApplicationDefault, self).__init__()
               self._g_credential = None  # Will be lazily-loaded via _load_credential().
       
    1:     def get_credential(self):
               """Returns the underlying Google credential.
       
               Raises:
                 google.auth.exceptions.DefaultCredentialsError: If Application Default
                     credentials cannot be initialized in the current environment.
               Returns:
                 google.auth.credentials.Credentials: A Google Auth credential instance."""
               self._load_credential()
               return self._g_credential
       
    1:     @property
           def project_id(self):
               """Returns the project_id from the underlying Google credential.
       
               Raises:
                 google.auth.exceptions.DefaultCredentialsError: If Application Default
                     credentials cannot be initialized in the current environment.
               Returns:
                 str: The project id."""
               self._load_credential()
               return self._project_id
       
    1:     def _load_credential(self):
               if not self._g_credential:
                   self._g_credential, self._project_id = google.auth.default(scopes=_scopes)
       
    2: class RefreshToken(Base):
    1:     """A credential initialized from an existing refresh token."""
       
    1:     _CREDENTIAL_TYPE = 'authorized_user'
       
    1:     def __init__(self, refresh_token):
               """Initializes a credential from a refresh token JSON file.
       
               The JSON must consist of client_id, client_secert and refresh_token fields. Refresh
               token files are typically created and managed by the gcloud SDK. To instantiate
               a credential from a refresh token file, either specify the file path or a dict
               representing the parsed contents of the file.
       
               Args:
                 refresh_token: Path to a refresh token file or a dict representing the contents of a
                     refresh token file.
       
               Raises:
                 IOError: If the specified file doesn't exist or cannot be read.
                 ValueError: If the refresh token configuration is invalid.
               """
               super(RefreshToken, self).__init__()
               if isinstance(refresh_token, str):
                   with open(refresh_token) as json_file:
                       json_data = json.load(json_file)
               elif isinstance(refresh_token, dict):
                   json_data = refresh_token
               else:
                   raise ValueError(
                       'Invalid refresh token argument: "{0}". Refresh token argument must be a file '
                       'path, or a dict containing the parsed file contents.'.format(refresh_token))
       
               if json_data.get('type') != self._CREDENTIAL_TYPE:
                   raise ValueError('Invalid refresh token configuration. JSON must contain a '
                                    '"type" field set to "{0}".'.format(self._CREDENTIAL_TYPE))
               self._g_credential = credentials.Credentials.from_authorized_user_info(json_data, _scopes)
       
    1:     @property
           def client_id(self):
               return self._g_credential.client_id
       
    1:     @property
           def client_secret(self):
               return self._g_credential.client_secret
       
    1:     @property
           def refresh_token(self):
               return self._g_credential.refresh_token
       
    1:     def get_credential(self):
               """Returns the underlying Google credential.
       
               Returns:
                 google.auth.credentials.Credentials: A Google Auth credential instance."""
               return self._g_credential
