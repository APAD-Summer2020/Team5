    1: import zlib
       
    1: from ._json import _CompactJSON
    1: from .encoding import base64_decode
    1: from .encoding import base64_encode
    1: from .exc import BadPayload
    1: from .serializer import Serializer
    1: from .timed import TimedSerializer
       
       
    2: class URLSafeSerializerMixin(object):
           """Mixed in with a regular serializer it will attempt to zlib
           compress the string to make it shorter if necessary. It will also
           base64 encode the string so that it can safely be placed in a URL.
    1:     """
       
    1:     default_serializer = _CompactJSON
       
    1:     def load_payload(self, payload, *args, **kwargs):
               decompress = False
               if payload.startswith(b"."):
                   payload = payload[1:]
                   decompress = True
               try:
                   json = base64_decode(payload)
               except Exception as e:
                   raise BadPayload(
                       "Could not base64 decode the payload because of an exception",
                       original_error=e,
                   )
               if decompress:
                   try:
                       json = zlib.decompress(json)
                   except Exception as e:
                       raise BadPayload(
                           "Could not zlib decompress the payload before decoding the payload",
                           original_error=e,
                       )
               return super(URLSafeSerializerMixin, self).load_payload(json, *args, **kwargs)
       
    1:     def dump_payload(self, obj):
               json = super(URLSafeSerializerMixin, self).dump_payload(obj)
               is_compressed = False
               compressed = zlib.compress(json)
               if len(compressed) < (len(json) - 1):
                   json = compressed
                   is_compressed = True
               base64d = base64_encode(json)
               if is_compressed:
                   base64d = b"." + base64d
               return base64d
       
       
    2: class URLSafeSerializer(URLSafeSerializerMixin, Serializer):
           """Works like :class:`.Serializer` but dumps and loads into a URL
           safe string consisting of the upper and lowercase character of the
           alphabet as well as ``'_'``, ``'-'`` and ``'.'``.
    1:     """
       
       
    2: class URLSafeTimedSerializer(URLSafeSerializerMixin, TimedSerializer):
           """Works like :class:`.TimedSerializer` but dumps and loads into a
           URL safe string consisting of the upper and lowercase character of
           the alphabet as well as ``'_'``, ``'-'`` and ``'.'``.
    1:     """
